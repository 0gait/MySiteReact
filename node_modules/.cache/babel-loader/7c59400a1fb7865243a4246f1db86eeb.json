{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\n/**\r\n * DevExtreme (esm/renovation/ui/scheduler/workspaces/base/utils.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../../../../core/utils/date\";\nimport { getGroupCount as _getGroupCount } from \"../../../../../ui/scheduler/resources/utils\";\nimport { isHorizontalGroupingApplied, isVerticalGroupingApplied } from \"../utils\";\nimport { ALL_DAY_PANEL_CELL_CLASS, ALL_DAY_ROW_CLASS, DATE_TABLE_CELL_CLASS, DATE_TABLE_ROW_CLASS } from \"../const\";\nvar DAY_MS = dateUtils.dateToMilliseconds(\"day\");\nvar HOUR_MS = dateUtils.dateToMilliseconds(\"hour\");\nexport var DATE_TABLE_MIN_CELL_WIDTH = 75;\nexport var getTotalRowCount = function getTotalRowCount(rowCount, groupOrientation, groups, isAllDayPanelVisible) {\n  var isVerticalGrouping = isVerticalGroupingApplied(groups, groupOrientation);\n  var groupCount = _getGroupCount(groups);\n  var totalRowCount = isVerticalGrouping ? rowCount * groupCount : rowCount;\n  return isAllDayPanelVisible ? totalRowCount + groupCount : totalRowCount;\n};\nexport var getTotalCellCount = function getTotalCellCount(cellCount, groupOrientation, groups) {\n  var isHorizontalGrouping = isHorizontalGroupingApplied(groups, groupOrientation);\n  var groupCount = _getGroupCount(groups);\n  return isHorizontalGrouping ? cellCount * groupCount : cellCount;\n};\nexport var getRowCountWithAllDayRow = function getRowCountWithAllDayRow(rowCount, isAllDayPanelVisible) {\n  return isAllDayPanelVisible ? rowCount + 1 : rowCount;\n};\nexport var getHiddenInterval = function getHiddenInterval(hoursInterval, cellCountInDay) {\n  var visibleInterval = hoursInterval * cellCountInDay * HOUR_MS;\n  return DAY_MS - visibleInterval;\n};\nexport var createCellElementMetaData = function createCellElementMetaData(tableRect, cellRect) {\n  var bottom = cellRect.bottom,\n    height = cellRect.height,\n    left = cellRect.left,\n    right = cellRect.right,\n    top = cellRect.top,\n    width = cellRect.width,\n    x = cellRect.x,\n    y = cellRect.y;\n  return {\n    right: right,\n    bottom: bottom,\n    left: left - tableRect.left,\n    top: top - tableRect.top,\n    width: width,\n    height: height,\n    x: x,\n    y: y\n  };\n};\nexport var getDateForHeaderText = function getDateForHeaderText(_, date) {\n  return date;\n};\nexport var getDateTableWidth = function getDateTableWidth(scrollableWidth, dateTable, viewDataProvider, workSpaceConfig) {\n  var dateTableCell = dateTable.querySelector(\"td:not(.dx-scheduler-virtual-cell)\");\n  var cellWidth = dateTableCell.getBoundingClientRect().width;\n  if (cellWidth < DATE_TABLE_MIN_CELL_WIDTH) {\n    cellWidth = DATE_TABLE_MIN_CELL_WIDTH;\n  }\n  var cellCount = viewDataProvider.getCellCount(workSpaceConfig);\n  var totalCellCount = getTotalCellCount(cellCount, workSpaceConfig.groupOrientation, workSpaceConfig.groups);\n  var minTablesWidth = totalCellCount * cellWidth;\n  return scrollableWidth < minTablesWidth ? minTablesWidth : scrollableWidth;\n};\nexport var createVirtualScrollingOptions = function createVirtualScrollingOptions(options) {\n  return {\n    getCellHeight: function getCellHeight() {\n      return options.cellHeight;\n    },\n    getCellWidth: function getCellWidth() {\n      return options.cellWidth;\n    },\n    getCellMinWidth: function getCellMinWidth() {\n      return DATE_TABLE_MIN_CELL_WIDTH;\n    },\n    isRTL: function isRTL() {\n      return options.rtlEnabled;\n    },\n    getSchedulerHeight: function getSchedulerHeight() {\n      return options.schedulerHeight;\n    },\n    getSchedulerWidth: function getSchedulerWidth() {\n      return options.schedulerWidth;\n    },\n    getViewHeight: function getViewHeight() {\n      return options.viewHeight;\n    },\n    getViewWidth: function getViewWidth() {\n      return options.viewWidth;\n    },\n    getScrolling: function getScrolling() {\n      return options.scrolling;\n    },\n    getScrollableOuterWidth: function getScrollableOuterWidth() {\n      return options.scrollableWidth;\n    },\n    getGroupCount: function getGroupCount() {\n      return _getGroupCount(options.groups);\n    },\n    isVerticalGrouping: function isVerticalGrouping() {\n      return options.isVerticalGrouping;\n    },\n    getTotalRowCount: function getTotalRowCount() {\n      return options.completeRowCount;\n    },\n    getTotalCellCount: function getTotalCellCount() {\n      return options.completeColumnCount;\n    },\n    getWindowHeight: function getWindowHeight() {\n      return options.windowHeight;\n    },\n    getWindowWidth: function getWindowWidth() {\n      return options.windowWidth;\n    }\n  };\n};\nexport var getCellIndices = function getCellIndices(cell) {\n  var row = cell.closest(\".\".concat(DATE_TABLE_ROW_CLASS, \", .\").concat(ALL_DAY_ROW_CLASS));\n  var rowParent = row.parentNode;\n  var cellParent = cell.parentNode;\n  var columnIndex = _toConsumableArray(Array.from(cellParent.children)).filter(function (child) {\n    return child.className.includes(DATE_TABLE_CELL_CLASS) || child.className.includes(ALL_DAY_PANEL_CELL_CLASS);\n  }).indexOf(cell);\n  var rowIndex = _toConsumableArray(Array.from(rowParent.children)).filter(function (child) {\n    return child.className.includes(DATE_TABLE_ROW_CLASS);\n  }).indexOf(row);\n  return {\n    columnIndex: columnIndex,\n    rowIndex: rowIndex\n  };\n};\nexport var compareCellsByDateAndIndex = function compareCellsByDateAndIndex(daysAndIndexes) {\n  var date = daysAndIndexes.date,\n    firstDate = daysAndIndexes.firstDate,\n    firstIndex = daysAndIndexes.firstIndex,\n    index = daysAndIndexes.index,\n    lastDate = daysAndIndexes.lastDate,\n    lastIndex = daysAndIndexes.lastIndex;\n  if (firstDate === lastDate) {\n    var validFirstIndex = firstIndex;\n    var validLastIndex = lastIndex;\n    if (validFirstIndex > validLastIndex) {\n      var _ref = [validLastIndex, validFirstIndex];\n      validFirstIndex = _ref[0];\n      validLastIndex = _ref[1];\n    }\n    return firstDate === date && index >= validFirstIndex && index <= validLastIndex;\n  }\n  return date === firstDate && index >= firstIndex || date === lastDate && index <= lastIndex || firstDate < date && date < lastDate;\n};\nvar filterCellsByDateAndIndex = function filterCellsByDateAndIndex(cellsRow, filterData) {\n  var firstDate = filterData.firstDate,\n    firstIndex = filterData.firstIndex,\n    lastDate = filterData.lastDate,\n    lastIndex = filterData.lastIndex;\n  var firstDay = dateUtils.trimTime(firstDate).getTime();\n  var lastDay = dateUtils.trimTime(lastDate).getTime();\n  return cellsRow.filter(function (cell) {\n    var index = cell.index,\n      startDate = cell.startDate;\n    var day = dateUtils.trimTime(startDate).getTime();\n    var daysAndIndexes = {\n      date: day,\n      index: index,\n      firstDate: firstDay,\n      firstIndex: firstIndex,\n      lastDate: lastDay,\n      lastIndex: lastIndex\n    };\n    return compareCellsByDateAndIndex(daysAndIndexes);\n  });\n};\nexport var getSelectedCells = function getSelectedCells(viewDataProvider, firstSelectedCell, lastSelectedCell, isLastSelectedCellAllDay) {\n  var firstCell = firstSelectedCell;\n  var lastCell = lastSelectedCell;\n  if (firstCell.startDate.getTime() > lastCell.startDate.getTime()) {\n    var _ref2 = [lastCell, firstCell];\n    firstCell = _ref2[0];\n    lastCell = _ref2[1];\n  }\n  var _firstCell = firstCell,\n    firstGroupIndex = _firstCell.groupIndex,\n    firstCellIndex = _firstCell.index,\n    firstStartDate = _firstCell.startDate;\n  var _lastCell = lastCell,\n    lastCellIndex = _lastCell.index,\n    lastStartDate = _lastCell.startDate;\n  var cells = viewDataProvider.getCellsByGroupIndexAndAllDay(null !== firstGroupIndex && void 0 !== firstGroupIndex ? firstGroupIndex : 0, isLastSelectedCellAllDay);\n  var filteredCells = cells.reduce(function (selectedCells, cellsRow) {\n    var filterData = {\n      firstDate: firstStartDate,\n      lastDate: lastStartDate,\n      firstIndex: firstCellIndex,\n      lastIndex: lastCellIndex\n    };\n    var filteredRow = filterCellsByDateAndIndex(cellsRow, filterData);\n    selectedCells.push.apply(selectedCells, _toConsumableArray(filteredRow));\n    return selectedCells;\n  }, []);\n  var selectedCells = filteredCells.sort(function (firstArg, secondArg) {\n    return firstArg.startDate.getTime() - secondArg.startDate.getTime();\n  });\n  return selectedCells;\n};\nexport var isCellAllDay = function isCellAllDay(cell) {\n  return cell.className.includes(ALL_DAY_PANEL_CELL_CLASS);\n};","map":null,"metadata":{},"sourceType":"module"}