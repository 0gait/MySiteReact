{"ast":null,"code":"import _createClass from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\n/**\r\n * DevExtreme (esm/ui/scheduler/resources/agendaResourceProcessor.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { wrapToArray } from \"../../../core/utils/array\";\nimport { when, Deferred } from \"../../../core/utils/deferred\";\nimport { getFieldExpr, getDisplayExpr, getValueExpr, getWrappedDataSource } from \"./utils\";\nvar PromiseItem = function PromiseItem(rawAppointment, promise) {\n  _classCallCheck(this, PromiseItem);\n  this.rawAppointment = rawAppointment;\n  this.promise = promise;\n};\nexport var AgendaResourceProcessor = /*#__PURE__*/function () {\n  _createClass(AgendaResourceProcessor, [{\n    key: \"resourceDeclarations\",\n    get: function get() {\n      return this._resourceDeclarations;\n    },\n    set: function set(value) {\n      this._resourceDeclarations = value;\n      this.isLoaded = false;\n      this.isLoading = false;\n      this.resourceMap.clear();\n      this.appointmentPromiseQueue = [];\n    }\n  }]);\n  function AgendaResourceProcessor() {\n    _classCallCheck(this, AgendaResourceProcessor);\n    var resourceDeclarations = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n    this._resourceDeclarations = resourceDeclarations;\n    this.isLoaded = false;\n    this.isLoading = false;\n    this.resourceMap = new Map();\n    this.appointmentPromiseQueue = [];\n  }\n  _createClass(AgendaResourceProcessor, [{\n    key: \"_pushAllResources\",\n    value: function _pushAllResources() {\n      var _this = this;\n      this.appointmentPromiseQueue.forEach(function (_ref) {\n        var promise = _ref.promise,\n          rawAppointment = _ref.rawAppointment;\n        var result = [];\n        _this.resourceMap.forEach(function (resource, fieldName) {\n          var item = {\n            label: resource.label,\n            values: []\n          };\n          if (fieldName in rawAppointment) {\n            wrapToArray(rawAppointment[fieldName]).forEach(function (value) {\n              return item.values.push(resource.map.get(value));\n            });\n          }\n          if (item.values.length) {\n            result.push(item);\n          }\n        });\n        promise.resolve(result);\n      });\n      this.appointmentPromiseQueue = [];\n    }\n  }, {\n    key: \"_onPullResource\",\n    value: function _onPullResource(fieldName, valueName, displayName, label, items) {\n      var map = new Map();\n      items.forEach(function (item) {\n        return map.set(item[valueName], item[displayName]);\n      });\n      this.resourceMap.set(fieldName, {\n        label: label,\n        map: map\n      });\n    }\n  }, {\n    key: \"_hasResourceDeclarations\",\n    value: function _hasResourceDeclarations(resources) {\n      if (0 === resources.length) {\n        this.appointmentPromiseQueue.forEach(function (_ref2) {\n          var promise = _ref2.promise;\n          return promise.resolve([]);\n        });\n        this.appointmentPromiseQueue = [];\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"_tryPullResources\",\n    value: function _tryPullResources(resources, resultAsync) {\n      var _this2 = this;\n      if (!this.isLoading) {\n        this.isLoading = true;\n        var promises = [];\n        resources.forEach(function (resource) {\n          var promise = new Deferred().done(function (items) {\n            return _this2._onPullResource(getFieldExpr(resource), getValueExpr(resource), getDisplayExpr(resource), resource.label, items);\n          });\n          promises.push(promise);\n          var dataSource = getWrappedDataSource(resource.dataSource);\n          if (dataSource.isLoaded()) {\n            promise.resolve(dataSource.items());\n          } else {\n            dataSource.load().done(function (list) {\n              return promise.resolve(list);\n            }).fail(function () {\n              return promise.reject();\n            });\n          }\n        });\n        when.apply(null, promises).done(function () {\n          _this2.isLoaded = true;\n          _this2.isLoading = false;\n          _this2._pushAllResources();\n        }).fail(function () {\n          return resultAsync.reject();\n        });\n      }\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var resourceDeclarations = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];\n      this.resourceDeclarations = resourceDeclarations;\n    }\n  }, {\n    key: \"createListAsync\",\n    value: function createListAsync(rawAppointment) {\n      var resultAsync = new Deferred();\n      this.appointmentPromiseQueue.push(new PromiseItem(rawAppointment, resultAsync));\n      if (this._hasResourceDeclarations(this.resourceDeclarations)) {\n        if (this.isLoaded) {\n          this._pushAllResources();\n        } else {\n          this._tryPullResources(this.resourceDeclarations, resultAsync);\n        }\n      }\n      return resultAsync.promise();\n    }\n  }]);\n  return AgendaResourceProcessor;\n}();","map":null,"metadata":{},"sourceType":"module"}