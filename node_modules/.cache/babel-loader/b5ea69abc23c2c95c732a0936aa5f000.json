{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/form/components/field_item.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { name as clickEventName } from \"../../../events/click\";\nimport { getPublicElement } from \"../../../core/element\";\nimport { captionize } from \"../../../core/utils/inflector\";\nimport { format } from \"../../../core/utils/string\";\nimport { isMaterial } from \"../../themes\";\nimport errors from \"../../widget/ui.errors\";\nimport Validator from \"../../validator\";\nimport { FIELD_ITEM_CONTENT_CLASS } from \"../constants\";\nexport var FLEX_LAYOUT_CLASS = \"dx-flex-layout\";\nexport var FIELD_ITEM_OPTIONAL_CLASS = \"dx-field-item-optional\";\nexport var FIELD_ITEM_REQUIRED_CLASS = \"dx-field-item-required\";\nexport var FIELD_ITEM_CONTENT_WRAPPER_CLASS = \"dx-field-item-content-wrapper\";\nexport var FIELD_ITEM_CONTENT_LOCATION_CLASS = \"dx-field-item-content-location-\";\nexport var FIELD_ITEM_LABEL_ALIGN_CLASS = \"dx-field-item-label-align\";\nexport var FIELD_ITEM_HELP_TEXT_CLASS = \"dx-field-item-help-text\";\nexport var LABEL_VERTICAL_ALIGNMENT_CLASS = \"dx-label-v-align\";\nexport var LABEL_HORIZONTAL_ALIGNMENT_CLASS = \"dx-label-h-align\";\nimport { renderLabel } from \"./label\";\nvar TEMPLATE_WRAPPER_CLASS = \"dx-template-wrapper\";\nvar VALIDATION_TARGET_CLASS = \"dx-validation-target\";\nvar INVALID_CLASS = \"dx-invalid\";\nexport function renderFieldItem(_ref) {\n  var $parent = _ref.$parent,\n    rootElementCssClassList = _ref.rootElementCssClassList,\n    formOrLayoutManager = _ref.formOrLayoutManager,\n    createComponentCallback = _ref.createComponentCallback,\n    labelOptions = _ref.labelOptions,\n    labelNeedBaselineAlign = _ref.labelNeedBaselineAlign,\n    labelLocation = _ref.labelLocation,\n    needRenderLabel = _ref.needRenderLabel,\n    formLabelLocation = _ref.formLabelLocation,\n    item = _ref.item,\n    editorOptions = _ref.editorOptions,\n    isSimpleItem = _ref.isSimpleItem,\n    isRequired = _ref.isRequired,\n    template = _ref.template,\n    helpID = _ref.helpID,\n    labelID = _ref.labelID,\n    name = _ref.name,\n    helpText = _ref.helpText,\n    requiredMessageTemplate = _ref.requiredMessageTemplate,\n    validationGroup = _ref.validationGroup;\n  var $rootElement = $(\"<div>\").addClass(rootElementCssClassList.join(\" \")).appendTo($parent);\n  $rootElement.addClass(isRequired ? FIELD_ITEM_REQUIRED_CLASS : FIELD_ITEM_OPTIONAL_CLASS);\n  if (isSimpleItem) {\n    $rootElement.addClass(FLEX_LAYOUT_CLASS);\n  }\n  if (isSimpleItem && labelNeedBaselineAlign) {\n    $rootElement.addClass(FIELD_ITEM_LABEL_ALIGN_CLASS);\n  }\n  var $fieldEditorContainer = $(\"<div>\");\n  $fieldEditorContainer.data(\"dx-form-item\", item);\n  $fieldEditorContainer.addClass(FIELD_ITEM_CONTENT_CLASS).addClass(FIELD_ITEM_CONTENT_LOCATION_CLASS + {\n    right: \"left\",\n    left: \"right\",\n    top: \"bottom\"\n  }[formLabelLocation]);\n  var $label = null;\n  if (needRenderLabel) {\n    if (labelOptions.labelTemplate) {\n      labelOptions.labelTemplateData = getTemplateData(item, editorOptions, formOrLayoutManager);\n    }\n    $label = renderLabel(labelOptions);\n  }\n  if ($label) {\n    $rootElement.append($label);\n    if (\"top\" === labelLocation || \"left\" === labelLocation) {\n      $rootElement.append($fieldEditorContainer);\n    }\n    if (\"right\" === labelLocation) {\n      $rootElement.prepend($fieldEditorContainer);\n    }\n    if (\"top\" === labelLocation) {\n      $rootElement.addClass(LABEL_VERTICAL_ALIGNMENT_CLASS);\n    } else {\n      $rootElement.addClass(LABEL_HORIZONTAL_ALIGNMENT_CLASS);\n    }\n    if (\"dxCheckBox\" === item.editorType || \"dxSwitch\" === item.editorType) {\n      eventsEngine.on($label, clickEventName, function () {\n        eventsEngine.trigger($fieldEditorContainer.children(), clickEventName);\n      });\n    }\n  } else {\n    $rootElement.append($fieldEditorContainer);\n  }\n  var widgetInstance;\n  if (template) {\n    template.render({\n      container: getPublicElement($fieldEditorContainer),\n      model: getTemplateData(item, editorOptions, formOrLayoutManager),\n      onRendered: function onRendered() {\n        var $validationTarget = getValidationTarget($fieldEditorContainer);\n        var validationTargetInstance = tryGetValidationTargetInstance($validationTarget);\n        subscribeWrapperInvalidClassToggle(validationTargetInstance);\n      }\n    });\n  } else {\n    var $div = $(\"<div>\").appendTo($fieldEditorContainer);\n    try {\n      widgetInstance = createComponentCallback($div, item.editorType, editorOptions);\n      widgetInstance.setAria(\"describedby\", helpID);\n      if (labelID) {\n        widgetInstance.setAria(\"labelledby\", labelID);\n      }\n      widgetInstance.setAria(\"required\", isRequired);\n    } catch (e) {\n      errors.log(\"E1035\", e.message);\n    }\n  }\n  var $validationTarget = getValidationTarget($fieldEditorContainer);\n  var validationTargetInstance = $validationTarget && $validationTarget.data(VALIDATION_TARGET_CLASS);\n  if (validationTargetInstance) {\n    var isItemHaveCustomLabel = item.label && item.label.text;\n    var itemName = isItemHaveCustomLabel ? null : name;\n    var fieldName = isItemHaveCustomLabel ? item.label.text : itemName && captionize(itemName);\n    var validationRules;\n    if (isSimpleItem) {\n      if (item.validationRules) {\n        validationRules = item.validationRules;\n      } else {\n        var requiredMessage = format(requiredMessageTemplate, fieldName || \"\");\n        validationRules = item.isRequired ? [{\n          type: \"required\",\n          message: requiredMessage\n        }] : null;\n      }\n    }\n    if (Array.isArray(validationRules) && validationRules.length) {\n      createComponentCallback($validationTarget, Validator, {\n        validationRules: validationRules,\n        validationGroup: validationGroup,\n        dataGetter: function dataGetter() {\n          return {\n            formItem: item\n          };\n        }\n      });\n    }\n    subscribeWrapperInvalidClassToggle(validationTargetInstance);\n  }\n  if (helpText && isSimpleItem) {\n    var $editorParent = $fieldEditorContainer.parent();\n    $editorParent.append($(\"<div>\").addClass(FIELD_ITEM_CONTENT_WRAPPER_CLASS).append($fieldEditorContainer).append($(\"<div>\").addClass(FIELD_ITEM_HELP_TEXT_CLASS).attr(\"id\", helpID).text(helpText)));\n  }\n  return {\n    $fieldEditorContainer: $fieldEditorContainer,\n    $rootElement: $rootElement,\n    widgetInstance: widgetInstance\n  };\n}\nfunction getValidationTarget($fieldEditorContainer) {\n  var $editor = $fieldEditorContainer.children().first();\n  return $editor.hasClass(TEMPLATE_WRAPPER_CLASS) ? $editor.children().first() : $editor;\n}\nfunction tryGetValidationTargetInstance($validationTarget) {\n  var _$validationTarget$pa, _$validationTarget$pa2;\n  return (null === $validationTarget || void 0 === $validationTarget ? void 0 : $validationTarget.data(VALIDATION_TARGET_CLASS)) || (null === $validationTarget || void 0 === $validationTarget ? void 0 : null === (_$validationTarget$pa = $validationTarget.parent) || void 0 === _$validationTarget$pa ? void 0 : null === (_$validationTarget$pa2 = _$validationTarget$pa.call($validationTarget)) || void 0 === _$validationTarget$pa2 ? void 0 : _$validationTarget$pa2.data(VALIDATION_TARGET_CLASS));\n}\nfunction subscribeWrapperInvalidClassToggle(validationTargetInstance) {\n  if (validationTargetInstance && isMaterial()) {\n    var wrapperClass = \".\".concat(FIELD_ITEM_CONTENT_WRAPPER_CLASS);\n    var toggleInvalidClass = function toggleInvalidClass(_ref2) {\n      var element = _ref2.element,\n        component = _ref2.component;\n      var _component$option = component.option(),\n        isValid = _component$option.isValid,\n        validationMessageMode = _component$option.validationMessageMode;\n      $(element).parents(wrapperClass).toggleClass(INVALID_CLASS, false === isValid && (component._isFocused() || \"always\" === validationMessageMode));\n    };\n    validationTargetInstance.on(\"optionChanged\", function (e) {\n      if (\"isValid\" !== e.name) {\n        return;\n      }\n      toggleInvalidClass(e);\n    });\n    validationTargetInstance.on(\"focusIn\", toggleInvalidClass).on(\"focusOut\", toggleInvalidClass).on(\"enterKey\", toggleInvalidClass);\n  }\n}\nfunction getTemplateData(item, editorOptions, formOrLayoutManager) {\n  return {\n    dataField: item.dataField,\n    editorType: item.editorType,\n    editorOptions: editorOptions,\n    component: formOrLayoutManager,\n    name: item.name\n  };\n}","map":null,"metadata":{},"sourceType":"module"}