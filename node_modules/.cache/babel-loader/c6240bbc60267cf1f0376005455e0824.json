{"ast":null,"code":"/*!\n * devextreme-react\n * Version: 22.2.4\n * Build date: Thu Jan 19 2023\n *\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SearchEditorOptions = exports.Options = exports.Item = exports.Button = exports.TreeView = void 0;\nvar tree_view_1 = require(\"devextreme/ui/tree_view\");\nvar PropTypes = require(\"prop-types\");\nvar component_1 = require(\"./core/component\");\nvar nested_option_1 = require(\"./core/nested-option\");\nvar TreeView = /** @class */function (_super) {\n  __extends(TreeView, _super);\n  function TreeView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this._WidgetClass = tree_view_1.default;\n    _this.subscribableOptions = [\"items\"];\n    _this.independentEvents = [\"onContentReady\", \"onDisposing\", \"onInitialized\", \"onItemClick\", \"onItemCollapsed\", \"onItemContextMenu\", \"onItemExpanded\", \"onItemHold\", \"onItemRendered\", \"onSelectAllValueChanged\"];\n    _this._defaults = {\n      defaultItems: \"items\"\n    };\n    _this._expectedChildren = {\n      item: {\n        optionName: \"items\",\n        isCollectionItem: true\n      },\n      searchEditorOptions: {\n        optionName: \"searchEditorOptions\",\n        isCollectionItem: false\n      }\n    };\n    _this._templateProps = [{\n      tmplOption: \"itemTemplate\",\n      render: \"itemRender\",\n      component: \"itemComponent\",\n      keyFn: \"itemKeyFn\"\n    }];\n    return _this;\n  }\n  Object.defineProperty(TreeView.prototype, \"instance\", {\n    get: function get() {\n      return this._instance;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return TreeView;\n}(component_1.Component);\nexports.TreeView = TreeView;\nTreeView.propTypes = {\n  accessKey: PropTypes.string,\n  activeStateEnabled: PropTypes.bool,\n  animationEnabled: PropTypes.bool,\n  createChildren: PropTypes.func,\n  dataStructure: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([\"plain\", \"tree\"])]),\n  disabled: PropTypes.bool,\n  disabledExpr: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  displayExpr: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  elementAttr: PropTypes.object,\n  expandAllEnabled: PropTypes.bool,\n  expandedExpr: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  expandEvent: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([\"dblclick\", \"click\"])]),\n  expandNodesRecursive: PropTypes.bool,\n  focusStateEnabled: PropTypes.bool,\n  hasItemsExpr: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  height: PropTypes.oneOfType([PropTypes.func, PropTypes.number, PropTypes.string]),\n  hint: PropTypes.string,\n  hoverStateEnabled: PropTypes.bool,\n  itemHoldTimeout: PropTypes.number,\n  items: PropTypes.array,\n  itemsExpr: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  keyExpr: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  noDataText: PropTypes.string,\n  onContentReady: PropTypes.func,\n  onDisposing: PropTypes.func,\n  onInitialized: PropTypes.func,\n  onItemClick: PropTypes.func,\n  onItemCollapsed: PropTypes.func,\n  onItemContextMenu: PropTypes.func,\n  onItemExpanded: PropTypes.func,\n  onItemHold: PropTypes.func,\n  onItemRendered: PropTypes.func,\n  onItemSelectionChanged: PropTypes.func,\n  onOptionChanged: PropTypes.func,\n  onSelectAllValueChanged: PropTypes.func,\n  onSelectionChanged: PropTypes.func,\n  parentIdExpr: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  rtlEnabled: PropTypes.bool,\n  scrollDirection: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([\"both\", \"horizontal\", \"vertical\"])]),\n  searchEditorOptions: PropTypes.object,\n  searchEnabled: PropTypes.bool,\n  searchExpr: PropTypes.oneOfType([PropTypes.array, PropTypes.func, PropTypes.string]),\n  searchMode: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([\"contains\", \"startswith\", \"equals\"])]),\n  searchTimeout: PropTypes.number,\n  searchValue: PropTypes.string,\n  selectAllText: PropTypes.string,\n  selectByClick: PropTypes.bool,\n  selectedExpr: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  selectionMode: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([\"single\", \"multiple\"])]),\n  selectNodesRecursive: PropTypes.bool,\n  showCheckBoxesMode: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([\"none\", \"normal\", \"selectAll\"])]),\n  tabIndex: PropTypes.number,\n  useNativeScrolling: PropTypes.bool,\n  virtualModeEnabled: PropTypes.bool,\n  visible: PropTypes.bool,\n  width: PropTypes.oneOfType([PropTypes.func, PropTypes.number, PropTypes.string])\n};\nvar Button = /** @class */function (_super) {\n  __extends(Button, _super);\n  function Button() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Button.OptionName = \"buttons\";\n  Button.IsCollectionItem = true;\n  Button.ExpectedChildren = {\n    options: {\n      optionName: \"options\",\n      isCollectionItem: false\n    }\n  };\n  return Button;\n}(nested_option_1.default);\nexports.Button = Button;\nvar Item = /** @class */function (_super) {\n  __extends(Item, _super);\n  function Item() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Item.OptionName = \"items\";\n  Item.IsCollectionItem = true;\n  Item.TemplateProps = [{\n    tmplOption: \"template\",\n    render: \"render\",\n    component: \"component\",\n    keyFn: \"keyFn\"\n  }];\n  return Item;\n}(nested_option_1.default);\nexports.Item = Item;\nvar Options = /** @class */function (_super) {\n  __extends(Options, _super);\n  function Options() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Options.OptionName = \"options\";\n  Options.TemplateProps = [{\n    tmplOption: \"template\",\n    render: \"render\",\n    component: \"component\",\n    keyFn: \"keyFn\"\n  }];\n  return Options;\n}(nested_option_1.default);\nexports.Options = Options;\nvar SearchEditorOptions = /** @class */function (_super) {\n  __extends(SearchEditorOptions, _super);\n  function SearchEditorOptions() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  SearchEditorOptions.OptionName = \"searchEditorOptions\";\n  SearchEditorOptions.DefaultsProps = {\n    defaultValue: \"value\"\n  };\n  SearchEditorOptions.ExpectedChildren = {\n    button: {\n      optionName: \"buttons\",\n      isCollectionItem: true\n    }\n  };\n  return SearchEditorOptions;\n}(nested_option_1.default);\nexports.SearchEditorOptions = SearchEditorOptions;\nexports.default = TreeView;","map":null,"metadata":{},"sourceType":"script"}