{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\MySiteReact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\MySiteReact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n/**\r\n * DevExtreme (esm/ui/overlay/overlay_position_controller.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { isDefined, isString, isWindow, isEvent } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport positionUtils from \"../../animation/position\";\nimport { resetPosition, move, locate } from \"../../animation/translator\";\nimport { getWindow } from \"../../core/utils/window\";\nimport swatch from \"../widget/swatch_container\";\nvar window = getWindow();\nvar OVERLAY_POSITION_ALIASES = {\n  top: {\n    my: \"top center\",\n    at: \"top center\"\n  },\n  bottom: {\n    my: \"bottom center\",\n    at: \"bottom center\"\n  },\n  right: {\n    my: \"right center\",\n    at: \"right center\"\n  },\n  left: {\n    my: \"left center\",\n    at: \"left center\"\n  },\n  center: {\n    my: \"center\",\n    at: \"center\"\n  },\n  \"right bottom\": {\n    my: \"right bottom\",\n    at: \"right bottom\"\n  },\n  \"right top\": {\n    my: \"right top\",\n    at: \"right top\"\n  },\n  \"left bottom\": {\n    my: \"left bottom\",\n    at: \"left bottom\"\n  },\n  \"left top\": {\n    my: \"left top\",\n    at: \"left top\"\n  }\n};\nvar OVERLAY_DEFAULT_BOUNDARY_OFFSET = {\n  h: 0,\n  v: 0\n};\nvar OverlayPositionController = /*#__PURE__*/function () {\n  function OverlayPositionController(_ref) {\n    _classCallCheck(this, OverlayPositionController);\n    var position = _ref.position,\n      container = _ref.container,\n      visualContainer = _ref.visualContainer,\n      $root = _ref.$root,\n      $content = _ref.$content,\n      $wrapper = _ref.$wrapper,\n      onPositioned = _ref.onPositioned,\n      onVisualPositionChanged = _ref.onVisualPositionChanged,\n      restorePosition = _ref.restorePosition,\n      _fixWrapperPosition = _ref._fixWrapperPosition;\n    this._props = {\n      position: position,\n      container: container,\n      visualContainer: visualContainer,\n      restorePosition: restorePosition,\n      onPositioned: onPositioned,\n      onVisualPositionChanged: onVisualPositionChanged,\n      _fixWrapperPosition: _fixWrapperPosition\n    };\n    this._$root = $root;\n    this._$content = $content;\n    this._$wrapper = $wrapper;\n    this._$markupContainer = void 0;\n    this._$visualContainer = void 0;\n    this._shouldRenderContentInitialPosition = true;\n    this._visualPosition = void 0;\n    this._initialPosition = void 0;\n    this._previousVisualPosition = void 0;\n    this.updateContainer(container);\n    this.updatePosition(position);\n    this.updateVisualContainer(visualContainer);\n  }\n  _createClass(OverlayPositionController, [{\n    key: \"restorePositionOnNextRender\",\n    value: function restorePositionOnNextRender(value) {\n      this._shouldRenderContentInitialPosition = value || !this._visualPosition;\n    }\n  }, {\n    key: \"openingHandled\",\n    value: function openingHandled() {\n      var shouldRestorePosition = this._props.restorePosition;\n      this.restorePositionOnNextRender(shouldRestorePosition);\n    }\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition(positionProp) {\n      this._props.position = positionProp;\n      this._position = this._normalizePosition(positionProp);\n      this.updateVisualContainer();\n    }\n  }, {\n    key: \"updateContainer\",\n    value: function updateContainer() {\n      var containerProp = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._props.container;\n      this._props.container = containerProp;\n      this._$markupContainer = containerProp ? $(containerProp) : swatch.getSwatchContainer(this._$root);\n      this.updateVisualContainer(this._props.visualContainer);\n    }\n  }, {\n    key: \"updateVisualContainer\",\n    value: function updateVisualContainer() {\n      var visualContainer = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._props.visualContainer;\n      this._props.visualContainer = visualContainer;\n      this._$visualContainer = this._getVisualContainer();\n    }\n  }, {\n    key: \"detectVisualPositionChange\",\n    value: function detectVisualPositionChange(event) {\n      this._updateVisualPositionValue();\n      this._raisePositionedEvents(event);\n    }\n  }, {\n    key: \"positionContent\",\n    value: function positionContent() {\n      if (this._shouldRenderContentInitialPosition) {\n        this._renderContentInitialPosition();\n      } else {\n        move(this._$content, this._visualPosition);\n        this.detectVisualPositionChange();\n      }\n    }\n  }, {\n    key: \"positionWrapper\",\n    value: function positionWrapper() {\n      if (this._$visualContainer) {\n        positionUtils.setup(this._$wrapper, {\n          my: \"top left\",\n          at: \"top left\",\n          of: this._$visualContainer\n        });\n      }\n    }\n  }, {\n    key: \"styleWrapperPosition\",\n    value: function styleWrapperPosition() {\n      var useFixed = isWindow(this.$visualContainer.get(0)) || this._props._fixWrapperPosition;\n      var positionStyle = useFixed ? \"fixed\" : \"absolute\";\n      this._$wrapper.css(\"position\", positionStyle);\n    }\n  }, {\n    key: \"_updateVisualPositionValue\",\n    value: function _updateVisualPositionValue() {\n      this._previousVisualPosition = this._visualPosition;\n      this._visualPosition = locate(this._$content);\n    }\n  }, {\n    key: \"_renderContentInitialPosition\",\n    value: function _renderContentInitialPosition() {\n      this._renderBoundaryOffset();\n      resetPosition(this._$content);\n      var wrapperOverflow = this._$wrapper.css(\"overflow\");\n      this._$wrapper.css(\"overflow\", \"hidden\");\n      var resultPosition = positionUtils.setup(this._$content, this._position);\n      this._$wrapper.css(\"overflow\", wrapperOverflow);\n      this._initialPosition = resultPosition;\n      this.detectVisualPositionChange();\n    }\n  }, {\n    key: \"_raisePositionedEvents\",\n    value: function _raisePositionedEvents(event) {\n      var previousPosition = this._previousVisualPosition;\n      var newPosition = this._visualPosition;\n      var isVisualPositionChanged = (null === previousPosition || void 0 === previousPosition ? void 0 : previousPosition.top) !== newPosition.top || (null === previousPosition || void 0 === previousPosition ? void 0 : previousPosition.left) !== newPosition.left;\n      if (isVisualPositionChanged) {\n        this._props.onVisualPositionChanged({\n          previousPosition: previousPosition,\n          position: newPosition,\n          event: event\n        });\n      }\n      this._props.onPositioned({\n        position: this._initialPosition\n      });\n    }\n  }, {\n    key: \"_renderBoundaryOffset\",\n    value: function _renderBoundaryOffset() {\n      var _this$_position;\n      var boundaryOffset = null !== (_this$_position = this._position) && void 0 !== _this$_position ? _this$_position : {\n        boundaryOffset: OVERLAY_DEFAULT_BOUNDARY_OFFSET\n      };\n      this._$content.css(\"margin\", \"\".concat(boundaryOffset.v, \"px \").concat(boundaryOffset.h, \"px\"));\n    }\n  }, {\n    key: \"_getVisualContainer\",\n    value: function _getVisualContainer() {\n      var _this$_props$position, _this$_props$position2;\n      var containerProp = this._props.container;\n      var visualContainerProp = this._props.visualContainer;\n      var positionOf = isEvent(null === (_this$_props$position = this._props.position) || void 0 === _this$_props$position ? void 0 : _this$_props$position.of) ? this._props.position.of.target : null === (_this$_props$position2 = this._props.position) || void 0 === _this$_props$position2 ? void 0 : _this$_props$position2.of;\n      if (visualContainerProp) {\n        return $(visualContainerProp);\n      }\n      if (containerProp) {\n        return $(containerProp);\n      }\n      if (positionOf) {\n        return $(positionOf);\n      }\n      return $(window);\n    }\n  }, {\n    key: \"_normalizePosition\",\n    value: function _normalizePosition(positionProp) {\n      var defaultPositionConfig = {\n        boundaryOffset: OVERLAY_DEFAULT_BOUNDARY_OFFSET\n      };\n      if (isDefined(positionProp)) {\n        return extend(true, {}, defaultPositionConfig, this._positionToObject(positionProp));\n      } else {\n        return defaultPositionConfig;\n      }\n    }\n  }, {\n    key: \"_positionToObject\",\n    value: function _positionToObject(position) {\n      if (isString(position)) {\n        return extend({}, OVERLAY_POSITION_ALIASES[position]);\n      }\n      return position;\n    }\n  }, {\n    key: \"$container\",\n    get: function get() {\n      this.updateContainer();\n      return this._$markupContainer;\n    }\n  }, {\n    key: \"$visualContainer\",\n    get: function get() {\n      return this._$visualContainer;\n    }\n  }, {\n    key: \"position\",\n    get: function get() {\n      return this._position;\n    }\n  }, {\n    key: \"fixWrapperPosition\",\n    set: function set(fixWrapperPosition) {\n      this._props._fixWrapperPosition = fixWrapperPosition;\n      this.styleWrapperPosition();\n    }\n  }, {\n    key: \"restorePosition\",\n    set: function set(restorePosition) {\n      this._props.restorePosition = restorePosition;\n    }\n  }]);\n  return OverlayPositionController;\n}();\nexport { OVERLAY_POSITION_ALIASES, OverlayPositionController };","map":null,"metadata":{},"sourceType":"module"}