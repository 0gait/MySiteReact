{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createGlobalstate = exports.DerivedGlobalState = exports.GlobalState = void 0;\nvar immer_1 = __importStar(require(\"immer\"));\nvar GlobalState = /** @class */function () {\n  function GlobalState(initialValue) {\n    this.value = initialValue;\n    this.subscribers = [];\n  }\n  GlobalState.prototype.getValue = function (selector) {\n    if (selector) {\n      return selector(this.value);\n    }\n    return this.value;\n  };\n  GlobalState.prototype.refresh = function () {\n    this.subscribers.forEach(function (subscriber) {\n      if (subscriber.refresh) {\n        subscriber.refresh();\n      }\n    });\n  };\n  GlobalState.prototype.setValue = function (newValue, config) {\n    if (config === void 0) {\n      config = {};\n    }\n    if (newValue === undefined) {\n      this.__updateValue(function (draftVal) {\n        return immer_1.nothing;\n      }, config);\n    } else if (Object.prototype.toString.call(newValue) === '[object Function]') {\n      var reducer = newValue;\n      this.setValue(reducer(this.getValue(config.selector)), config);\n    } else {\n      this.__updateValue(function (draftVal) {\n        return newValue;\n      }, config);\n    }\n  };\n  GlobalState.prototype.updateValue = function (updater, config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var updaterWrapper = function updaterWrapper(draftState) {\n      // This wrapper is for disabling setting returned value\n      // We don't allow returned value to be set(just return undefined)\n      updater(draftState);\n    };\n    this.__updateValue(updaterWrapper, config);\n  };\n  GlobalState.prototype.__updateValue = function (updater, config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var selector = config.selector;\n    var patcher = config.patcher;\n    var oldState = this.value;\n    var newState;\n    if (selector && patcher) {\n      var nodeValue_1 = (0, immer_1.default)(selector(oldState), updater);\n      newState = (0, immer_1.default)(oldState, function (draftCurrentState) {\n        // Avoid setting returns\n        patcher(draftCurrentState, nodeValue_1);\n      });\n    } else {\n      newState = (0, immer_1.default)(oldState, updater);\n    }\n    this.value = newState;\n    if (newState !== oldState) {\n      // There's a new update\n      this.subscribers.forEach(function (subscriber) {\n        if (subscriber.selector(newState) !== subscriber.selector(oldState)) {\n          // Node value has changed\n          subscriber.observer(subscriber.selector(newState));\n        }\n      });\n    }\n  };\n  GlobalState.prototype.subscribe = function (itemToSubscribe) {\n    var _this = this;\n    var _itemToSubscribe;\n    if (Object.prototype.toString.call(itemToSubscribe) === '[object Function]') {\n      _itemToSubscribe = {\n        observer: itemToSubscribe,\n        selector: function selector(state) {\n          return state;\n        }\n      };\n    } else {\n      _itemToSubscribe = itemToSubscribe;\n    }\n    if (this.subscribers.indexOf(_itemToSubscribe) === -1) {\n      // Subscribe a component to this global state\n      this.subscribers.push(_itemToSubscribe);\n    }\n    ;\n    var unsubscribe = function unsubscribe() {\n      _this.subscribers = _this.subscribers.filter(function (subscriber) {\n        return subscriber !== _itemToSubscribe;\n      });\n    };\n    return unsubscribe;\n  };\n  GlobalState.prototype.select = function (selector) {\n    return createDerivedGlobalstate(this, selector);\n  };\n  return GlobalState;\n}();\nexports.GlobalState = GlobalState;\nvar DerivedGlobalState = /** @class */function () {\n  function DerivedGlobalState(globalState, selector) {\n    this.globalState = globalState;\n    this.selector = selector;\n  }\n  DerivedGlobalState.prototype.getValue = function () {\n    return this.globalState.getValue(this.selector);\n  };\n  DerivedGlobalState.prototype.subscribe = function (observer, refresh) {\n    var itemToSubscribe = {\n      observer: observer,\n      selector: this.selector,\n      refresh: refresh\n    };\n    return this.globalState.subscribe(itemToSubscribe);\n  };\n  return DerivedGlobalState;\n}();\nexports.DerivedGlobalState = DerivedGlobalState;\nfunction createDerivedGlobalstate(globalState, selector) {\n  return new DerivedGlobalState(globalState, selector);\n}\nfunction createGlobalstate(initialValue) {\n  return new GlobalState(initialValue);\n}\nexports.createGlobalstate = createGlobalstate;","map":null,"metadata":{},"sourceType":"script"}