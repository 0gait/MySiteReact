{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n/**\r\n * DevExtreme (esm/ui/range_slider.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth } from \"../core/utils/size\";\nimport $ from \"../core/renderer\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport Slider from \"./slider\";\nimport SliderHandle from \"./slider/ui.slider_handle\";\nimport registerComponent from \"../core/component_registrator\";\nimport { extend } from \"../core/utils/extend\";\nimport { applyServerDecimalSeparator } from \"../core/utils/common\";\nimport { eventData } from \"../events/utils/index\";\nimport messageLocalization from \"../localization/message\";\nvar RANGE_SLIDER_CLASS = \"dx-rangeslider\";\nvar RANGE_SLIDER_START_HANDLE_CLASS = RANGE_SLIDER_CLASS + \"-start-handle\";\nvar RANGE_SLIDER_END_HANDLE_CLASS = RANGE_SLIDER_CLASS + \"-end-handle\";\nvar RangeSlider = Slider.inherit({\n  _supportedKeys: function _supportedKeys() {\n    var isRTL = this.option(\"rtlEnabled\");\n    var that = this;\n    var _changeHandle = function _changeHandle(e, capturedHandle) {\n      if (that.option(\"start\") === that.option(\"end\")) {\n        that._capturedHandle = capturedHandle;\n        e.target = that._capturedHandle;\n        eventsEngine.trigger(that._capturedHandle, \"focus\");\n      }\n    };\n    var _setHandleValue = function _setHandleValue(e, step, sign) {\n      var isStart = $(e.target).hasClass(RANGE_SLIDER_START_HANDLE_CLASS);\n      var valueOption = isStart ? \"start\" : \"end\";\n      var val = that.option(valueOption);\n      step = that._valueStep(step);\n      val += sign * (isRTL ? -step : step);\n      that.option(valueOption, val);\n    };\n    var moveHandleRight = function moveHandleRight(e, step) {\n      _changeHandle(e, isRTL ? that._$handleStart : that._$handleEnd);\n      _setHandleValue(e, step, 1);\n    };\n    var moveHandleLeft = function moveHandleLeft(e, step) {\n      _changeHandle(e, isRTL ? that._$handleEnd : that._$handleStart);\n      _setHandleValue(e, step, -1);\n    };\n    return extend(this.callBase(), {\n      leftArrow: function leftArrow(e) {\n        this._processKeyboardEvent(e);\n        moveHandleLeft(e, this.option(\"step\"));\n      },\n      rightArrow: function rightArrow(e) {\n        this._processKeyboardEvent(e);\n        moveHandleRight(e, this.option(\"step\"));\n      },\n      pageUp: function pageUp(e) {\n        this._processKeyboardEvent(e);\n        moveHandleRight(e, this.option(\"step\") * this.option(\"keyStep\"));\n      },\n      pageDown: function pageDown(e) {\n        this._processKeyboardEvent(e);\n        moveHandleLeft(e, this.option(\"step\") * this.option(\"keyStep\"));\n      },\n      home: function home(e) {\n        this._processKeyboardEvent(e);\n        var isStart = $(e.target).hasClass(RANGE_SLIDER_START_HANDLE_CLASS);\n        var valueOption = isStart ? \"start\" : \"end\";\n        var startOption = isStart ? \"min\" : \"start\";\n        var val = this.option(startOption);\n        this.option(valueOption, val);\n      },\n      end: function end(e) {\n        this._processKeyboardEvent(e);\n        var isStart = $(e.target).hasClass(RANGE_SLIDER_START_HANDLE_CLASS);\n        var valueOption = isStart ? \"start\" : \"end\";\n        var endOption = isStart ? \"end\" : \"max\";\n        var val = this.option(endOption);\n        this.option(valueOption, val);\n      }\n    });\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      start: 40,\n      end: 60,\n      value: [40, 60],\n      startName: \"\",\n      endName: \"\"\n    });\n  },\n  _renderSubmitElement: function _renderSubmitElement() {\n    var $element = this.$element();\n    this._$submitStartElement = $(\"<input>\").attr(\"type\", \"hidden\").attr(\"name\", this.option(\"startName\")).appendTo($element);\n    this._$submitEndElement = $(\"<input>\").attr(\"type\", \"hidden\").attr(\"name\", this.option(\"endName\")).appendTo($element);\n  },\n  _initOptions: function _initOptions(options) {\n    this.callBase(options);\n    var initialValue = this.initialOption(\"value\");\n    var value = this.option(\"value\");\n    if (value[0] === initialValue[0] && value[1] === initialValue[1]) {\n      this.option(\"value\", [this.option(\"start\"), this.option(\"end\")]);\n    } else {\n      this.option({\n        start: value[0],\n        end: value[1]\n      });\n    }\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(RANGE_SLIDER_CLASS);\n    this.callBase();\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    this._callHandlerMethod(\"repaint\");\n    this.callBase();\n  },\n  _renderHandle: function _renderHandle() {\n    this._$handleStart = this._renderHandleImpl(this.option(\"start\"), this._$handleStart).addClass(RANGE_SLIDER_START_HANDLE_CLASS);\n    this._$handleEnd = this._renderHandleImpl(this.option(\"end\"), this._$handleEnd).addClass(RANGE_SLIDER_END_HANDLE_CLASS);\n    this._updateHandleAriaLabels();\n  },\n  _startHandler: function _startHandler(args) {\n    var e = args.event;\n    var $range = this._$range;\n    var rangeWidth = getWidth($range);\n    var eventOffsetX = eventData(e).x - this._$bar.offset().left;\n    var startHandleX = $range.position().left;\n    var endHandleX = $range.position().left + rangeWidth;\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    var startHandleIsClosest = (rtlEnabled ? -1 : 1) * ((startHandleX + endHandleX) / 2 - eventOffsetX) > 0;\n    this._capturedHandle = startHandleIsClosest ? this._$handleStart : this._$handleEnd;\n    this.callBase(args);\n  },\n  _updateHandleAriaLabels: function _updateHandleAriaLabels() {\n    this.setAria(\"label\", messageLocalization.getFormatter(\"dxRangeSlider-ariaFrom\")(this.option(\"dxRangeSlider-ariaFrom\")), this._$handleStart);\n    this.setAria(\"label\", messageLocalization.getFormatter(\"dxRangeSlider-ariaTill\")(this.option(\"dxRangeSlider-ariaTill\")), this._$handleEnd);\n  },\n  _activeHandle: function _activeHandle() {\n    return this._capturedHandle;\n  },\n  _updateHandlePosition: function _updateHandlePosition(e) {\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    var offsetDirection = rtlEnabled ? -1 : 1;\n    var max = this.option(\"max\");\n    var min = this.option(\"min\");\n    var newRatio = this._startOffset + offsetDirection * e.event.offset / this._swipePixelRatio();\n    newRatio = newRatio.toPrecision(12);\n    var newValue = newRatio * (max - min) + min;\n    this._updateSelectedRangePosition(newRatio, newRatio);\n    SliderHandle.getInstance(this._activeHandle()).fitTooltipPosition;\n    this._changeValueOnSwipe(newRatio);\n    var _this$_getActualValue = this._getActualValue(),\n      _this$_getActualValue2 = _slicedToArray(_this$_getActualValue, 2),\n      startValue = _this$_getActualValue2[0],\n      endValue = _this$_getActualValue2[1];\n    var $nextHandle;\n    if (startValue === endValue) {\n      if (newValue < startValue) {\n        $nextHandle = this._$handleStart;\n      } else {\n        $nextHandle = this._$handleEnd;\n      }\n      eventsEngine.trigger($nextHandle, \"focus\");\n      if ($nextHandle && $nextHandle !== this._capturedHandle) {\n        this._updateSelectedRangePosition((startValue - min) / (max - min), (endValue - min) / (max - min));\n        this._toggleActiveState(this._activeHandle(), false);\n        this._toggleActiveState($nextHandle, true);\n        this._capturedHandle = $nextHandle;\n      }\n      this._updateSelectedRangePosition(newRatio, newRatio);\n      this._changeValueOnSwipe(newRatio);\n    }\n  },\n  _updateSelectedRangePosition: function _updateSelectedRangePosition(leftRatio, rightRatio) {\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    var moveRight = this._capturedHandle === this._$handleStart && rtlEnabled || this._capturedHandle === this._$handleEnd && !rtlEnabled;\n    var prop = moveRight ? \"right\" : \"left\";\n    if (rtlEnabled ^ moveRight) {\n      this._$range.css(prop, 100 - 100 * rightRatio + \"%\");\n    } else {\n      this._$range.css(prop, 100 * leftRatio + \"%\");\n    }\n  },\n  _setValueOnSwipe: function _setValueOnSwipe(value) {\n    var option = this._capturedHandle === this._$handleStart ? \"start\" : \"end\";\n    var _this$_getActualValue3 = this._getActualValue(),\n      _this$_getActualValue4 = _slicedToArray(_this$_getActualValue3, 2),\n      start = _this$_getActualValue4[0],\n      end = _this$_getActualValue4[1];\n    var max = this.option(\"max\");\n    var min = this.option(\"min\");\n    start = Math.min(Math.max(start, min), max);\n    end = Math.min(Math.max(end, min), max);\n    if (\"start\" === option) {\n      start = value > end ? end : value;\n    } else {\n      end = value < start ? start : value;\n    }\n    if (\"onHandleMove\" === this.option(\"valueChangeMode\")) {\n      this.option(\"value\", [start, end]);\n    } else {\n      this._actualValue = [start, end];\n      this._renderValue();\n    }\n  },\n  _renderValue: function _renderValue() {\n    var _this$_getActualValue5 = this._getActualValue(),\n      _this$_getActualValue6 = _slicedToArray(_this$_getActualValue5, 2),\n      valStart = _this$_getActualValue6[0],\n      valEnd = _this$_getActualValue6[1];\n    var min = this.option(\"min\");\n    var max = this.option(\"max\");\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    valStart = Math.max(min, Math.min(valStart, max));\n    valEnd = Math.max(valStart, Math.min(valEnd, max));\n    if (\"onHandleMove\" === this.option(\"valueChangeMode\")) {\n      this._setOptionWithoutOptionChange(\"start\", valStart);\n      this._setOptionWithoutOptionChange(\"end\", valEnd);\n      this._setOptionWithoutOptionChange(\"value\", [valStart, valEnd]);\n    }\n    this._$submitStartElement.val(applyServerDecimalSeparator(valStart));\n    this._$submitEndElement.val(applyServerDecimalSeparator(valEnd));\n    var ratio1 = max === min ? 0 : (valStart - min) / (max - min);\n    var ratio2 = max === min ? 0 : (valEnd - min) / (max - min);\n    var startOffset = parseFloat((100 * ratio1).toPrecision(12)) + \"%\";\n    var endOffset = parseFloat((100 * (1 - ratio2)).toPrecision(12)) + \"%\";\n    !this._needPreventAnimation && this._setRangeStyles({\n      right: rtlEnabled ? startOffset : endOffset,\n      left: rtlEnabled ? endOffset : startOffset\n    });\n    SliderHandle.getInstance(this._$handleStart).option(\"value\", valStart);\n    SliderHandle.getInstance(this._$handleEnd).option(\"value\", valEnd);\n  },\n  _callHandlerMethod: function _callHandlerMethod(name, args) {\n    SliderHandle.getInstance(this._$handleStart)[name](args);\n    SliderHandle.getInstance(this._$handleEnd)[name](args);\n  },\n  _setValueOption: function _setValueOption() {\n    var start = this.option(\"start\");\n    var end = this.option(\"end\");\n    this.option(\"value\", [start, end]);\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"value\":\n        if (args.value[0] === args.previousValue[0] && args.value[1] === args.previousValue[1]) {\n          break;\n        }\n        this._setOptionWithoutOptionChange(\"start\", args.value[0]);\n        this._setOptionWithoutOptionChange(\"end\", args.value[1]);\n        this._renderValue();\n        var start = this.option(\"start\");\n        var end = this.option(\"end\");\n        this._createActionByOption(\"onValueChanged\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        })({\n          start: start,\n          end: end,\n          value: [start, end],\n          event: this._valueChangeEventInstance,\n          previousValue: args.previousValue\n        });\n        this.validationRequest.fire({\n          value: [start, end],\n          editor: this\n        });\n        this._saveValueChangeEvent(void 0);\n        break;\n      case \"start\":\n      case \"end\":\n        this._setValueOption();\n        break;\n      case \"startName\":\n        this._$submitStartElement.attr(\"name\", args.value);\n        break;\n      case \"endName\":\n        this._$submitEndElement.attr(\"name\", args.value);\n        break;\n      case \"name\":\n        break;\n      default:\n        this.callBase(args);\n    }\n  }\n});\nregisterComponent(\"dxRangeSlider\", RangeSlider);\nexport default RangeSlider;","map":null,"metadata":{},"sourceType":"module"}