{"ast":null,"code":"/**\r\n * DevExtreme (esm/core/utils/template_manager.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport config from \"../config\";\nimport devices from \"../devices\";\nimport Errors from \"../errors\";\nimport $ from \"../renderer\";\nimport { ChildDefaultTemplate } from \"../templates/child_default_template\";\nimport { EmptyTemplate } from \"../templates/empty_template\";\nimport { Template } from \"../templates/template\";\nimport { TemplateBase } from \"../templates/template_base\";\nimport { groupBy } from \"./array\";\nimport { findBestMatches } from \"./common\";\nimport { normalizeTemplateElement } from \"./dom\";\nimport { extend } from \"./extend\";\nimport { isFunction, isRenderer } from \"./type\";\nexport var findTemplates = function findTemplates(element, name) {\n  var templates = $(element).contents().filter(\"[\".concat(\"data-options\", '*=\"').concat(name, '\"]'));\n  return [].slice.call(templates).map(function (element) {\n    var optionsString = $(element).attr(\"data-options\") || \"\";\n    return {\n      element: element,\n      options: config().optionsParser(optionsString)[name]\n    };\n  }).filter(function (template) {\n    return !!template.options;\n  });\n};\nexport var suitableTemplatesByName = function suitableTemplatesByName(rawTemplates) {\n  var templatesMap = groupBy(rawTemplates, function (template) {\n    return template.options.name;\n  });\n  if (templatesMap[void 0]) {\n    throw Errors.Error(\"E0023\");\n  }\n  var result = {};\n  Object.keys(templatesMap).forEach(function (name) {\n    var _findBestMatches$;\n    var suitableTemplate = null === (_findBestMatches$ = findBestMatches(devices.current(), templatesMap[name], function (template) {\n      return template.options;\n    })[0]) || void 0 === _findBestMatches$ ? void 0 : _findBestMatches$.element;\n    if (suitableTemplate) {\n      result[name] = suitableTemplate;\n    }\n  });\n  return result;\n};\nexport var addOneRenderedCall = function addOneRenderedCall(template) {\n  var _render = template.render.bind(template);\n  return extend({}, template, {\n    render: function render(options) {\n      var templateResult = _render(options);\n      options && options.onRendered && options.onRendered();\n      return templateResult;\n    }\n  });\n};\nexport var getNormalizedTemplateArgs = function getNormalizedTemplateArgs(options) {\n  var args = [];\n  if (\"model\" in options) {\n    args.push(options.model);\n  }\n  if (\"index\" in options) {\n    args.push(options.index);\n  }\n  args.push(options.container);\n  return args;\n};\nexport var validateTemplateSource = function validateTemplateSource(templateSource) {\n  return \"string\" === typeof templateSource ? normalizeTemplateElement(templateSource) : templateSource;\n};\nexport var templateKey = function templateKey(templateSource) {\n  return isRenderer(templateSource) && templateSource[0] || templateSource;\n};\nexport var defaultCreateElement = function defaultCreateElement(element) {\n  return new Template(element);\n};\nexport var acquireIntegrationTemplate = function acquireIntegrationTemplate(templateSource, templates, isAsyncTemplate, skipTemplates) {\n  var integrationTemplate = null;\n  if (!skipTemplates || -1 === skipTemplates.indexOf(templateSource)) {\n    integrationTemplate = templates[templateSource];\n    if (integrationTemplate && !(integrationTemplate instanceof TemplateBase) && !isAsyncTemplate) {\n      integrationTemplate = addOneRenderedCall(integrationTemplate);\n    }\n  }\n  return integrationTemplate;\n};\nexport var acquireTemplate = function acquireTemplate(templateSource, createTemplate, templates, isAsyncTemplate, skipTemplates, defaultTemplates) {\n  if (null == templateSource) {\n    return new EmptyTemplate();\n  }\n  if (templateSource instanceof ChildDefaultTemplate) {\n    return defaultTemplates[templateSource.name];\n  }\n  if (templateSource instanceof TemplateBase) {\n    return templateSource;\n  }\n  if (isFunction(templateSource.render) && !isRenderer(templateSource)) {\n    return isAsyncTemplate ? templateSource : addOneRenderedCall(templateSource);\n  }\n  if (templateSource.nodeType || isRenderer(templateSource)) {\n    return createTemplate($(templateSource));\n  }\n  return acquireIntegrationTemplate(templateSource, templates, isAsyncTemplate, skipTemplates) || defaultTemplates[templateSource] || createTemplate(templateSource);\n};","map":null,"metadata":{},"sourceType":"module"}