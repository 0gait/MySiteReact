{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/slider/ui.slider.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth, setWidth } from \"../../core/utils/size\";\nimport registerComponent from \"../../core/component_registrator\";\nimport devices from \"../../core/devices\";\nimport $ from \"../../core/renderer\";\nimport { applyServerDecimalSeparator } from \"../../core/utils/common\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { extend } from \"../../core/utils/extend\";\nimport { name as clickName } from \"../../events/click\";\nimport { lock } from \"../../events/core/emitter.feedback\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport Swipeable from \"../../events/gesture/swipeable\";\nimport pointerEvents from \"../../events/pointer\";\nimport { addNamespace, isMouseEvent, isTouchEvent, eventData } from \"../../events/utils/index\";\nimport numberLocalization from \"../../localization/number\";\nimport { isMaterial, current as currentTheme } from \"../themes\";\nimport TrackBar from \"../track_bar\";\nimport { render } from \"../widget/utils.ink_ripple\";\nimport SliderHandle from \"./ui.slider_handle\";\nimport { roundFloatPart, getExponentLength, getRemainderByDivision } from \"../../core/utils/math\";\nvar SLIDER_CLASS = \"dx-slider\";\nvar SLIDER_WRAPPER_CLASS = \"dx-slider-wrapper\";\nvar SLIDER_HANDLE_SELECTOR = \".dx-slider-handle\";\nvar SLIDER_BAR_CLASS = \"dx-slider-bar\";\nvar SLIDER_RANGE_CLASS = \"dx-slider-range\";\nvar SLIDER_RANGE_VISIBLE_CLASS = \"dx-slider-range-visible\";\nvar SLIDER_LABEL_CLASS = \"dx-slider-label\";\nvar SLIDER_LABEL_POSITION_CLASS_PREFIX = \"dx-slider-label-position-\";\nvar SLIDER_TOOLTIP_POSITION_CLASS_PREFIX = \"dx-slider-tooltip-position-\";\nvar INVALID_MESSAGE_VISIBLE_CLASS = \"dx-invalid-message-visible\";\nvar SLIDER_VALIDATION_NAMESPACE = \"Validation\";\nvar Slider = TrackBar.inherit({\n  _activeStateUnit: SLIDER_HANDLE_SELECTOR,\n  _supportedKeys: function _supportedKeys() {\n    var _this = this;\n    var isRTL = this.option(\"rtlEnabled\");\n    var roundedValue = function roundedValue(offset, isLeftDirection) {\n      offset = _this._valueStep(offset);\n      var step = _this.option(\"step\");\n      var value = _this.option(\"value\");\n      var currentPosition = value - _this.option(\"min\");\n      var remainder = getRemainderByDivision(currentPosition, step, _this._getValueExponentLength());\n      var result = isLeftDirection ? value - offset + (remainder ? step - remainder : 0) : value + offset - remainder;\n      var min = _this.option(\"min\");\n      var max = _this.option(\"max\");\n      if (result < min) {\n        result = min;\n      } else if (result > max) {\n        result = max;\n      }\n      return _this._roundToExponentLength(result);\n    };\n    var moveHandleRight = function moveHandleRight(offset) {\n      _this.option(\"value\", roundedValue(offset, isRTL));\n    };\n    var moveHandleLeft = function moveHandleLeft(offset) {\n      _this.option(\"value\", roundedValue(offset, !isRTL));\n    };\n    return extend(this.callBase(), {\n      leftArrow: function leftArrow(e) {\n        this._processKeyboardEvent(e);\n        moveHandleLeft(this.option(\"step\"));\n      },\n      rightArrow: function rightArrow(e) {\n        this._processKeyboardEvent(e);\n        moveHandleRight(this.option(\"step\"));\n      },\n      pageUp: function pageUp(e) {\n        this._processKeyboardEvent(e);\n        moveHandleRight(this.option(\"step\") * this.option(\"keyStep\"));\n      },\n      pageDown: function pageDown(e) {\n        this._processKeyboardEvent(e);\n        moveHandleLeft(this.option(\"step\") * this.option(\"keyStep\"));\n      },\n      home: function home(e) {\n        this._processKeyboardEvent(e);\n        var min = this.option(\"min\");\n        this.option(\"value\", min);\n      },\n      end: function end(e) {\n        this._processKeyboardEvent(e);\n        var max = this.option(\"max\");\n        this.option(\"value\", max);\n      }\n    });\n  },\n  _processKeyboardEvent: function _processKeyboardEvent(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this._saveValueChangeEvent(e);\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      value: 50,\n      hoverStateEnabled: true,\n      activeStateEnabled: true,\n      step: 1,\n      showRange: true,\n      tooltip: {\n        enabled: false,\n        format: function format(value) {\n          return value;\n        },\n        position: \"top\",\n        showMode: \"onHover\"\n      },\n      label: {\n        visible: false,\n        position: \"bottom\",\n        format: function format(value) {\n          return value;\n        }\n      },\n      keyStep: 1,\n      useInkRipple: false,\n      validationMessageOffset: isMaterial() ? {\n        h: 18,\n        v: 0\n      } : {\n        h: 7,\n        v: 4\n      },\n      focusStateEnabled: true,\n      valueChangeMode: \"onHandleMove\"\n    });\n  },\n  _toggleValidationMessage: function _toggleValidationMessage(visible) {\n    if (!this.option(\"isValid\")) {\n      this.$element().toggleClass(INVALID_MESSAGE_VISIBLE_CLASS, visible);\n    }\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }, {\n      device: function device() {\n        var themeName = currentTheme();\n        return isMaterial(themeName);\n      },\n      options: {\n        useInkRipple: true\n      }\n    }]);\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(SLIDER_CLASS);\n    this._renderSubmitElement();\n    this.option(\"useInkRipple\") && this._renderInkRipple();\n    this.callBase();\n    this._renderLabels();\n    this._renderStartHandler();\n    this._renderAriaMinAndMax();\n  },\n  _attachFocusEvents: function _attachFocusEvents() {\n    this.callBase();\n    var namespace = this.NAME + SLIDER_VALIDATION_NAMESPACE;\n    var focusInEvent = addNamespace(\"focusin\", namespace);\n    var focusOutEvent = addNamespace(\"focusout\", namespace);\n    var $focusTarget = this._focusTarget();\n    eventsEngine.on($focusTarget, focusInEvent, this._toggleValidationMessage.bind(this, true));\n    eventsEngine.on($focusTarget, focusOutEvent, this._toggleValidationMessage.bind(this, false));\n  },\n  _detachFocusEvents: function _detachFocusEvents() {\n    this.callBase();\n    var $focusTarget = this._focusTarget();\n    this._toggleValidationMessage(false);\n    eventsEngine.off($focusTarget, this.NAME + SLIDER_VALIDATION_NAMESPACE);\n  },\n  _render: function _render() {\n    this.callBase();\n    this._repaintHandle();\n  },\n  _renderSubmitElement: function _renderSubmitElement() {\n    this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\n  },\n  _getSubmitElement: function _getSubmitElement() {\n    return this._$submitElement;\n  },\n  _renderInkRipple: function _renderInkRipple() {\n    this._inkRipple = render({\n      waveSizeCoefficient: .7,\n      isCentered: true,\n      wavesNumber: 2,\n      useHoldAnimation: false\n    });\n  },\n  _renderInkWave: function _renderInkWave(element, dxEvent, doRender, waveIndex) {\n    if (!this._inkRipple) {\n      return;\n    }\n    var config = {\n      element: element,\n      event: dxEvent,\n      wave: waveIndex\n    };\n    if (doRender) {\n      this._inkRipple.showWave(config);\n    } else {\n      this._inkRipple.hideWave(config);\n    }\n  },\n  _visibilityChanged: function _visibilityChanged() {\n    this.repaint();\n  },\n  _renderWrapper: function _renderWrapper() {\n    this.callBase();\n    this._$wrapper.addClass(SLIDER_WRAPPER_CLASS);\n    this._createComponent(this._$wrapper, Swipeable, {\n      elastic: false,\n      immediate: true,\n      onStart: this._swipeStartHandler.bind(this),\n      onUpdated: this._swipeUpdateHandler.bind(this),\n      onEnd: this._swipeEndHandler.bind(this),\n      itemSizeFunc: this._itemWidthFunc.bind(this)\n    });\n  },\n  _renderContainer: function _renderContainer() {\n    this.callBase();\n    this._$bar.addClass(SLIDER_BAR_CLASS);\n  },\n  _renderRange: function _renderRange() {\n    this.callBase();\n    this._$range.addClass(SLIDER_RANGE_CLASS);\n    this._renderHandle();\n    this._renderRangeVisibility();\n  },\n  _renderRangeVisibility: function _renderRangeVisibility() {\n    this._$range.toggleClass(SLIDER_RANGE_VISIBLE_CLASS, Boolean(this.option(\"showRange\")));\n  },\n  _renderHandle: function _renderHandle() {\n    this._$handle = this._renderHandleImpl(this.option(\"value\"), this._$handle);\n  },\n  _renderHandleImpl: function _renderHandleImpl(value, $element) {\n    var $handle = $element || $(\"<div>\").appendTo(this._$range);\n    var tooltip = this.option(\"tooltip\");\n    this.$element().toggleClass(SLIDER_TOOLTIP_POSITION_CLASS_PREFIX + \"bottom\", tooltip.enabled && \"bottom\" === tooltip.position).toggleClass(SLIDER_TOOLTIP_POSITION_CLASS_PREFIX + \"top\", tooltip.enabled && \"top\" === tooltip.position);\n    this._createComponent($handle, SliderHandle, {\n      value: value,\n      tooltip: tooltip\n    });\n    return $handle;\n  },\n  _renderAriaMinAndMax: function _renderAriaMinAndMax() {\n    this.setAria({\n      valuemin: this.option(\"min\"),\n      valuemax: this.option(\"max\")\n    }, this._$handle);\n  },\n  _toggleActiveState: function _toggleActiveState($element, value) {\n    this.callBase($element, value);\n    this._renderInkWave($element, null, !!value, 1);\n  },\n  _toggleFocusClass: function _toggleFocusClass(isFocused, $element) {\n    this.callBase(isFocused, $element);\n    if (this._disposed) {\n      return;\n    }\n    var $focusTarget = $($element || this._focusTarget());\n    this._renderInkWave($focusTarget, null, isFocused, 0);\n  },\n  _renderLabels: function _renderLabels() {\n    this.$element().removeClass(SLIDER_LABEL_POSITION_CLASS_PREFIX + \"bottom\").removeClass(SLIDER_LABEL_POSITION_CLASS_PREFIX + \"top\");\n    if (this.option(\"label.visible\")) {\n      var min = this.option(\"min\");\n      var max = this.option(\"max\");\n      var position = this.option(\"label.position\");\n      var labelFormat = this.option(\"label.format\");\n      if (!this._$minLabel) {\n        this._$minLabel = $(\"<div>\").addClass(SLIDER_LABEL_CLASS).appendTo(this._$wrapper);\n      }\n      this._$minLabel.text(numberLocalization.format(min, labelFormat));\n      if (!this._$maxLabel) {\n        this._$maxLabel = $(\"<div>\").addClass(SLIDER_LABEL_CLASS).appendTo(this._$wrapper);\n      }\n      this._$maxLabel.text(numberLocalization.format(max, labelFormat));\n      this.$element().addClass(SLIDER_LABEL_POSITION_CLASS_PREFIX + position);\n    } else {\n      if (this._$minLabel) {\n        this._$minLabel.remove();\n        delete this._$minLabel;\n      }\n      if (this._$maxLabel) {\n        this._$maxLabel.remove();\n        delete this._$maxLabel;\n      }\n    }\n  },\n  _renderStartHandler: function _renderStartHandler() {\n    var _this2 = this;\n    var pointerDownEventName = addNamespace(pointerEvents.down, this.NAME);\n    var clickEventName = addNamespace(clickName, this.NAME);\n    var startAction = this._createAction(this._startHandler.bind(this));\n    var $element = this.$element();\n    eventsEngine.off($element, pointerDownEventName);\n    eventsEngine.on($element, pointerDownEventName, function (e) {\n      if (isMouseEvent(e)) {\n        startAction({\n          event: e\n        });\n      }\n    });\n    eventsEngine.off($element, clickEventName);\n    eventsEngine.on($element, clickEventName, function (e) {\n      var $handle = _this2._activeHandle();\n      if ($handle) {\n        eventsEngine.trigger($handle, \"focusin\");\n        eventsEngine.trigger($handle, \"focus\");\n      }\n      startAction({\n        event: e\n      });\n      if (\"onHandleRelease\" === _this2.option(\"valueChangeMode\")) {\n        _this2.option(\"value\", _this2._getActualValue());\n        _this2._actualValue = void 0;\n      }\n    });\n  },\n  _itemWidthFunc: function _itemWidthFunc() {\n    return this._itemWidthRatio;\n  },\n  _swipeStartHandler: function _swipeStartHandler(e) {\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    if (isTouchEvent(e.event)) {\n      this._createAction(this._startHandler.bind(this))({\n        event: e.event\n      });\n    }\n    this._feedbackDeferred = new Deferred();\n    lock(this._feedbackDeferred);\n    this._toggleActiveState(this._activeHandle(), this.option(\"activeStateEnabled\"));\n    this._startOffset = this._currentRatio;\n    var startOffset = this._startOffset * this._swipePixelRatio();\n    var endOffset = (1 - this._startOffset) * this._swipePixelRatio();\n    e.event.maxLeftOffset = rtlEnabled ? endOffset : startOffset;\n    e.event.maxRightOffset = rtlEnabled ? startOffset : endOffset;\n    this._itemWidthRatio = getWidth(this.$element()) / this._swipePixelRatio();\n    this._needPreventAnimation = true;\n  },\n  _swipeEndHandler: function _swipeEndHandler(e) {\n    if (this._isSingleValuePossible()) {\n      return;\n    }\n    this._feedbackDeferred.resolve();\n    this._toggleActiveState(this._activeHandle(), false);\n    var offsetDirection = this.option(\"rtlEnabled\") ? -1 : 1;\n    var ratio = this._startOffset + offsetDirection * e.event.targetOffset / this._swipePixelRatio();\n    delete this._needPreventAnimation;\n    this._saveValueChangeEvent(e.event);\n    this._changeValueOnSwipe(ratio);\n    if (\"onHandleRelease\" === this.option(\"valueChangeMode\")) {\n      this.option(\"value\", this._getActualValue());\n    }\n    this._actualValue = void 0;\n    delete this._startOffset;\n    this._renderValue();\n  },\n  _activeHandle: function _activeHandle() {\n    return this._$handle;\n  },\n  _swipeUpdateHandler: function _swipeUpdateHandler(e) {\n    if (this._isSingleValuePossible()) {\n      return;\n    }\n    this._saveValueChangeEvent(e.event);\n    this._updateHandlePosition(e);\n  },\n  _updateHandlePosition: function _updateHandlePosition(e) {\n    var offsetDirection = this.option(\"rtlEnabled\") ? -1 : 1;\n    var newRatio = Math.min(this._startOffset + offsetDirection * e.event.offset / this._swipePixelRatio(), 1);\n    setWidth(this._$range, 100 * newRatio + \"%\");\n    SliderHandle.getInstance(this._activeHandle()).fitTooltipPosition;\n    this._changeValueOnSwipe(newRatio);\n  },\n  _swipePixelRatio: function _swipePixelRatio() {\n    var min = this.option(\"min\");\n    var max = this.option(\"max\");\n    var step = this._valueStep(this.option(\"step\"));\n    return (max - min) / step;\n  },\n  _valueStep: function _valueStep(step) {\n    if (!step || isNaN(step)) {\n      step = 1;\n    }\n    return step;\n  },\n  _getValueExponentLength: function _getValueExponentLength() {\n    var _this$option = this.option(),\n      step = _this$option.step,\n      min = _this$option.min;\n    return Math.max(getExponentLength(step), getExponentLength(min));\n  },\n  _roundToExponentLength: function _roundToExponentLength(value) {\n    var valueExponentLength = this._getValueExponentLength();\n    return roundFloatPart(value, valueExponentLength);\n  },\n  _changeValueOnSwipe: function _changeValueOnSwipe(ratio) {\n    var min = this.option(\"min\");\n    var max = this.option(\"max\");\n    var step = this._valueStep(this.option(\"step\"));\n    var newChange = ratio * (max - min);\n    var newValue = min + newChange;\n    if (step < 0) {\n      return;\n    }\n    if (newValue === max || newValue === min) {\n      this._setValueOnSwipe(newValue);\n    } else {\n      var stepCount = Math.round((newValue - min) / step);\n      newValue = this._roundToExponentLength(stepCount * step + min);\n      this._setValueOnSwipe(Math.max(Math.min(newValue, max), min));\n    }\n  },\n  _setValueOnSwipe: function _setValueOnSwipe(value) {\n    this._actualValue = value;\n    if (\"onHandleRelease\" === this.option(\"valueChangeMode\")) {\n      SliderHandle.getInstance(this._activeHandle()).option(\"value\", value);\n    } else {\n      this.option(\"value\", value);\n      this._saveValueChangeEvent(void 0);\n    }\n  },\n  _getActualValue: function _getActualValue() {\n    var _this$_actualValue;\n    return null !== (_this$_actualValue = this._actualValue) && void 0 !== _this$_actualValue ? _this$_actualValue : this.option(\"value\");\n  },\n  _isSingleValuePossible: function _isSingleValuePossible() {\n    var _this$option2 = this.option(),\n      min = _this$option2.min,\n      max = _this$option2.max;\n    return min === max;\n  },\n  _startHandler: function _startHandler(args) {\n    if (this._isSingleValuePossible()) {\n      return;\n    }\n    var e = args.event;\n    this._currentRatio = (eventData(e).x - this._$bar.offset().left) / getWidth(this._$bar);\n    if (this.option(\"rtlEnabled\")) {\n      this._currentRatio = 1 - this._currentRatio;\n    }\n    this._saveValueChangeEvent(e);\n    this._changeValueOnSwipe(this._currentRatio);\n  },\n  _renderValue: function _renderValue() {\n    this.callBase();\n    var value = this._getActualValue();\n    this._getSubmitElement().val(applyServerDecimalSeparator(value));\n    SliderHandle.getInstance(this._activeHandle()).option(\"value\", value);\n  },\n  _setRangeStyles: function _setRangeStyles(options) {\n    options && this._$range.css(options);\n  },\n  _callHandlerMethod: function _callHandlerMethod(name, args) {\n    SliderHandle.getInstance(this._$handle)[name](args);\n  },\n  _repaintHandle: function _repaintHandle() {\n    this._callHandlerMethod(\"repaint\");\n  },\n  _fitTooltip: function _fitTooltip() {\n    this._callHandlerMethod(\"updateTooltipPosition\");\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"visible\":\n        this.callBase(args);\n        this._renderHandle();\n        this._repaintHandle();\n        break;\n      case \"min\":\n      case \"max\":\n        this._renderValue();\n        this.callBase(args);\n        this._renderLabels();\n        this._renderAriaMinAndMax();\n        this._fitTooltip();\n        break;\n      case \"step\":\n        this._renderValue();\n        break;\n      case \"keyStep\":\n        break;\n      case \"showRange\":\n        this._renderRangeVisibility();\n        break;\n      case \"tooltip\":\n        this._renderHandle();\n        break;\n      case \"label\":\n        this._renderLabels();\n        break;\n      case \"useInkRipple\":\n        this._invalidate();\n        break;\n      case \"valueChangeMode\":\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  _refresh: function _refresh() {\n    this._toggleRTLDirection(this.option(\"rtlEnabled\"));\n    this._renderDimensions();\n    this._renderValue();\n    this._renderHandle();\n    this._repaintHandle();\n  },\n  _clean: function _clean() {\n    delete this._inkRipple;\n    delete this._actualValue;\n    this.callBase();\n  }\n});\nregisterComponent(\"dxSlider\", Slider);\nexport default Slider;","map":null,"metadata":{},"sourceType":"module"}