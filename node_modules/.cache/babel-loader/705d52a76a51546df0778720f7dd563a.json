{"ast":null,"code":"import { createAction, createReducer } from \"@reduxjs/toolkit\";\nvar increment = createAction(\"increment\");\nvar decrement = createAction(\"decrement\");\nfunction isActionWithNumberPayload(action) {\n  return typeof action.payload === \"number\";\n}\nvar reducer = createReducer({\n  counter: 0,\n  sumOfNumberPayloads: 0,\n  unhandledActions: 0\n}, function (builder) {\n  builder.addCase(increment, function (state, action) {\n    // action is inferred correctly here\n    state.counter += action.payload;\n  })\n  // You can chain calls, or have separate `builder.addCase()` lines each time\n  .addCase(decrement, function (state, action) {\n    state.counter -= action.payload;\n  })\n  // You can apply a \"matcher function\" to incoming actions\n  .addMatcher(isActionWithNumberPayload, function (state, action) {})\n  // and provide a default case if no other handlers matched\n  .addDefaultCase(function (state, action) {});\n});","map":{"version":3,"names":["createAction","createReducer","increment","decrement","isActionWithNumberPayload","action","payload","reducer","counter","sumOfNumberPayloads","unhandledActions","builder","addCase","state","addMatcher","addDefaultCase"],"sources":["C:/Users/tiriq/Documents/Tiago/MyThings/MyProjects/site/src/store/index.js"],"sourcesContent":["import { createAction, createReducer } from \"@reduxjs/toolkit\";\n\nconst increment = createAction(\"increment\");\nconst decrement = createAction(\"decrement\");\n\nfunction isActionWithNumberPayload(action) {\n  return typeof action.payload === \"number\";\n}\n\nconst reducer = createReducer(\n  {\n    counter: 0,\n    sumOfNumberPayloads: 0,\n    unhandledActions: 0,\n  },\n  (builder) => {\n    builder\n      .addCase(increment, (state, action) => {\n        // action is inferred correctly here\n        state.counter += action.payload;\n      })\n      // You can chain calls, or have separate `builder.addCase()` lines each time\n      .addCase(decrement, (state, action) => {\n        state.counter -= action.payload;\n      })\n      // You can apply a \"matcher function\" to incoming actions\n      .addMatcher(isActionWithNumberPayload, (state, action) => {})\n      // and provide a default case if no other handlers matched\n      .addDefaultCase((state, action) => {});\n  }\n);\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,QAAQ,kBAAkB;AAE9D,IAAMC,SAAS,GAAGF,YAAY,CAAC,WAAW,CAAC;AAC3C,IAAMG,SAAS,GAAGH,YAAY,CAAC,WAAW,CAAC;AAE3C,SAASI,yBAAyB,CAACC,MAAM,EAAE;EACzC,OAAO,OAAOA,MAAM,CAACC,OAAO,KAAK,QAAQ;AAC3C;AAEA,IAAMC,OAAO,GAAGN,aAAa,CAC3B;EACEO,OAAO,EAAE,CAAC;EACVC,mBAAmB,EAAE,CAAC;EACtBC,gBAAgB,EAAE;AACpB,CAAC,EACD,UAACC,OAAO,EAAK;EACXA,OAAO,CACJC,OAAO,CAACV,SAAS,EAAE,UAACW,KAAK,EAAER,MAAM,EAAK;IACrC;IACAQ,KAAK,CAACL,OAAO,IAAIH,MAAM,CAACC,OAAO;EACjC,CAAC;EACD;EAAA,CACCM,OAAO,CAACT,SAAS,EAAE,UAACU,KAAK,EAAER,MAAM,EAAK;IACrCQ,KAAK,CAACL,OAAO,IAAIH,MAAM,CAACC,OAAO;EACjC,CAAC;EACD;EAAA,CACCQ,UAAU,CAACV,yBAAyB,EAAE,UAACS,KAAK,EAAER,MAAM,EAAK,CAAC,CAAC;EAC5D;EAAA,CACCU,cAAc,CAAC,UAACF,KAAK,EAAER,MAAM,EAAK,CAAC,CAAC,CAAC;AAC1C,CAAC,CACF"},"metadata":{},"sourceType":"module"}