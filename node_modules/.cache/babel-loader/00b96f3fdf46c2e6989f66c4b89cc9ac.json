{"ast":null,"code":"/**\r\n * DevExtreme (esm/core/utils/object.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isNumeric, isPlainObject, isObject } from \"./type\";\nimport variableWrapper from \"./variable_wrapper\";\nvar clone = function () {\n  function Clone() {}\n  return function (obj) {\n    Clone.prototype = obj;\n    return new Clone();\n  };\n}();\nvar orderEach = function orderEach(map, func) {\n  var keys = [];\n  var key;\n  var i;\n  for (key in map) {\n    if (Object.prototype.hasOwnProperty.call(map, key)) {\n      keys.push(key);\n    }\n  }\n  keys.sort(function (x, y) {\n    var isNumberX = isNumeric(x);\n    var isNumberY = isNumeric(y);\n    if (isNumberX && isNumberY) {\n      return x - y;\n    }\n    if (isNumberX && !isNumberY) {\n      return -1;\n    }\n    if (!isNumberX && isNumberY) {\n      return 1;\n    }\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  });\n  for (i = 0; i < keys.length; i++) {\n    key = keys[i];\n    func(key, map[key]);\n  }\n};\nvar assignValueToProperty = function assignValueToProperty(target, property, value, assignByReference) {\n  if (!assignByReference && variableWrapper.isWrapped(target[property])) {\n    variableWrapper.assign(target[property], value);\n  } else {\n    target[property] = value;\n  }\n};\nvar deepExtendArraySafe = function deepExtendArraySafe(target, changes, extendComplexObject, assignByReference) {\n  var prevValue;\n  var newValue;\n  for (var name in changes) {\n    prevValue = target[name];\n    newValue = changes[name];\n    if (\"__proto__\" === name || \"constructor\" === name || target === newValue) {\n      continue;\n    }\n    if (isPlainObject(newValue)) {\n      var goDeeper = extendComplexObject ? isObject(prevValue) : isPlainObject(prevValue);\n      newValue = deepExtendArraySafe(goDeeper ? prevValue : {}, newValue, extendComplexObject, assignByReference);\n    }\n    if (void 0 !== newValue && prevValue !== newValue) {\n      assignValueToProperty(target, name, newValue, assignByReference);\n    }\n  }\n  return target;\n};\nexport { clone, orderEach, deepExtendArraySafe };","map":null,"metadata":{},"sourceType":"module"}