{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/utils/recurrence/excludeFromRecurrence.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createAppointmentAdapter } from \"../../../../../ui/scheduler/appointmentAdapter\";\nimport dateSerialization from \"../../../../../core/utils/date_serialization\";\nvar FULL_DATE_FORMAT = \"yyyyMMddTHHmmss\";\nvar UTC_FULL_DATE_FORMAT = \"\".concat(FULL_DATE_FORMAT, \"Z\");\nvar getSerializedDate = function getSerializedDate(date, startDate, isAllDay) {\n  if (isAllDay) {\n    date.setHours(startDate.getHours(), startDate.getMinutes(), startDate.getSeconds(), startDate.getMilliseconds());\n  }\n  return dateSerialization.serializeDate(date, UTC_FULL_DATE_FORMAT);\n};\nvar createRecurrenceException = function createRecurrenceException(appointmentAdapter, exceptionDate) {\n  var result = [];\n  if (appointmentAdapter.recurrenceException) {\n    result.push(appointmentAdapter.recurrenceException);\n  }\n  result.push(getSerializedDate(exceptionDate, appointmentAdapter.startDate, appointmentAdapter.allDay));\n  return result.join();\n};\nexport var excludeFromRecurrence = function excludeFromRecurrence(appointment, exceptionDate, dataAccessors, timeZoneCalculator) {\n  var appointmentAdapter = createAppointmentAdapter(_extends({}, appointment), dataAccessors, timeZoneCalculator);\n  appointmentAdapter.recurrenceException = createRecurrenceException(appointmentAdapter, exceptionDate);\n  return appointmentAdapter;\n};","map":null,"metadata":{},"sourceType":"module"}