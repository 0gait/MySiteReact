{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGlobalStateReducer = void 0;\nvar react_1 = require(\"react\");\nfunction useGlobalStateReducer(reducer, globalState, config) {\n  if (config === void 0) {\n    config = {};\n  }\n  var _a = (0, react_1.useState)(null),\n    setState = _a[1];\n  var isMounted = (0, react_1.useRef)(false);\n  var currentState = globalState.getValue(config.selector);\n  function reRender() {\n    // re-render if the component is mounted\n    if (isMounted.current) {\n      setState({});\n    }\n  }\n  function observer(newState) {\n    if (currentState === newState) {\n      // Do nothing because the selected state is up-to-date\n    } else {\n      reRender();\n    }\n  }\n  var subscription = {\n    observer: observer,\n    selector: config.selector ? config.selector : function (state) {\n      return state;\n    },\n    refresh: reRender\n  };\n  (0, react_1.useEffect)(function () {\n    var unsubscribe = globalState.subscribe(subscription);\n    isMounted.current = true;\n    return function () {\n      unsubscribe();\n      isMounted.current = false;\n    };\n  }, [currentState, globalState]);\n  function dispatch(action) {\n    var newState = reducer(currentState, action);\n    globalState.setValue(newState, config);\n  }\n  return [currentState, dispatch];\n}\nexports.useGlobalStateReducer = useGlobalStateReducer;","map":null,"metadata":{},"sourceType":"script"}