{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n/**\r\n * DevExtreme (esm/ui/splitter.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport Widget from \"./widget/ui.widget\";\nimport domAdapter from \"../core/dom_adapter\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport pointerEvents from \"../events/pointer\";\nimport { getWindow } from \"../core/utils/window\";\nimport { addNamespace } from \"../events/utils/index\";\nimport Guid from \"../core/guid\";\nvar window = getWindow();\nvar SPLITTER_CLASS = \"dx-splitter\";\nvar SPLITTER_WRAPPER_CLASS = \"\".concat(SPLITTER_CLASS, \"-wrapper\");\nvar SPLITTER_INACTIVE_CLASS = \"\".concat(SPLITTER_CLASS, \"-inactive\");\nvar SPLITTER_BORDER_CLASS = \"\".concat(SPLITTER_CLASS, \"-border\");\nvar SPLITTER_INITIAL_STATE_CLASS = \"\".concat(SPLITTER_CLASS, \"-initial\");\nvar STATE_DISABLED_CLASS = \"dx-state-disabled\";\nvar SPLITTER_MODULE_NAMESPACE = \"dxSplitterResizing\";\nvar SplitterControl = /*#__PURE__*/function (_Widget) {\n  _inherits(SplitterControl, _Widget);\n  function SplitterControl() {\n    _classCallCheck(this, SplitterControl);\n    return _possibleConstructorReturn(this, _getPrototypeOf(SplitterControl).apply(this, arguments));\n  }\n  _createClass(SplitterControl, [{\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(SplitterControl.prototype), \"_init\", this).call(this);\n      var eventGuid = new Guid().toString();\n      this.SPLITTER_POINTER_DOWN_EVENT_NAME = addNamespace(pointerEvents.down, SPLITTER_MODULE_NAMESPACE + eventGuid);\n      this.SPLITTER_POINTER_MOVE_EVENT_NAME = addNamespace(pointerEvents.move, SPLITTER_MODULE_NAMESPACE + eventGuid);\n      this.SPLITTER_POINTER_UP_EVENT_NAME = addNamespace(pointerEvents.up, SPLITTER_MODULE_NAMESPACE + eventGuid);\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      _get(_getPrototypeOf(SplitterControl.prototype), \"_initMarkup\", this).call(this);\n      this._initActions();\n      this._$container = this.option(\"container\");\n      this._$leftElement = this.option(\"leftElement\");\n      this._$rightElement = this.option(\"rightElement\");\n      this.$element().addClass(SPLITTER_WRAPPER_CLASS).addClass(SPLITTER_INITIAL_STATE_CLASS);\n      this._$splitterBorder = $(\"<div>\").addClass(SPLITTER_BORDER_CLASS).appendTo(this.$element());\n      this._$splitter = $(\"<div>\").addClass(SPLITTER_CLASS).addClass(SPLITTER_INACTIVE_CLASS).appendTo(this._$splitterBorder);\n    }\n  }, {\n    key: \"_initActions\",\n    value: function _initActions() {\n      this._actions = {\n        onApplyPanelSize: this._createActionByOption(\"onApplyPanelSize\"),\n        onActiveStateChanged: this._createActionByOption(\"onActiveStateChanged\")\n      };\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      _get(_getPrototypeOf(SplitterControl.prototype), \"_render\", this).call(this);\n      this._detachEventHandlers();\n      this._attachEventHandlers();\n    }\n  }, {\n    key: \"_clean\",\n    value: function _clean() {\n      this._detachEventHandlers();\n      _get(_getPrototypeOf(SplitterControl.prototype), \"_clean\", this).call(this);\n    }\n  }, {\n    key: \"_attachEventHandlers\",\n    value: function _attachEventHandlers() {\n      var document = domAdapter.getDocument();\n      eventsEngine.on(this._$splitterBorder, this.SPLITTER_POINTER_DOWN_EVENT_NAME, this._onMouseDownHandler.bind(this));\n      eventsEngine.on(document, this.SPLITTER_POINTER_MOVE_EVENT_NAME, this._onMouseMoveHandler.bind(this));\n      eventsEngine.on(document, this.SPLITTER_POINTER_UP_EVENT_NAME, this._onMouseUpHandler.bind(this));\n    }\n  }, {\n    key: \"_detachEventHandlers\",\n    value: function _detachEventHandlers() {\n      var document = domAdapter.getDocument();\n      eventsEngine.off(this._$splitterBorder, this.SPLITTER_POINTER_DOWN_EVENT_NAME);\n      eventsEngine.off(document, this.SPLITTER_POINTER_MOVE_EVENT_NAME);\n      eventsEngine.off(document, this.SPLITTER_POINTER_UP_EVENT_NAME);\n    }\n  }, {\n    key: \"_dimensionChanged\",\n    value: function _dimensionChanged(dimension) {\n      if (!dimension || \"height\" !== dimension) {\n        this._containerWidth = this._$container.get(0).clientWidth;\n        this._setSplitterPositionLeft({\n          needUpdatePanels: true,\n          usePercentagePanelsWidth: true\n        });\n      }\n    }\n  }, {\n    key: \"_onMouseDownHandler\",\n    value: function _onMouseDownHandler(e) {\n      e.preventDefault();\n      this._offsetX = e.pageX - this._$splitterBorder.offset().left <= this._getSplitterBorderWidth() ? e.pageX - this._$splitterBorder.offset().left : 0;\n      this._containerWidth = this._$container.get(0).clientWidth;\n      this.$element().removeClass(SPLITTER_INITIAL_STATE_CLASS);\n      this._toggleActive(true);\n      this._setSplitterPositionLeft({\n        needUpdatePanels: true\n      });\n    }\n  }, {\n    key: \"_onMouseMoveHandler\",\n    value: function _onMouseMoveHandler(e) {\n      if (!this._isSplitterActive) {\n        return;\n      }\n      this._setSplitterPositionLeft({\n        splitterPositionLeft: this._getNewSplitterPositionLeft(e),\n        needUpdatePanels: true\n      });\n    }\n  }, {\n    key: \"_onMouseUpHandler\",\n    value: function _onMouseUpHandler() {\n      if (!this._isSplitterActive) {\n        return;\n      }\n      this._leftPanelPercentageWidth = null;\n      this._toggleActive(false);\n      this._setSplitterPositionLeft({\n        needUpdatePanels: true,\n        usePercentagePanelsWidth: true\n      });\n    }\n  }, {\n    key: \"_getNewSplitterPositionLeft\",\n    value: function _getNewSplitterPositionLeft(e) {\n      var newSplitterPositionLeft = e.pageX - this._getContainerLeftOffset() - this._offsetX;\n      newSplitterPositionLeft = Math.max(0 - this._getSplitterOffset(), newSplitterPositionLeft);\n      newSplitterPositionLeft = Math.min(this._containerWidth - this._getSplitterOffset() - this._getSplitterWidth(), newSplitterPositionLeft);\n      return newSplitterPositionLeft;\n    }\n  }, {\n    key: \"_getContainerLeftOffset\",\n    value: function _getContainerLeftOffset() {\n      var offsetLeft = this._$container.offset().left;\n      if (window) {\n        var style = window.getComputedStyle(this._$container.get(0));\n        var paddingLeft = parseFloat(style.paddingLeft) || 0;\n        var borderLeft = parseFloat(style.borderLeftWidth) || 0;\n        offsetLeft += paddingLeft + borderLeft;\n      }\n      return offsetLeft;\n    }\n  }, {\n    key: \"_getSplitterOffset\",\n    value: function _getSplitterOffset() {\n      return (this._getSplitterBorderWidth() - this._getSplitterWidth()) / 2;\n    }\n  }, {\n    key: \"_getSplitterWidth\",\n    value: function _getSplitterWidth() {\n      return this._$splitter.get(0).clientWidth;\n    }\n  }, {\n    key: \"_getSplitterBorderWidth\",\n    value: function _getSplitterBorderWidth() {\n      return this._$splitterBorder.get(0).clientWidth;\n    }\n  }, {\n    key: \"_getLeftPanelWidth\",\n    value: function _getLeftPanelWidth() {\n      return this._$leftElement.get(0).clientWidth;\n    }\n  }, {\n    key: \"getSplitterBorderElement\",\n    value: function getSplitterBorderElement() {\n      return this._$splitterBorder;\n    }\n  }, {\n    key: \"_toggleActive\",\n    value: function _toggleActive(isActive) {\n      this.$element().toggleClass(SPLITTER_INACTIVE_CLASS, !isActive);\n      this._$splitter.toggleClass(SPLITTER_INACTIVE_CLASS, !isActive);\n      this._isSplitterActive = isActive;\n      this._actions.onActiveStateChanged({\n        isActive: isActive\n      });\n    }\n  }, {\n    key: \"toggleDisabled\",\n    value: function toggleDisabled(isDisabled) {\n      this.$element().toggleClass(STATE_DISABLED_CLASS, isDisabled);\n      this._$splitter.toggleClass(STATE_DISABLED_CLASS, isDisabled);\n    }\n  }, {\n    key: \"isSplitterMoved\",\n    value: function isSplitterMoved() {\n      return !this.$element().hasClass(SPLITTER_INITIAL_STATE_CLASS);\n    }\n  }, {\n    key: \"disableSplitterCalculation\",\n    value: function disableSplitterCalculation(value) {\n      this._isSplitterCalculationDisabled = value;\n    }\n  }, {\n    key: \"_setSplitterPositionLeft\",\n    value: function _setSplitterPositionLeft() {\n      var _ref = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n        _ref$splitterPosition = _ref.splitterPositionLeft,\n        splitterPositionLeft = _ref$splitterPosition === void 0 ? null : _ref$splitterPosition,\n        _ref$needUpdatePanels = _ref.needUpdatePanels,\n        needUpdatePanels = _ref$needUpdatePanels === void 0 ? false : _ref$needUpdatePanels,\n        _ref$usePercentagePan = _ref.usePercentagePanelsWidth,\n        usePercentagePanelsWidth = _ref$usePercentagePan === void 0 ? false : _ref$usePercentagePan;\n      splitterPositionLeft = splitterPositionLeft || this._getLeftPanelWidth() - this._getSplitterOffset();\n      var leftPanelWidth = splitterPositionLeft + this._getSplitterOffset();\n      var rightPanelWidth = this._containerWidth - leftPanelWidth;\n      if (!this._isSplitterCalculationDisabled) {\n        this.$element().css(\"left\", splitterPositionLeft);\n      }\n      this._leftPanelPercentageWidth = this._leftPanelPercentageWidth || this._convertToPercentage(leftPanelWidth);\n      var rightPanelPercentageWidth = this._convertToPercentage(this._containerWidth - this._convertToPixels(this._leftPanelPercentageWidth));\n      if (!needUpdatePanels) {\n        return;\n      }\n      this._actions.onApplyPanelSize({\n        leftPanelWidth: usePercentagePanelsWidth ? \"\".concat(this._leftPanelPercentageWidth, \"%\") : leftPanelWidth,\n        rightPanelWidth: usePercentagePanelsWidth ? \"\".concat(rightPanelPercentageWidth, \"%\") : rightPanelWidth\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      switch (args.name) {\n        case \"initialLeftPanelWidth\":\n          this._leftPanelPercentageWidth = this._convertToPercentage(args.value);\n          this._dimensionChanged();\n          break;\n        case \"leftElement\":\n          this.repaint();\n          break;\n        case \"onActiveStateChanged\":\n        case \"onApplyPanelSize\":\n          this._actions[args.name] = this._createActionByOption(args.name);\n          break;\n        default:\n          _get(_getPrototypeOf(SplitterControl.prototype), \"_optionChanged\", this).call(this, args);\n      }\n    }\n  }, {\n    key: \"_convertToPercentage\",\n    value: function _convertToPercentage(pixelWidth) {\n      return pixelWidth / this._$container.get(0).clientWidth * 100;\n    }\n  }, {\n    key: \"_convertToPixels\",\n    value: function _convertToPixels(percentageWidth) {\n      return percentageWidth / 100 * this._$container.get(0).clientWidth;\n    }\n  }]);\n  return SplitterControl;\n}(Widget);\nexport { SplitterControl as default };","map":null,"metadata":{},"sourceType":"module"}