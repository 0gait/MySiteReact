{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\MySiteReact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n/**\r\n * DevExtreme (esm/ui/widget/ui.widget.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Action from \"../../core/action\";\nimport DOMComponent from \"../../core/dom_component\";\nimport { active, focus as _focus, hover, keyboard } from \"../../events/short\";\nimport { deferRender, deferRenderer, noop } from \"../../core/utils/common\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { focusable as focusableSelector } from \"./selectors\";\nimport { isPlainObject, isDefined } from \"../../core/utils/type\";\nimport devices from \"../../core/devices\";\nimport { compare as compareVersions } from \"../../core/utils/version\";\nimport \"../../events/click\";\nimport \"../../events/core/emitter.feedback\";\nimport \"../../events/hover\";\nfunction setAttribute(name, value, target) {\n  name = \"role\" === name || \"id\" === name ? name : \"aria-\".concat(name);\n  value = isDefined(value) ? value.toString() : null;\n  target.attr(name, value);\n}\nvar Widget = DOMComponent.inherit({\n  _feedbackHideTimeout: 400,\n  _feedbackShowTimeout: 30,\n  _supportedKeys: function _supportedKeys() {\n    return {};\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      hoveredElement: null,\n      isActive: false,\n      disabled: false,\n      visible: true,\n      hint: void 0,\n      activeStateEnabled: false,\n      onContentReady: null,\n      hoverStateEnabled: false,\n      focusStateEnabled: false,\n      tabIndex: 0,\n      accessKey: void 0,\n      onFocusIn: null,\n      onFocusOut: null,\n      onKeyboardHandled: null,\n      ignoreParentReadOnly: false,\n      useResizeObserver: true\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        var device = devices.real();\n        var platform = device.platform;\n        var version = device.version;\n        return \"ios\" === platform && compareVersions(version, \"13.3\") <= 0;\n      },\n      options: {\n        useResizeObserver: false\n      }\n    }]);\n  },\n  _init: function _init() {\n    this.callBase();\n    this._initContentReadyAction();\n  },\n  _innerWidgetOptionChanged: function _innerWidgetOptionChanged(innerWidget, args) {\n    var options = Widget.getOptionsFromContainer(args);\n    innerWidget && innerWidget.option(options);\n    this._options.cache(args.name, options);\n  },\n  _bindInnerWidgetOptions: function _bindInnerWidgetOptions(innerWidget, optionsContainer) {\n    var _this = this;\n    var syncOptions = function syncOptions() {\n      return _this._options.silent(optionsContainer, extend({}, innerWidget.option()));\n    };\n    syncOptions();\n    innerWidget.on(\"optionChanged\", syncOptions);\n  },\n  _getAriaTarget: function _getAriaTarget() {\n    return this._focusTarget();\n  },\n  _initContentReadyAction: function _initContentReadyAction() {\n    this._contentReadyAction = this._createActionByOption(\"onContentReady\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _initMarkup: function _initMarkup() {\n    var _this$option = this.option(),\n      disabled = _this$option.disabled,\n      visible = _this$option.visible;\n    this.$element().addClass(\"dx-widget\");\n    this._toggleDisabledState(disabled);\n    this._toggleVisibility(visible);\n    this._renderHint();\n    this._isFocusable() && this._renderFocusTarget();\n    this.callBase();\n  },\n  _render: function _render() {\n    this.callBase();\n    this._renderContent();\n    this._renderFocusState();\n    this._attachFeedbackEvents();\n    this._attachHoverEvents();\n    this._toggleIndependentState();\n  },\n  _renderHint: function _renderHint() {\n    var _this$option2 = this.option(),\n      hint = _this$option2.hint;\n    this.$element().attr(\"title\", hint || null);\n  },\n  _renderContent: function _renderContent() {\n    var _this2 = this;\n    deferRender(function () {\n      return !_this2._disposed ? _this2._renderContentImpl() : void 0;\n    }).done(function () {\n      return !_this2._disposed ? _this2._fireContentReadyAction() : void 0;\n    });\n  },\n  _renderContentImpl: noop,\n  _fireContentReadyAction: deferRenderer(function () {\n    return this._contentReadyAction();\n  }),\n  _dispose: function _dispose() {\n    this._contentReadyAction = null;\n    this._detachKeyboardEvents();\n    this.callBase();\n  },\n  _resetActiveState: function _resetActiveState() {\n    this._toggleActiveState(this._eventBindingTarget(), false);\n  },\n  _clean: function _clean() {\n    this._cleanFocusState();\n    this._resetActiveState();\n    this.callBase();\n    this.$element().empty();\n  },\n  _toggleVisibility: function _toggleVisibility(visible) {\n    this.$element().toggleClass(\"dx-state-invisible\", !visible);\n    this.setAria(\"hidden\", !visible || void 0);\n  },\n  _renderFocusState: function _renderFocusState() {\n    this._attachKeyboardEvents();\n    if (this._isFocusable()) {\n      this._renderFocusTarget();\n      this._attachFocusEvents();\n      this._renderAccessKey();\n    }\n  },\n  _renderAccessKey: function _renderAccessKey() {\n    var $el = this._focusTarget();\n    var _this$option3 = this.option(),\n      accessKey = _this$option3.accessKey;\n    $el.attr(\"accesskey\", accessKey);\n  },\n  _isFocusable: function _isFocusable() {\n    var _this$option4 = this.option(),\n      focusStateEnabled = _this$option4.focusStateEnabled,\n      disabled = _this$option4.disabled;\n    return focusStateEnabled && !disabled;\n  },\n  _eventBindingTarget: function _eventBindingTarget() {\n    return this.$element();\n  },\n  _focusTarget: function _focusTarget() {\n    return this._getActiveElement();\n  },\n  _isFocusTarget: function _isFocusTarget(element) {\n    var focusTargets = $(this._focusTarget()).toArray();\n    return focusTargets.includes(element);\n  },\n  _getActiveElement: function _getActiveElement() {\n    var activeElement = this._eventBindingTarget();\n    if (this._activeStateUnit) {\n      return activeElement.find(this._activeStateUnit).not(\".dx-state-disabled\");\n    }\n    return activeElement;\n  },\n  _renderFocusTarget: function _renderFocusTarget() {\n    var _this$option5 = this.option(),\n      tabIndex = _this$option5.tabIndex;\n    this._focusTarget().attr(\"tabIndex\", tabIndex);\n  },\n  _keyboardEventBindingTarget: function _keyboardEventBindingTarget() {\n    return this._eventBindingTarget();\n  },\n  _refreshFocusEvent: function _refreshFocusEvent() {\n    this._detachFocusEvents();\n    this._attachFocusEvents();\n  },\n  _focusEventTarget: function _focusEventTarget() {\n    return this._focusTarget();\n  },\n  _focusInHandler: function _focusInHandler(event) {\n    var _this3 = this;\n    if (!event.isDefaultPrevented()) {\n      this._createActionByOption(\"onFocusIn\", {\n        beforeExecute: function beforeExecute() {\n          return _this3._updateFocusState(event, true);\n        },\n        excludeValidators: [\"readOnly\"]\n      })({\n        event: event\n      });\n    }\n  },\n  _focusOutHandler: function _focusOutHandler(event) {\n    var _this4 = this;\n    if (!event.isDefaultPrevented()) {\n      this._createActionByOption(\"onFocusOut\", {\n        beforeExecute: function beforeExecute() {\n          return _this4._updateFocusState(event, false);\n        },\n        excludeValidators: [\"readOnly\", \"disabled\"]\n      })({\n        event: event\n      });\n    }\n  },\n  _updateFocusState: function _updateFocusState(_ref, isFocused) {\n    var target = _ref.target;\n    if (this._isFocusTarget(target)) {\n      this._toggleFocusClass(isFocused, $(target));\n    }\n  },\n  _toggleFocusClass: function _toggleFocusClass(isFocused, $element) {\n    var $focusTarget = $element && $element.length ? $element : this._focusTarget();\n    $focusTarget.toggleClass(\"dx-state-focused\", isFocused);\n  },\n  _hasFocusClass: function _hasFocusClass(element) {\n    var $focusTarget = $(element || this._focusTarget());\n    return $focusTarget.hasClass(\"dx-state-focused\");\n  },\n  _isFocused: function _isFocused() {\n    return this._hasFocusClass();\n  },\n  _getKeyboardListeners: function _getKeyboardListeners() {\n    return [];\n  },\n  _attachKeyboardEvents: function _attachKeyboardEvents() {\n    var _this5 = this;\n    this._detachKeyboardEvents();\n    var _this$option6 = this.option(),\n      focusStateEnabled = _this$option6.focusStateEnabled,\n      onKeyboardHandled = _this$option6.onKeyboardHandled;\n    var hasChildListeners = this._getKeyboardListeners().length;\n    var hasKeyboardEventHandler = !!onKeyboardHandled;\n    var shouldAttach = focusStateEnabled || hasChildListeners || hasKeyboardEventHandler;\n    if (shouldAttach) {\n      this._keyboardListenerId = keyboard.on(this._keyboardEventBindingTarget(), this._focusTarget(), function (opts) {\n        return _this5._keyboardHandler(opts);\n      });\n    }\n  },\n  _keyboardHandler: function _keyboardHandler(options, onlyChildProcessing) {\n    if (!onlyChildProcessing) {\n      var originalEvent = options.originalEvent,\n        keyName = options.keyName,\n        which = options.which;\n      var keys = this._supportedKeys(originalEvent);\n      var func = keys[keyName] || keys[which];\n      if (void 0 !== func) {\n        var handler = func.bind(this);\n        var result = handler(originalEvent, options);\n        if (!result) {\n          return false;\n        }\n      }\n    }\n    var keyboardListeners = this._getKeyboardListeners();\n    var _this$option7 = this.option(),\n      onKeyboardHandled = _this$option7.onKeyboardHandled;\n    keyboardListeners.forEach(function (listener) {\n      return listener && listener._keyboardHandler(options);\n    });\n    onKeyboardHandled && onKeyboardHandled(options);\n    return true;\n  },\n  _refreshFocusState: function _refreshFocusState() {\n    this._cleanFocusState();\n    this._renderFocusState();\n  },\n  _cleanFocusState: function _cleanFocusState() {\n    var $element = this._focusTarget();\n    $element.removeAttr(\"tabIndex\");\n    this._toggleFocusClass(false);\n    this._detachFocusEvents();\n    this._detachKeyboardEvents();\n  },\n  _detachKeyboardEvents: function _detachKeyboardEvents() {\n    keyboard.off(this._keyboardListenerId);\n    this._keyboardListenerId = null;\n  },\n  _attachHoverEvents: function _attachHoverEvents() {\n    var _this6 = this;\n    var _this$option8 = this.option(),\n      hoverStateEnabled = _this$option8.hoverStateEnabled;\n    var selector = this._activeStateUnit;\n    var $el = this._eventBindingTarget();\n    hover.off($el, {\n      selector: selector,\n      namespace: \"UIFeedback\"\n    });\n    if (hoverStateEnabled) {\n      hover.on($el, new Action(function (_ref2) {\n        var event = _ref2.event,\n          element = _ref2.element;\n        _this6._hoverStartHandler(event);\n        _this6.option(\"hoveredElement\", $(element));\n      }, {\n        excludeValidators: [\"readOnly\"]\n      }), function (event) {\n        _this6.option(\"hoveredElement\", null);\n        _this6._hoverEndHandler(event);\n      }, {\n        selector: selector,\n        namespace: \"UIFeedback\"\n      });\n    }\n  },\n  _attachFeedbackEvents: function _attachFeedbackEvents() {\n    var _this7 = this;\n    var _this$option9 = this.option(),\n      activeStateEnabled = _this$option9.activeStateEnabled;\n    var selector = this._activeStateUnit;\n    var $el = this._eventBindingTarget();\n    active.off($el, {\n      namespace: \"UIFeedback\",\n      selector: selector\n    });\n    if (activeStateEnabled) {\n      active.on($el, new Action(function (_ref3) {\n        var event = _ref3.event,\n          element = _ref3.element;\n        return _this7._toggleActiveState($(element), true, event);\n      }), new Action(function (_ref4) {\n        var event = _ref4.event,\n          element = _ref4.element;\n        return _this7._toggleActiveState($(element), false, event);\n      }, {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      }), {\n        showTimeout: this._feedbackShowTimeout,\n        hideTimeout: this._feedbackHideTimeout,\n        selector: selector,\n        namespace: \"UIFeedback\"\n      });\n    }\n  },\n  _detachFocusEvents: function _detachFocusEvents() {\n    var $el = this._focusEventTarget();\n    _focus.off($el, {\n      namespace: \"\".concat(this.NAME, \"Focus\")\n    });\n  },\n  _attachFocusEvents: function _attachFocusEvents() {\n    var _this8 = this;\n    var $el = this._focusEventTarget();\n    _focus.on($el, function (e) {\n      return _this8._focusInHandler(e);\n    }, function (e) {\n      return _this8._focusOutHandler(e);\n    }, {\n      namespace: \"\".concat(this.NAME, \"Focus\"),\n      isFocusable: function isFocusable(index, el) {\n        return $(el).is(focusableSelector);\n      }\n    });\n  },\n  _hoverStartHandler: noop,\n  _hoverEndHandler: noop,\n  _toggleActiveState: function _toggleActiveState($element, value) {\n    this.option(\"isActive\", value);\n    $element.toggleClass(\"dx-state-active\", value);\n  },\n  _updatedHover: function _updatedHover() {\n    var hoveredElement = this._options.silent(\"hoveredElement\");\n    this._hover(hoveredElement, hoveredElement);\n  },\n  _findHoverTarget: function _findHoverTarget($el) {\n    return $el && $el.closest(this._activeStateUnit || this._eventBindingTarget());\n  },\n  _hover: function _hover($el, $previous) {\n    var _this$option10 = this.option(),\n      hoverStateEnabled = _this$option10.hoverStateEnabled,\n      disabled = _this$option10.disabled,\n      isActive = _this$option10.isActive;\n    $previous = this._findHoverTarget($previous);\n    $previous && $previous.toggleClass(\"dx-state-hover\", false);\n    if ($el && hoverStateEnabled && !disabled && !isActive) {\n      var newHoveredElement = this._findHoverTarget($el);\n      newHoveredElement && newHoveredElement.toggleClass(\"dx-state-hover\", true);\n    }\n  },\n  _toggleDisabledState: function _toggleDisabledState(value) {\n    this.$element().toggleClass(\"dx-state-disabled\", Boolean(value));\n    this.setAria(\"disabled\", value || void 0);\n  },\n  _toggleIndependentState: function _toggleIndependentState() {\n    this.$element().toggleClass(\"dx-state-independent\", this.option(\"ignoreParentReadOnly\"));\n  },\n  _setWidgetOption: function _setWidgetOption(widgetName, args) {\n    var _this9 = this;\n    if (!this[widgetName]) {\n      return;\n    }\n    if (isPlainObject(args[0])) {\n      each(args[0], function (option, value) {\n        return _this9._setWidgetOption(widgetName, [option, value]);\n      });\n      return;\n    }\n    var optionName = args[0];\n    var value = args[1];\n    if (1 === args.length) {\n      value = this.option(optionName);\n    }\n    var widgetOptionMap = this[\"\".concat(widgetName, \"OptionMap\")];\n    this[widgetName].option(widgetOptionMap ? widgetOptionMap(optionName) : optionName, value);\n  },\n  _optionChanged: function _optionChanged(args) {\n    var name = args.name,\n      value = args.value,\n      previousValue = args.previousValue;\n    switch (name) {\n      case \"disabled\":\n        this._toggleDisabledState(value);\n        this._updatedHover();\n        this._refreshFocusState();\n        break;\n      case \"hint\":\n        this._renderHint();\n        break;\n      case \"ignoreParentReadOnly\":\n        this._toggleIndependentState();\n        break;\n      case \"activeStateEnabled\":\n        this._attachFeedbackEvents();\n        break;\n      case \"hoverStateEnabled\":\n        this._attachHoverEvents();\n        this._updatedHover();\n        break;\n      case \"tabIndex\":\n      case \"focusStateEnabled\":\n        this._refreshFocusState();\n        break;\n      case \"onFocusIn\":\n      case \"onFocusOut\":\n      case \"useResizeObserver\":\n        break;\n      case \"accessKey\":\n        this._renderAccessKey();\n        break;\n      case \"hoveredElement\":\n        this._hover(value, previousValue);\n        break;\n      case \"isActive\":\n        this._updatedHover();\n        break;\n      case \"visible\":\n        this._toggleVisibility(value);\n        if (this._isVisibilityChangeSupported()) {\n          this._checkVisibilityChanged(value ? \"shown\" : \"hiding\");\n        }\n        break;\n      case \"onKeyboardHandled\":\n        this._attachKeyboardEvents();\n        break;\n      case \"onContentReady\":\n        this._initContentReadyAction();\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  _isVisible: function _isVisible() {\n    var _this$option11 = this.option(),\n      visible = _this$option11.visible;\n    return this.callBase() && visible;\n  },\n  beginUpdate: function beginUpdate() {\n    this._ready(false);\n    this.callBase();\n  },\n  endUpdate: function endUpdate() {\n    this.callBase();\n    if (this._initialized) {\n      this._ready(true);\n    }\n  },\n  _ready: function _ready(value) {\n    if (0 === arguments.length) {\n      return this._isReady;\n    }\n    this._isReady = value;\n  },\n  setAria: function setAria() {\n    if (!isPlainObject(arguments.length <= 0 ? void 0 : arguments[0])) {\n      setAttribute(arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 1 ? void 0 : arguments[1], (arguments.length <= 2 ? void 0 : arguments[2]) || this._getAriaTarget());\n    } else {\n      var target = (arguments.length <= 1 ? void 0 : arguments[1]) || this._getAriaTarget();\n      each(arguments.length <= 0 ? void 0 : arguments[0], function (name, value) {\n        return setAttribute(name, value, target);\n      });\n    }\n  },\n  isReady: function isReady() {\n    return this._ready();\n  },\n  repaint: function repaint() {\n    this._refresh();\n  },\n  focus: function focus() {\n    _focus.trigger(this._focusTarget());\n  },\n  registerKeyHandler: function registerKeyHandler(key, handler) {\n    var currentKeys = this._supportedKeys();\n    this._supportedKeys = function () {\n      return extend(currentKeys, _defineProperty({}, key, handler));\n    };\n  }\n});\nWidget.getOptionsFromContainer = function (_ref5) {\n  var name = _ref5.name,\n    fullName = _ref5.fullName,\n    value = _ref5.value;\n  var options = {};\n  if (name === fullName) {\n    options = value;\n  } else {\n    var option = fullName.split(\".\").pop();\n    options[option] = value;\n  }\n  return options;\n};\nexport default Widget;","map":null,"metadata":{},"sourceType":"module"}