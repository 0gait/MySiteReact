{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/pivot_grid/ui.pivot_grid.chart_integration.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { foreachTree, formatValue, createPath } from \"./ui.pivot_grid.utils\";\nimport { each } from \"../../core/utils/iterator\";\nvar FORMAT_DICTIONARY = {\n  number: \"numeric\",\n  date: \"datetime\"\n};\nvar UNBIND_KEY = \"dxPivotGridUnbinding\";\nfunction getFormattedValue(path, fields) {\n  var value = [];\n  var lastFieldIndex = fields.length - 1;\n  each(path, function (i, item) {\n    value.push(item.text || formatValue(item.value, fields[lastFieldIndex - i]));\n  });\n  return value.reverse();\n}\nfunction getExpandedLevel(node) {\n  var level = 0;\n  foreachTree(node, function (members) {\n    level = Math.max(level, members.length - 1);\n  });\n  return level;\n}\nfunction processDataCell(processCellArgs, processCell) {\n  var chartDataItem = processCellArgs.chartDataItem;\n  var processedCell = processCell && processCell(processCellArgs);\n  if (processedCell) {\n    chartDataItem = extend({}, chartDataItem, processedCell.chartDataItem);\n    processedCell = extend({}, processCellArgs, processedCell, {\n      chartDataItem: chartDataItem\n    });\n    return processedCell;\n  }\n  return processCellArgs;\n}\nfunction createChartDataSource(pivotGridDataSource, mapOptions, axisDictionary) {\n  var data = pivotGridDataSource.getData();\n  var dataSource = [];\n  var dataFields = pivotGridDataSource.getAreaFields(\"data\");\n  var rowFields = pivotGridDataSource.getAreaFields(\"row\");\n  var columnFields = pivotGridDataSource.getAreaFields(\"column\");\n  var columnElements = [{\n    index: data.grandTotalColumnIndex,\n    children: data.columns\n  }];\n  var rowElements = [{\n    index: data.grandTotalRowIndex,\n    children: data.rows\n  }];\n  var rowLevel = getExpandedLevel(rowElements);\n  var columnLevel = getExpandedLevel(columnElements);\n  var measureIndex;\n  var dataField;\n  var rowMemberIndex;\n  var rowVisibility;\n  var rowPathFormatted;\n  var rowPath;\n  var columnMemberIndex;\n  var columnVisibility;\n  var columnPath;\n  var columnPathFormatted;\n  function createDataItem() {\n    var dataCell = (data.values[rowMemberIndex] || [])[columnMemberIndex] || [];\n    var value = dataCell[measureIndex];\n    var axis;\n    var processCellArgs = {\n      rowPath: rowPath,\n      maxRowLevel: rowLevel,\n      rowPathFormatted: rowPathFormatted,\n      rowFields: rowFields,\n      columnPathFormatted: columnPathFormatted,\n      maxColumnLevel: columnLevel,\n      columnPath: columnPath,\n      columnFields: columnFields,\n      dataFields: dataFields,\n      dataIndex: measureIndex,\n      dataValues: dataCell,\n      visible: columnVisibility && rowVisibility\n    };\n    var seriesName = (mapOptions.inverted ? columnPathFormatted : rowPathFormatted).join(\" - \");\n    var argument = (mapOptions.inverted ? rowPathFormatted : columnPathFormatted).join(\"/\");\n    if (dataFields.length > 1) {\n      if (\"args\" === mapOptions.putDataFieldsInto || \"both\" === mapOptions.putDataFieldsInto) {\n        argument += \" | \" + dataField.caption;\n      }\n      if (\"args\" !== mapOptions.putDataFieldsInto) {\n        seriesName += \" | \" + dataField.caption;\n        if (\"singleAxis\" !== mapOptions.dataFieldsDisplayMode) {\n          axis = dataField.caption;\n        }\n      }\n    }\n    processCellArgs.chartDataItem = {\n      val: void 0 === value ? null : value,\n      series: seriesName,\n      arg: argument\n    };\n    processCellArgs = processDataCell(processCellArgs, mapOptions.processCell);\n    if (processCellArgs.visible) {\n      axisDictionary[processCellArgs.chartDataItem.series] = axisDictionary[processCellArgs.chartDataItem.series] || axis;\n      dataSource.push(processCellArgs.chartDataItem);\n    }\n  }\n  function foreachRowColumn(callBack) {\n    foreachTree(rowElements, function (rowMembers) {\n      rowMemberIndex = rowMembers[0].index;\n      rowMembers = rowMembers.slice(0, rowMembers.length - 1);\n      rowVisibility = rowLevel === rowMembers.length;\n      rowPath = createPath(rowMembers);\n      rowPathFormatted = getFormattedValue(rowMembers, rowFields);\n      if (0 === rowPath.length) {\n        rowPathFormatted = [mapOptions.grandTotalText];\n      }\n      foreachTree(columnElements, function (columnMembers) {\n        columnMemberIndex = columnMembers[0].index;\n        columnMembers = columnMembers.slice(0, columnMembers.length - 1);\n        columnVisibility = columnLevel === columnMembers.length;\n        columnPath = createPath(columnMembers);\n        columnPathFormatted = getFormattedValue(columnMembers, columnFields);\n        if (0 === columnPath.length) {\n          columnPathFormatted = [mapOptions.grandTotalText];\n        }\n        callBack();\n      });\n    });\n  }\n  function foreachDataField(callback) {\n    each(dataFields, function (index, field) {\n      dataField = field;\n      measureIndex = index;\n      callback();\n    });\n  }\n  if (false === mapOptions.alternateDataFields) {\n    foreachDataField(function () {\n      foreachRowColumn(createDataItem);\n    });\n  } else {\n    foreachRowColumn(function () {\n      foreachDataField(createDataItem);\n    });\n  }\n  return dataSource;\n}\nfunction createValueAxisOptions(dataSource, options) {\n  var dataFields = dataSource.getAreaFields(\"data\");\n  if (\"args\" !== options.putDataFieldsInto && \"singleAxis\" !== options.dataFieldsDisplayMode || 1 === dataFields.length) {\n    var valueAxisSettings = [];\n    each(dataFields, function (_, dataField) {\n      var valueAxisOptions = {\n        name: dataField.caption,\n        title: dataField.caption,\n        valueType: FORMAT_DICTIONARY[dataField.dataType] || dataField.dataType,\n        label: {\n          format: dataField.format\n        }\n      };\n      if (dataField.customizeText) {\n        valueAxisOptions.label.customizeText = function (formatObject) {\n          return dataField.customizeText.call(dataField, formatObject);\n        };\n      }\n      if (\"splitPanes\" === options.dataFieldsDisplayMode) {\n        valueAxisOptions.pane = dataField.caption;\n      }\n      valueAxisSettings.push(valueAxisOptions);\n    });\n    return valueAxisSettings;\n  }\n  return [{}];\n}\nfunction createPanesOptions(dataSource, options) {\n  var panes = [];\n  var dataFields = dataSource.getAreaFields(\"data\");\n  if (dataFields.length > 1 && \"splitPanes\" === options.dataFieldsDisplayMode && \"args\" !== options.putDataFieldsInto) {\n    each(dataFields, function (_, dataField) {\n      panes.push({\n        name: dataField.caption\n      });\n    });\n  }\n  if (!panes.length) {\n    panes.push({});\n  }\n  return panes;\n}\nfunction createChartOptions(dataSource, options) {\n  var _customizeSeries = options.customizeSeries;\n  var customizeChart = options.customizeChart;\n  var chartOptions = {\n    valueAxis: createValueAxisOptions(dataSource, options),\n    panes: createPanesOptions(dataSource, options)\n  };\n  var axisDictionary = {};\n  if (customizeChart) {\n    chartOptions = extend(true, {}, chartOptions, customizeChart(chartOptions));\n  }\n  chartOptions.dataSource = createChartDataSource(dataSource, options, axisDictionary);\n  chartOptions.seriesTemplate = {\n    nameField: \"series\",\n    customizeSeries: function customizeSeries(seriesName) {\n      var seriesOptions = {};\n      if (\"splitPanes\" === options.dataFieldsDisplayMode) {\n        seriesOptions.pane = axisDictionary[seriesName];\n      } else if (\"singleAxis\" !== options.dataFieldsDisplayMode) {\n        seriesOptions.axis = axisDictionary[seriesName];\n      }\n      if (_customizeSeries) {\n        seriesOptions = extend(seriesOptions, _customizeSeries(seriesName, seriesOptions));\n      }\n      return seriesOptions;\n    }\n  };\n  return chartOptions;\n}\nfunction getChartInstance(chartElement) {\n  if (!chartElement) {\n    return false;\n  }\n  if (chartElement.NAME) {\n    return \"dxChart\" === chartElement.NAME && chartElement;\n  }\n  var element = $(chartElement);\n  return element.data(\"dxChart\") && element.dxChart(\"instance\");\n}\nfunction removeBinding(chart) {\n  var unbind = chart.$element().data(UNBIND_KEY);\n  unbind && unbind();\n}\nexport default {\n  bindChart: function bindChart(chart, integrationOptions) {\n    integrationOptions = extend({}, integrationOptions);\n    var that = this;\n    var updateChart = function updateChart() {\n      integrationOptions.grandTotalText = that.option(\"texts.grandTotal\");\n      var chartOptions = createChartOptions(that.getDataSource(), integrationOptions);\n      chart.option(chartOptions);\n    };\n    chart = getChartInstance(chart);\n    if (!chart) {\n      return null;\n    }\n    removeBinding(chart);\n    that.on(\"changed\", updateChart);\n    updateChart();\n    var disposeBinding = function disposeBinding() {\n      chart.$element().removeData(UNBIND_KEY);\n      that.off(\"changed\", updateChart);\n    };\n    chart.on(\"disposing\", disposeBinding);\n    this.on(\"disposing\", disposeBinding);\n    chart.$element().data(UNBIND_KEY, disposeBinding);\n    return disposeBinding;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}