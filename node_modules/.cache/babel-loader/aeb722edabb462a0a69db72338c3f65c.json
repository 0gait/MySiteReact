{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n/**\r\n * DevExtreme (esm/ui/scheduler/appointments/dataProvider/appointmentDataSource.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { Deferred } from \"../../../../core/utils/deferred\";\nvar STORE_EVENTS = {\n  updating: \"updating\",\n  push: \"push\"\n};\nexport var AppointmentDataSource = /*#__PURE__*/function () {\n  function AppointmentDataSource(dataSource) {\n    _classCallCheck(this, AppointmentDataSource);\n    this.setDataSource(dataSource);\n    this._updatedAppointmentKeys = [];\n  }\n  _createClass(AppointmentDataSource, [{\n    key: \"_getStoreKey\",\n    value: function _getStoreKey(target) {\n      var store = this._dataSource.store();\n      return store.keyOf(target);\n    }\n  }, {\n    key: \"setDataSource\",\n    value: function setDataSource(dataSource) {\n      this._dataSource = dataSource;\n      this.cleanState();\n      this._initStoreChangeHandlers();\n    }\n  }, {\n    key: \"_initStoreChangeHandlers\",\n    value: function _initStoreChangeHandlers() {\n      var _this = this;\n      var dataSource = this._dataSource;\n      var store = null === dataSource || void 0 === dataSource ? void 0 : dataSource.store();\n      if (store) {\n        store.on(STORE_EVENTS.updating, function (key) {\n          var keyName = store.key();\n          if (keyName) {\n            _this._updatedAppointmentKeys.push({\n              key: keyName,\n              value: key\n            });\n          } else {\n            _this._updatedAppointment = key;\n          }\n        });\n        store.on(STORE_EVENTS.push, function (pushItems) {\n          var items = dataSource.items();\n          var keyName = store.key();\n          pushItems.forEach(function (pushItem) {\n            var itemExists = 0 !== items.filter(function (item) {\n              return item[keyName] === pushItem.key;\n            }).length;\n            if (itemExists) {\n              _this._updatedAppointmentKeys.push({\n                key: keyName,\n                value: pushItem.key\n              });\n            } else {\n              var data = pushItem.data;\n              data && items.push(data);\n            }\n          });\n          dataSource.load();\n        });\n      }\n    }\n  }, {\n    key: \"getUpdatedAppointment\",\n    value: function getUpdatedAppointment() {\n      return this._updatedAppointment;\n    }\n  }, {\n    key: \"getUpdatedAppointmentKeys\",\n    value: function getUpdatedAppointmentKeys() {\n      return this._updatedAppointmentKeys;\n    }\n  }, {\n    key: \"cleanState\",\n    value: function cleanState() {\n      this._updatedAppointment = null;\n      this._updatedAppointmentKeys = [];\n    }\n  }, {\n    key: \"add\",\n    value: function add(rawAppointment) {\n      var _this2 = this;\n      return this._dataSource.store().insert(rawAppointment).done(function () {\n        return _this2._dataSource.load();\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(target, data) {\n      var _this3 = this;\n      var key = this._getStoreKey(target);\n      var d = new Deferred();\n      this._dataSource.store().update(key, data).done(function (result) {\n        return _this3._dataSource.load().done(function () {\n          return d.resolve(result);\n        }).fail(d.reject);\n      }).fail(d.reject);\n      return d.promise();\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(rawAppointment) {\n      var _this4 = this;\n      var key = this._getStoreKey(rawAppointment);\n      return this._dataSource.store().remove(key).done(function () {\n        return _this4._dataSource.load();\n      });\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this$_dataSource;\n      var store = null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.store();\n      if (store) {\n        store.off(STORE_EVENTS.updating);\n        store.off(STORE_EVENTS.push);\n      }\n    }\n  }, {\n    key: \"keyName\",\n    get: function get() {\n      var store = this._dataSource.store();\n      return store.key();\n    }\n  }]);\n  return AppointmentDataSource;\n}();","map":null,"metadata":{},"sourceType":"module"}