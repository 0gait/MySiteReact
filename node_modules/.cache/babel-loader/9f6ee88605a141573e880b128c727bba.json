{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createStore = exports.Store = void 0;\nvar GlobalState_1 = require(\"./GlobalState\");\nvar useGlobalState_1 = require(\"./useGlobalState\");\nvar useGlobalStateReducer_1 = require(\"./useGlobalStateReducer\");\nvar notImplementedErrorMsg = [\"You must implement 'loadState' and 'saveState' to be able \", 'to save state to your preffered storage. E.g \\n', 'store.persist({ \\n', '    saveState: function(key, state, isInitialSet){/*logics to save state to storage*/}, \\n', '    loadState: function(key, noState){/*logics to load state from storage*/} \\n', '}) \\n'].join(\"\");\nvar Empty = /** @class */function () {\n  function Empty() {}\n  return Empty;\n}(); // Class for empty state/value\nvar EMPTY = new Empty();\nvar PersistentStorage = /** @class */function () {\n  function PersistentStorage() {\n    this.SHOULD_PERSIST_BY_DEFAULT = false;\n  }\n  PersistentStorage.prototype.loadState = function (key, noState) {\n    throw TypeError(notImplementedErrorMsg);\n  };\n  PersistentStorage.prototype.saveState = function (key, state, isInitialSet) {\n    throw TypeError(notImplementedErrorMsg);\n  };\n  return PersistentStorage;\n}();\nvar Store = /** @class */function () {\n  function Store() {\n    this.states = new Map();\n    this.subscribers = [];\n    this.persistentStorage = new PersistentStorage();\n  }\n  Store.prototype.subscribe = function (observer) {\n    var _this = this;\n    if (this.subscribers.indexOf(observer) === -1) {\n      // Subscribe a component to this store\n      this.subscribers.push(observer);\n    }\n    var unsubscribe = function unsubscribe() {\n      _this.subscribers = _this.subscribers.filter(function (subscriber) {\n        return subscriber !== observer;\n      });\n    };\n    return unsubscribe;\n  };\n  Store.prototype.onStoreUpdate = function (key, value) {\n    this.subscribers.forEach(function (subscriber) {\n      subscriber(key, value);\n    });\n  };\n  Store.prototype.persist = function (config) {\n    if (config.saveState) {\n      this.persistentStorage.saveState = config.saveState;\n    }\n    if (config.loadState) {\n      this.persistentStorage.loadState = config.loadState;\n    }\n    if (config.removeState) {\n      this.persistentStorage.removeState = config.removeState;\n    }\n    if (config.clear) {\n      this.persistentStorage.clear = config.clear;\n    }\n    if (config.PERSIST_ENTIRE_STORE) {\n      this.persistentStorage.SHOULD_PERSIST_BY_DEFAULT = config.PERSIST_ENTIRE_STORE;\n    }\n  };\n  Store.prototype.setState = function (key, initialValue, _a) {\n    var _this = this;\n    var _b = _a === void 0 ? {} : _a,\n      persist = _b.persist;\n    var shouldPersist = persist === undefined ? this.persistentStorage.SHOULD_PERSIST_BY_DEFAULT : persist;\n    if (shouldPersist) {\n      // Load state from localStorage\n      var savedState = this.persistentStorage.loadState(key, EMPTY);\n      if (savedState !== EMPTY) {\n        // Use savedState as the initialValue\n        initialValue = savedState;\n      } else {\n        // This is the initial set\n        this.persistentStorage.saveState(key, initialValue, true);\n      }\n    }\n    var onGlobalStateChange = function onGlobalStateChange(newValue) {\n      // Note key & persist variables depends on scope\n      _this.onStoreUpdate(key, newValue);\n      if (shouldPersist) {\n        _this.persistentStorage.saveState(key, newValue, false);\n      }\n    };\n    // Create global state\n    var globalState = (0, GlobalState_1.createGlobalstate)(initialValue);\n    var unsubscribe = globalState.subscribe({\n      observer: onGlobalStateChange,\n      selector: function selector(state) {\n        return state;\n      }\n    });\n    var state = {\n      \"state\": globalState,\n      \"unsubscribe\": unsubscribe,\n      \"persist\": shouldPersist\n    };\n    // Add global state to the store\n    this.states.set(key, state);\n  };\n  Store.prototype.getState = function (key, config) {\n    if (config === void 0) {\n      config = {\n        default: EMPTY\n      };\n    }\n    var defaultValue = config.default;\n    // Get key based global state\n    if (!this.states.has(key)) {\n      // Global state is not found\n      if (defaultValue !== EMPTY) {\n        // Default value is found\n        // Create a global state and use defaultValue as the initial value\n        this.setState(key, defaultValue, {\n          persist: config.persist\n        });\n      } else {\n        // Global state is not found and the default value is not specified\n        var errorMsg = [\"There is no global state with the key '\".concat(key, \"', \"), \"You are either trying to access a global \", \"state which was not created or it was deleted.\"];\n        throw Error(errorMsg.join(\"\"));\n      }\n    }\n    return this.states.get(key).state;\n  };\n  Store.prototype.clear = function (fn) {\n    var _this = this;\n    // Copy store\n    var storeCopy = this.states;\n    // Clear store\n    this.states = new Map();\n    if (this.persistentStorage.clear) {\n      this.persistentStorage.clear();\n    }\n    if (fn) {\n      // Run store re-initialization\n      fn();\n    }\n    storeCopy.forEach(function (oldState, key) {\n      // Unsubscribe from an old state \n      oldState.unsubscribe();\n      // Notify subscribers to a store that a global state has been removed\n      if (_this.states.has(key)) {\n        var newGlobalState = _this.getState(key);\n        _this.onStoreUpdate(key, newGlobalState.getValue());\n      }\n      // Rerender all components using this global state\n      oldState.state.refresh();\n    });\n  };\n  Store.prototype.remove = function (globalStatekey, fn) {\n    var _this = this;\n    var keys = [];\n    if (typeof globalStatekey === 'string') {\n      keys = [globalStatekey];\n    } else {\n      keys = globalStatekey;\n    }\n    var globalStatesToRemove = new Map();\n    keys.forEach(function (key) {\n      // Copy global state to remove from a store\n      globalStatesToRemove.set(key, _this.states.get(key));\n      // Remove global state from a store\n      _this.states.delete(key);\n      if (globalStatesToRemove.get(key).persist &&\n      // Is state persisted\n      _this.persistentStorage.removeState &&\n      // Is removeState Implemented\n      _this.persistentStorage.loadState(key, EMPTY) !== EMPTY // Is state to remove available\n      ) {\n        _this.persistentStorage.removeState(key);\n      }\n    });\n    if (fn) {\n      // Run global state re-initialization\n      fn();\n    }\n    globalStatesToRemove.forEach(function (oldState, key) {\n      // Unsubscribe from an old state \n      oldState.unsubscribe();\n      // Notify subscribers to a store that a global state has been removed\n      if (_this.states.has(key)) {\n        var newGlobalState = _this.getState(key);\n        _this.onStoreUpdate(key, newGlobalState.getValue());\n      }\n      // Rerender all components depending on this global state\n      oldState.state.refresh();\n    });\n  };\n  Store.prototype.useState = function (key, config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var globalState = this.getState(key, config);\n    return (0, useGlobalState_1.useGlobalState)(globalState, config);\n  };\n  Store.prototype.useReducer = function (reducer, key, config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var globalState = this.getState(key, config);\n    return (0, useGlobalStateReducer_1.useGlobalStateReducer)(reducer, globalState, config);\n  };\n  return Store;\n}();\nexports.Store = Store;\nfunction createStore() {\n  // Create a store for key based global state\n  return new Store();\n}\nexports.createStore = createStore;","map":null,"metadata":{},"sourceType":"script"}