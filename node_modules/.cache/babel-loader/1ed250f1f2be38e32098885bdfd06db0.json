{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.filter_row.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getOuterWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { normalizeKeyName } from \"../../events/utils/index\";\nimport { each, map } from \"../../core/utils/iterator\";\nimport modules from \"./ui.grid_core.modules\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport messageLocalization from \"../../localization/message\";\nimport Editor from \"../editor/editor\";\nimport Overlay from \"../overlay/ui.overlay\";\nimport Menu from \"../menu\";\nimport { selectView } from \"../shared/accessibility\";\nimport { equalByValue } from \"../../core/utils/common\";\nvar OPERATION_ICONS = {\n  \"=\": \"filter-operation-equals\",\n  \"<>\": \"filter-operation-not-equals\",\n  \"<\": \"filter-operation-less\",\n  \"<=\": \"filter-operation-less-equal\",\n  \">\": \"filter-operation-greater\",\n  \">=\": \"filter-operation-greater-equal\",\n  default: \"filter-operation-default\",\n  notcontains: \"filter-operation-not-contains\",\n  contains: \"filter-operation-contains\",\n  startswith: \"filter-operation-starts-with\",\n  endswith: \"filter-operation-ends-with\",\n  between: \"filter-operation-between\"\n};\nvar OPERATION_DESCRIPTORS = {\n  \"=\": \"equal\",\n  \"<>\": \"notEqual\",\n  \"<\": \"lessThan\",\n  \"<=\": \"lessThanOrEqual\",\n  \">\": \"greaterThan\",\n  \">=\": \"greaterThanOrEqual\",\n  startswith: \"startsWith\",\n  contains: \"contains\",\n  notcontains: \"notContains\",\n  endswith: \"endsWith\",\n  between: \"between\"\n};\nvar FILTERING_TIMEOUT = 700;\nvar CORRECT_FILTER_RANGE_OVERLAY_WIDTH = 1;\nvar FILTER_ROW_CLASS = \"filter-row\";\nvar FILTER_RANGE_OVERLAY_CLASS = \"filter-range-overlay\";\nvar FILTER_RANGE_START_CLASS = \"filter-range-start\";\nvar FILTER_RANGE_END_CLASS = \"filter-range-end\";\nvar MENU_CLASS = \"dx-menu\";\nvar EDITOR_WITH_MENU_CLASS = \"dx-editor-with-menu\";\nvar EDITOR_CONTAINER_CLASS = \"dx-editor-container\";\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\nvar FILTER_MENU = \"dx-filter-menu\";\nvar APPLY_BUTTON_CLASS = \"dx-apply-button\";\nvar HIGHLIGHT_OUTLINE_CLASS = \"dx-highlight-outline\";\nvar FOCUSED_CLASS = \"dx-focused\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar FILTER_RANGE_CONTENT_CLASS = \"dx-filter-range-content\";\nvar FILTER_MODIFIED_CLASS = \"dx-filter-modified\";\nvar EDITORS_INPUT_SELECTOR = \"input:not([type='hidden'])\";\nvar BETWEEN_OPERATION_DATA_TYPES = [\"date\", \"datetime\", \"number\"];\nfunction isOnClickApplyFilterMode(that) {\n  return \"onClick\" === that.option(\"filterRow.applyFilter\");\n}\nvar getEditorInstance = function getEditorInstance($editorContainer) {\n  var $editor = $editorContainer && $editorContainer.children();\n  var componentNames = $editor && $editor.data(\"dxComponents\");\n  var editor = componentNames && componentNames.length && $editor.data(componentNames[0]);\n  if (editor instanceof Editor) {\n    return editor;\n  }\n};\nvar ColumnHeadersViewFilterRowExtender = function () {\n  var getRangeTextByFilterValue = function getRangeTextByFilterValue(that, column) {\n    var result = \"\";\n    var rangeEnd = \"\";\n    var filterValue = getColumnFilterValue(that, column);\n    var formatOptions = gridCoreUtils.getFormatOptionsByColumn(column, \"filterRow\");\n    if (Array.isArray(filterValue)) {\n      result = gridCoreUtils.formatValue(filterValue[0], formatOptions);\n      rangeEnd = gridCoreUtils.formatValue(filterValue[1], formatOptions);\n      if (\"\" !== rangeEnd) {\n        result += \" - \" + rangeEnd;\n      }\n    } else if (isDefined(filterValue)) {\n      result = gridCoreUtils.formatValue(filterValue, formatOptions);\n    }\n    return result;\n  };\n  function getColumnFilterValue(that, column) {\n    if (column) {\n      return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedFilterValue ? column.bufferedFilterValue : column.filterValue;\n    }\n  }\n  var getColumnSelectedFilterOperation = function getColumnSelectedFilterOperation(that, column) {\n    if (column) {\n      return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedSelectedFilterOperation ? column.bufferedSelectedFilterOperation : column.selectedFilterOperation;\n    }\n  };\n  var getFilterValue = function getFilterValue(that, columnIndex, $editorContainer) {\n    var column = that._columnsController.columnOption(columnIndex);\n    var filterValue = getColumnFilterValue(that, column);\n    var isFilterRange = $editorContainer.closest(\".\" + that.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)).length;\n    var isRangeStart = $editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS));\n    if (filterValue && Array.isArray(filterValue) && \"between\" === getColumnSelectedFilterOperation(that, column)) {\n      if (isRangeStart) {\n        return filterValue[0];\n      } else {\n        return filterValue[1];\n      }\n    }\n    return !isFilterRange && function (filterValue, column) {\n      if (column && BETWEEN_OPERATION_DATA_TYPES.indexOf(column.dataType) >= 0 && Array.isArray(filterValue)) {\n        return false;\n      }\n      return void 0 !== filterValue;\n    }(filterValue, column) ? filterValue : null;\n  };\n  var updateFilterValue = function updateFilterValue(that, options) {\n    var value = \"\" === options.value ? null : options.value;\n    var $editorContainer = options.container;\n    var column = that._columnsController.columnOption(options.column.index);\n    var filterValue = getFilterValue(that, column.index, $editorContainer);\n    if (!isDefined(filterValue) && !isDefined(value)) {\n      return;\n    }\n    that._applyFilterViewController.setHighLight($editorContainer, filterValue !== value);\n    var columnOptionName = isOnClickApplyFilterMode(that) ? \"bufferedFilterValue\" : \"filterValue\";\n    var normalizedValue = function (that, filterValue, column, $editorContainer) {\n      if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\n        var columnFilterValue = getColumnFilterValue(that, column);\n        if ($editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS))) {\n          return [filterValue, Array.isArray(columnFilterValue) ? columnFilterValue[1] : void 0];\n        } else {\n          return [Array.isArray(columnFilterValue) ? columnFilterValue[0] : columnFilterValue, filterValue];\n        }\n      }\n      return filterValue;\n    }(that, value, column, $editorContainer);\n    var isBetween = \"between\" === getColumnSelectedFilterOperation(that, column);\n    var notFireEvent = options.notFireEvent || isBetween && Array.isArray(normalizedValue) && normalizedValue.indexOf(void 0) >= 0;\n    that._columnsController.columnOption(column.index, columnOptionName, normalizedValue, notFireEvent);\n  };\n  return {\n    _updateEditorValue: function _updateEditorValue(column, $editorContainer) {\n      var editor = getEditorInstance($editorContainer);\n      editor && editor.option(\"value\", getFilterValue(this, column.index, $editorContainer));\n    },\n    _columnOptionChanged: function _columnOptionChanged(e) {\n      var optionNames = e.optionNames;\n      var $cell;\n      var $editorContainer;\n      var $editorRangeElements;\n      var $menu;\n      if (gridCoreUtils.checkChanges(optionNames, [\"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"bufferedSelectedFilterOperation\", \"filterValues\", \"filterType\"]) && void 0 !== e.columnIndex) {\n        var visibleIndex = this._columnsController.getVisibleIndex(e.columnIndex);\n        var column = this._columnsController.columnOption(e.columnIndex);\n        $cell = this._getCellElement(this.element().find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS)).index(), visibleIndex) || $();\n        $editorContainer = $cell.find(\".\" + EDITOR_CONTAINER_CLASS).first();\n        if (optionNames.filterValue || optionNames.bufferedFilterValue) {\n          this._updateEditorValue(column, $editorContainer);\n          var overlayInstance = $cell.find(\".\" + this.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)).data(\"dxOverlay\");\n          if (overlayInstance) {\n            $editorRangeElements = overlayInstance.$content().find(\".\" + EDITOR_CONTAINER_CLASS);\n            this._updateEditorValue(column, $editorRangeElements.first());\n            this._updateEditorValue(column, $editorRangeElements.last());\n          }\n          if (!overlayInstance || !overlayInstance.option(\"visible\")) {\n            this._updateFilterRangeContent($cell, getRangeTextByFilterValue(this, column));\n          }\n        }\n        if (optionNames.selectedFilterOperation || optionNames.bufferedSelectedFilterOperation) {\n          if (visibleIndex >= 0 && column) {\n            $menu = $cell.find(\".\" + MENU_CLASS);\n            if ($menu.length) {\n              this._updateFilterOperationChooser($menu, column, $editorContainer);\n              if (\"between\" === getColumnSelectedFilterOperation(this, column)) {\n                this._renderFilterRangeContent($cell, column);\n              } else if ($editorContainer.find(\".\" + FILTER_RANGE_CONTENT_CLASS).length) {\n                this._renderEditor($editorContainer, this._getEditorOptions($editorContainer, column));\n                this._hideFilterRange();\n              }\n            }\n          }\n        }\n        return;\n      }\n      this.callBase(e);\n    },\n    _renderCore: function _renderCore() {\n      this._filterRangeOverlayInstance = null;\n      return this.callBase.apply(this, arguments);\n    },\n    _resizeCore: function _resizeCore() {\n      this.callBase.apply(this, arguments);\n      this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.repaint();\n    },\n    isFilterRowVisible: function isFilterRowVisible() {\n      return this._isElementVisible(this.option(\"filterRow\"));\n    },\n    isVisible: function isVisible() {\n      return this.callBase() || this.isFilterRowVisible();\n    },\n    init: function init() {\n      this.callBase();\n      this._applyFilterViewController = this.getController(\"applyFilter\");\n    },\n    _initFilterRangeOverlay: function _initFilterRangeOverlay($cell, column) {\n      var that = this;\n      var sharedData = {};\n      var $editorContainer = $cell.find(\".dx-editor-container\");\n      var $overlay = $(\"<div>\").addClass(that.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)).appendTo($cell);\n      return that._createComponent($overlay, Overlay, {\n        height: \"auto\",\n        shading: false,\n        showTitle: false,\n        focusStateEnabled: false,\n        hideOnOutsideClick: true,\n        copyRootClassesToWrapper: true,\n        _ignoreCopyRootClassesToWrapperDeprecation: true,\n        animation: false,\n        position: {\n          my: \"top\",\n          at: \"top\",\n          of: $editorContainer.length && $editorContainer || $cell,\n          offset: \"0 -1\"\n        },\n        contentTemplate: function contentTemplate(contentElement) {\n          var editorOptions;\n          var $editor = $(\"<div>\").addClass(EDITOR_CONTAINER_CLASS + \" \" + that.addWidgetPrefix(FILTER_RANGE_START_CLASS)).appendTo(contentElement);\n          column = that._columnsController.columnOption(column.index);\n          editorOptions = that._getEditorOptions($editor, column);\n          editorOptions.sharedData = sharedData;\n          that._renderEditor($editor, editorOptions);\n          eventsEngine.on($editor.find(EDITORS_INPUT_SELECTOR), \"keydown\", function (e) {\n            var $prevElement = $cell.find(\"[tabindex]\").not(e.target).first();\n            if (\"tab\" === normalizeKeyName(e) && e.shiftKey) {\n              e.preventDefault();\n              that._hideFilterRange();\n              if (!$prevElement.length) {\n                $prevElement = $cell.prev().find(\"[tabindex]\").last();\n              }\n              eventsEngine.trigger($prevElement, \"focus\");\n            }\n          });\n          $editor = $(\"<div>\").addClass(EDITOR_CONTAINER_CLASS + \" \" + that.addWidgetPrefix(FILTER_RANGE_END_CLASS)).appendTo(contentElement);\n          editorOptions = that._getEditorOptions($editor, column);\n          editorOptions.sharedData = sharedData;\n          that._renderEditor($editor, editorOptions);\n          eventsEngine.on($editor.find(EDITORS_INPUT_SELECTOR), \"keydown\", function (e) {\n            if (\"tab\" === normalizeKeyName(e) && !e.shiftKey) {\n              e.preventDefault();\n              that._hideFilterRange();\n              eventsEngine.trigger($cell.next().find(\"[tabindex]\").first(), \"focus\");\n            }\n          });\n          return $(contentElement).addClass(that.getWidgetContainerClass());\n        },\n        onShown: function onShown(e) {\n          var $editor = e.component.$content().find(\".\" + EDITOR_CONTAINER_CLASS).first();\n          eventsEngine.trigger($editor.find(EDITORS_INPUT_SELECTOR), \"focus\");\n        },\n        onHidden: function onHidden() {\n          column = that._columnsController.columnOption(column.index);\n          $cell.find(\".\" + MENU_CLASS).parent().addClass(EDITOR_WITH_MENU_CLASS);\n          if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\n            that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column));\n            that.component.updateDimensions();\n          }\n        }\n      });\n    },\n    _updateFilterRangeOverlay: function _updateFilterRangeOverlay(options) {\n      var overlayInstance = this._filterRangeOverlayInstance;\n      overlayInstance && overlayInstance.option(options);\n    },\n    _showFilterRange: function _showFilterRange($cell, column) {\n      var $overlay = $cell.children(\".\" + this.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS));\n      var overlayInstance = $overlay.length && $overlay.data(\"dxOverlay\");\n      if (!overlayInstance && column) {\n        overlayInstance = this._initFilterRangeOverlay($cell, column);\n      }\n      if (!overlayInstance.option(\"visible\")) {\n        this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.hide();\n        this._filterRangeOverlayInstance = overlayInstance;\n        this._updateFilterRangeOverlay({\n          width: getOuterWidth($cell, true) + CORRECT_FILTER_RANGE_OVERLAY_WIDTH\n        });\n        this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.show();\n      }\n    },\n    _hideFilterRange: function _hideFilterRange() {\n      var overlayInstance = this._filterRangeOverlayInstance;\n      overlayInstance && overlayInstance.hide();\n    },\n    getFilterRangeOverlayInstance: function getFilterRangeOverlayInstance() {\n      return this._filterRangeOverlayInstance;\n    },\n    _createRow: function _createRow(row) {\n      var _this = this;\n      var $row = this.callBase(row);\n      if (\"filter\" === row.rowType) {\n        $row.addClass(this.addWidgetPrefix(FILTER_ROW_CLASS));\n        if (!this.option(\"useLegacyKeyboardNavigation\")) {\n          eventsEngine.on($row, \"keydown\", function (event) {\n            return selectView(\"filterRow\", _this, event);\n          });\n        }\n      }\n      return $row;\n    },\n    _getRows: function _getRows() {\n      var result = this.callBase();\n      if (this.isFilterRowVisible()) {\n        result.push({\n          rowType: \"filter\"\n        });\n      }\n      return result;\n    },\n    _renderFilterCell: function _renderFilterCell(cell, options) {\n      var column = options.column;\n      var $cell = $(cell);\n      if (this.component.option(\"showColumnHeaders\")) {\n        this.setAria(\"describedby\", column.headerId, $cell);\n      }\n      this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaFilterCell\"), $cell);\n      $cell.addClass(EDITOR_CELL_CLASS);\n      var $container = $(\"<div>\").appendTo($cell);\n      var $editorContainer = $(\"<div>\").addClass(EDITOR_CONTAINER_CLASS).appendTo($container);\n      if (\"between\" === getColumnSelectedFilterOperation(this, column)) {\n        this._renderFilterRangeContent($cell, column);\n      } else {\n        var editorOptions = this._getEditorOptions($editorContainer, column);\n        this._renderEditor($editorContainer, editorOptions);\n      }\n      var alignment = column.alignment;\n      if (alignment && \"center\" !== alignment) {\n        $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", column.alignment);\n      }\n      if (column.filterOperations && column.filterOperations.length) {\n        this._renderFilterOperationChooser($container, column, $editorContainer);\n      }\n    },\n    _renderCellContent: function _renderCellContent($cell, options) {\n      var that = this;\n      var column = options.column;\n      if (\"filter\" === options.rowType) {\n        if (column.command) {\n          $cell.html(\"&nbsp;\");\n        } else if (column.allowFiltering) {\n          that.renderTemplate($cell, that._renderFilterCell.bind(that), options).done(function () {\n            that._updateCell($cell, options);\n          });\n          return;\n        }\n      }\n      this.callBase.apply(this, arguments);\n    },\n    _getEditorOptions: function _getEditorOptions($editorContainer, column) {\n      var that = this;\n      var accessibilityOptions = {\n        editorOptions: {\n          inputAttr: that._getFilterInputAccessibilityAttributes(column)\n        }\n      };\n      var result = extend(accessibilityOptions, column, {\n        value: getFilterValue(that, column.index, $editorContainer),\n        parentType: \"filterRow\",\n        showAllText: that.option(\"filterRow.showAllText\"),\n        updateValueTimeout: \"onClick\" === that.option(\"filterRow.applyFilter\") ? 0 : FILTERING_TIMEOUT,\n        width: null,\n        setValue: function setValue(value, notFireEvent) {\n          updateFilterValue(that, {\n            column: column,\n            value: value,\n            container: $editorContainer,\n            notFireEvent: notFireEvent\n          });\n        }\n      });\n      if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\n        if ($editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS))) {\n          result.placeholder = that.option(\"filterRow.betweenStartText\");\n        } else {\n          result.placeholder = that.option(\"filterRow.betweenEndText\");\n        }\n      }\n      return result;\n    },\n    _getFilterInputAccessibilityAttributes: function _getFilterInputAccessibilityAttributes(column) {\n      var columnAriaLabel = messageLocalization.format(\"dxDataGrid-ariaFilterCell\");\n      if (this.component.option(\"showColumnHeaders\")) {\n        return {\n          \"aria-label\": columnAriaLabel,\n          \"aria-describedby\": column.headerId\n        };\n      }\n      return {\n        \"aria-label\": columnAriaLabel\n      };\n    },\n    _renderEditor: function _renderEditor($editorContainer, options) {\n      $editorContainer.empty();\n      var $element = $(\"<div>\").appendTo($editorContainer);\n      var editorController = this.getController(\"editorFactory\");\n      var dataSource = this.getController(\"data\").dataSource();\n      var filterRowController = this.getController(\"applyFilter\");\n      if (options.lookup && this.option(\"syncLookupFilterValues\")) {\n        filterRowController.setCurrentColumnForFiltering(options);\n        var filter = this.getController(\"data\").getCombinedFilter();\n        filterRowController.setCurrentColumnForFiltering(null);\n        var lookupDataSource = gridCoreUtils.getWrappedLookupDataSource(options, dataSource, filter);\n        var lookupOptions = _extends({}, options, {\n          lookup: _extends({}, options.lookup, {\n            dataSource: lookupDataSource\n          })\n        });\n        return editorController.createEditor($element, lookupOptions);\n      } else {\n        return editorController.createEditor($element, options);\n      }\n    },\n    _renderFilterRangeContent: function _renderFilterRangeContent($cell, column) {\n      var that = this;\n      var $editorContainer = $cell.find(\".\" + EDITOR_CONTAINER_CLASS).first();\n      $editorContainer.empty();\n      var $filterRangeContent = $(\"<div>\").addClass(FILTER_RANGE_CONTENT_CLASS).attr(\"tabindex\", this.option(\"tabIndex\"));\n      eventsEngine.on($filterRangeContent, \"focusin\", function () {\n        that._showFilterRange($cell, column);\n      });\n      $filterRangeContent.appendTo($editorContainer);\n      that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column));\n    },\n    _updateFilterRangeContent: function _updateFilterRangeContent($cell, value) {\n      var $filterRangeContent = $cell.find(\".\" + FILTER_RANGE_CONTENT_CLASS);\n      if ($filterRangeContent.length) {\n        if (\"\" === value) {\n          $filterRangeContent.html(\"&nbsp;\");\n        } else {\n          $filterRangeContent.text(value);\n        }\n      }\n    },\n    _updateFilterOperationChooser: function _updateFilterOperationChooser($menu, column, $editorContainer) {\n      var that = this;\n      var isCellWasFocused;\n      var restoreFocus = function restoreFocus() {\n        var menu = Menu.getInstance($menu);\n        menu && menu.option(\"focusedElement\", null);\n        isCellWasFocused && that._focusEditor($editorContainer);\n      };\n      that._createComponent($menu, Menu, {\n        integrationOptions: {},\n        activeStateEnabled: false,\n        selectionMode: \"single\",\n        cssClass: that.getWidgetContainerClass() + \" \" + CELL_FOCUS_DISABLED_CLASS + \" \" + FILTER_MENU,\n        showFirstSubmenuMode: \"onHover\",\n        hideSubmenuOnMouseLeave: true,\n        items: [{\n          disabled: column.filterOperations && column.filterOperations.length ? false : true,\n          icon: OPERATION_ICONS[getColumnSelectedFilterOperation(that, column) || \"default\"],\n          selectable: false,\n          items: that._getFilterOperationMenuItems(column)\n        }],\n        onItemClick: function onItemClick(properties) {\n          var selectedFilterOperation = properties.itemData.name;\n          var columnSelectedFilterOperation = getColumnSelectedFilterOperation(that, column);\n          var notFocusEditor = false;\n          var isOnClickMode = isOnClickApplyFilterMode(that);\n          var options = {};\n          if (properties.itemData.items || selectedFilterOperation && selectedFilterOperation === columnSelectedFilterOperation) {\n            return;\n          }\n          if (selectedFilterOperation) {\n            options[isOnClickMode ? \"bufferedSelectedFilterOperation\" : \"selectedFilterOperation\"] = selectedFilterOperation;\n            if (\"between\" === selectedFilterOperation || \"between\" === columnSelectedFilterOperation) {\n              notFocusEditor = \"between\" === selectedFilterOperation;\n              options[isOnClickMode ? \"bufferedFilterValue\" : \"filterValue\"] = null;\n            }\n          } else {\n            options[isOnClickMode ? \"bufferedFilterValue\" : \"filterValue\"] = null;\n            options[isOnClickMode ? \"bufferedSelectedFilterOperation\" : \"selectedFilterOperation\"] = column.defaultSelectedFilterOperation || null;\n          }\n          that._columnsController.columnOption(column.index, options);\n          that._applyFilterViewController.setHighLight($editorContainer, true);\n          if (!selectedFilterOperation) {\n            var editor = getEditorInstance($editorContainer);\n            if (editor && \"dxDateBox\" === editor.NAME && !editor.option(\"isValid\")) {\n              editor.reset();\n              editor.option(\"isValid\", true);\n            }\n          }\n          if (!notFocusEditor) {\n            that._focusEditor($editorContainer);\n          } else {\n            that._showFilterRange($editorContainer.closest(\".\" + EDITOR_CELL_CLASS), column);\n          }\n        },\n        onSubmenuShowing: function onSubmenuShowing() {\n          isCellWasFocused = that._isEditorFocused($editorContainer);\n          that.getController(\"editorFactory\").loseFocus();\n        },\n        onSubmenuHiding: function onSubmenuHiding() {\n          eventsEngine.trigger($menu, \"blur\");\n          restoreFocus();\n        },\n        onContentReady: function onContentReady(e) {\n          eventsEngine.on($menu, \"blur\", function () {\n            var menu = e.component;\n            menu._hideSubmenuAfterTimeout();\n            restoreFocus();\n          });\n        },\n        rtlEnabled: that.option(\"rtlEnabled\")\n      });\n    },\n    _isEditorFocused: function _isEditorFocused($container) {\n      return $container.hasClass(FOCUSED_CLASS) || $container.parents(\".\" + FOCUSED_CLASS).length;\n    },\n    _focusEditor: function _focusEditor($container) {\n      this.getController(\"editorFactory\").focus($container);\n      eventsEngine.trigger($container.find(EDITORS_INPUT_SELECTOR), \"focus\");\n    },\n    _renderFilterOperationChooser: function _renderFilterOperationChooser($container, column, $editorContainer) {\n      var $menu;\n      if (this.option(\"filterRow.showOperationChooser\")) {\n        $container.addClass(EDITOR_WITH_MENU_CLASS);\n        $menu = $(\"<div>\").prependTo($container);\n        this._updateFilterOperationChooser($menu, column, $editorContainer);\n      }\n    },\n    _getFilterOperationMenuItems: function _getFilterOperationMenuItems(column) {\n      var that = this;\n      var result = [{}];\n      var filterRowOptions = that.option(\"filterRow\");\n      var operationDescriptions = filterRowOptions && filterRowOptions.operationDescriptions || {};\n      if (column.filterOperations && column.filterOperations.length) {\n        var availableFilterOperations = column.filterOperations.filter(function (value) {\n          return isDefined(OPERATION_DESCRIPTORS[value]);\n        });\n        result = map(availableFilterOperations, function (value) {\n          var descriptionName = OPERATION_DESCRIPTORS[value];\n          return {\n            name: value,\n            selected: (getColumnSelectedFilterOperation(that, column) || column.defaultFilterOperation) === value,\n            text: operationDescriptions[descriptionName],\n            icon: OPERATION_ICONS[value]\n          };\n        });\n        result.push({\n          name: null,\n          text: filterRowOptions && filterRowOptions.resetOperationText,\n          icon: OPERATION_ICONS.default\n        });\n      }\n      return result;\n    },\n    _handleDataChanged: function _handleDataChanged(e) {\n      var _e$operationTypes, _e$operationTypes2;\n      this.callBase.apply(this, arguments);\n      if (null !== (_e$operationTypes = e.operationTypes) && void 0 !== _e$operationTypes && _e$operationTypes.filtering || null !== (_e$operationTypes2 = e.operationTypes) && void 0 !== _e$operationTypes2 && _e$operationTypes2.fullReload) {\n        var _e$operationTypes3;\n        this.updateLookupDataSource(null === (_e$operationTypes3 = e.operationTypes) || void 0 === _e$operationTypes3 ? void 0 : _e$operationTypes3.filtering);\n      }\n    },\n    updateLookupDataSource: function updateLookupDataSource(filterChanged) {\n      var _this2 = this;\n      if (!this.option(\"syncLookupFilterValues\")) {\n        return;\n      }\n      if (!this.element()) {\n        return;\n      }\n      var columns = this._columnsController.getVisibleColumns();\n      var dataSource = this._dataController.dataSource();\n      var applyFilterViewController = this._applyFilterViewController;\n      var rowIndex = this.element().find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS)).index();\n      if (-1 === rowIndex) {\n        return;\n      }\n      columns.forEach(function (column, index) {\n        if (!column.lookup || column.calculateCellValue !== column.defaultCalculateCellValue) {\n          return;\n        }\n        var $cell = _this2._getCellElement(rowIndex, index);\n        var editor = getEditorInstance(null === $cell || void 0 === $cell ? void 0 : $cell.find(\".dx-editor-container\"));\n        if (editor) {\n          applyFilterViewController.setCurrentColumnForFiltering(column);\n          var filter = _this2._dataController.getCombinedFilter() || null;\n          applyFilterViewController.setCurrentColumnForFiltering(null);\n          var editorDataSource = editor.option(\"dataSource\");\n          var shouldUpdateFilter = !filterChanged || !equalByValue(editorDataSource.__dataGridSourceFilter, filter);\n          if (shouldUpdateFilter) {\n            var lookupDataSource = gridCoreUtils.getWrappedLookupDataSource(column, dataSource, filter);\n            editor.option(\"dataSource\", lookupDataSource);\n          }\n        }\n      });\n    },\n    optionChanged: function optionChanged(args) {\n      switch (args.name) {\n        case \"filterRow\":\n        case \"showColumnLines\":\n          this._invalidate(true, true);\n          args.handled = true;\n          break;\n        case \"syncLookupFilterValues\":\n          if (args.value) {\n            this.updateLookupDataSource();\n          } else {\n            this.render();\n          }\n          args.handled = true;\n          break;\n        default:\n          this.callBase(args);\n      }\n    }\n  };\n}();\nvar DataControllerFilterRowExtender = {\n  skipCalculateColumnFilters: function skipCalculateColumnFilters() {\n    return false;\n  },\n  _calculateAdditionalFilter: function _calculateAdditionalFilter() {\n    if (this.skipCalculateColumnFilters()) {\n      return this.callBase();\n    }\n    var filters = [this.callBase()];\n    var columns = this._columnsController.getVisibleColumns(null, true);\n    var filterRowController = this.getController(\"applyFilter\");\n    each(columns, function () {\n      var _filterRowController$;\n      var shouldSkip = (null === (_filterRowController$ = filterRowController.getCurrentColumnForFiltering()) || void 0 === _filterRowController$ ? void 0 : _filterRowController$.index) === this.index;\n      if (this.allowFiltering && this.calculateFilterExpression && isDefined(this.filterValue) && !shouldSkip) {\n        var filter = this.createFilterExpression(this.filterValue, this.selectedFilterOperation || this.defaultFilterOperation, \"filterRow\");\n        filters.push(filter);\n      }\n    });\n    return gridCoreUtils.combineFilters(filters);\n  }\n};\nvar ApplyFilterViewController = modules.ViewController.inherit({\n  _getHeaderPanel: function _getHeaderPanel() {\n    if (!this._headerPanel) {\n      this._headerPanel = this.getView(\"headerPanel\");\n    }\n    return this._headerPanel;\n  },\n  setHighLight: function setHighLight($element, value) {\n    if (isOnClickApplyFilterMode(this)) {\n      $element && $element.toggleClass(HIGHLIGHT_OUTLINE_CLASS, value) && $element.closest(\".\" + EDITOR_CELL_CLASS).toggleClass(FILTER_MODIFIED_CLASS, value);\n      this._getHeaderPanel().enableApplyButton(value);\n    }\n  },\n  applyFilter: function applyFilter() {\n    var columnsController = this.getController(\"columns\");\n    var columns = columnsController.getColumns();\n    columnsController.beginUpdate();\n    for (var i = 0; i < columns.length; i++) {\n      var column = columns[i];\n      if (void 0 !== column.bufferedFilterValue) {\n        columnsController.columnOption(i, \"filterValue\", column.bufferedFilterValue);\n        column.bufferedFilterValue = void 0;\n      }\n      if (void 0 !== column.bufferedSelectedFilterOperation) {\n        columnsController.columnOption(i, \"selectedFilterOperation\", column.bufferedSelectedFilterOperation);\n        column.bufferedSelectedFilterOperation = void 0;\n      }\n    }\n    columnsController.endUpdate();\n    this.removeHighLights();\n  },\n  removeHighLights: function removeHighLights() {\n    if (isOnClickApplyFilterMode(this)) {\n      var columnHeadersViewElement = this.getView(\"columnHeadersView\").element();\n      columnHeadersViewElement.find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS) + \" .\" + HIGHLIGHT_OUTLINE_CLASS).removeClass(HIGHLIGHT_OUTLINE_CLASS);\n      columnHeadersViewElement.find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS) + \" .\" + FILTER_MODIFIED_CLASS).removeClass(FILTER_MODIFIED_CLASS);\n      this._getHeaderPanel().enableApplyButton(false);\n    }\n  },\n  setCurrentColumnForFiltering: function setCurrentColumnForFiltering(column) {\n    this._currentColumn = column;\n  },\n  getCurrentColumnForFiltering: function getCurrentColumnForFiltering() {\n    return this._currentColumn;\n  }\n});\nexport var filterRowModule = {\n  defaultOptions: function defaultOptions() {\n    return {\n      syncLookupFilterValues: true,\n      filterRow: {\n        visible: false,\n        showOperationChooser: true,\n        showAllText: messageLocalization.format(\"dxDataGrid-filterRowShowAllText\"),\n        resetOperationText: messageLocalization.format(\"dxDataGrid-filterRowResetOperationText\"),\n        applyFilter: \"auto\",\n        applyFilterText: messageLocalization.format(\"dxDataGrid-applyFilterText\"),\n        operationDescriptions: {\n          equal: messageLocalization.format(\"dxDataGrid-filterRowOperationEquals\"),\n          notEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationNotEquals\"),\n          lessThan: messageLocalization.format(\"dxDataGrid-filterRowOperationLess\"),\n          lessThanOrEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationLessOrEquals\"),\n          greaterThan: messageLocalization.format(\"dxDataGrid-filterRowOperationGreater\"),\n          greaterThanOrEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationGreaterOrEquals\"),\n          startsWith: messageLocalization.format(\"dxDataGrid-filterRowOperationStartsWith\"),\n          contains: messageLocalization.format(\"dxDataGrid-filterRowOperationContains\"),\n          notContains: messageLocalization.format(\"dxDataGrid-filterRowOperationNotContains\"),\n          endsWith: messageLocalization.format(\"dxDataGrid-filterRowOperationEndsWith\"),\n          between: messageLocalization.format(\"dxDataGrid-filterRowOperationBetween\"),\n          isBlank: messageLocalization.format(\"dxFilterBuilder-filterOperationIsBlank\"),\n          isNotBlank: messageLocalization.format(\"dxFilterBuilder-filterOperationIsNotBlank\")\n        },\n        betweenStartText: messageLocalization.format(\"dxDataGrid-filterRowOperationBetweenStartText\"),\n        betweenEndText: messageLocalization.format(\"dxDataGrid-filterRowOperationBetweenEndText\")\n      }\n    };\n  },\n  controllers: {\n    applyFilter: ApplyFilterViewController\n  },\n  extenders: {\n    controllers: {\n      data: DataControllerFilterRowExtender,\n      columnsResizer: {\n        _startResizing: function _startResizing() {\n          var that = this;\n          that.callBase.apply(that, arguments);\n          if (that.isResizing()) {\n            var overlayInstance = that._columnHeadersView.getFilterRangeOverlayInstance();\n            if (overlayInstance) {\n              var cellIndex = overlayInstance.$element().closest(\"td\").index();\n              if (cellIndex === that._targetPoint.columnIndex || cellIndex === that._targetPoint.columnIndex + 1) {\n                overlayInstance.$content().hide();\n              }\n            }\n          }\n        },\n        _endResizing: function _endResizing() {\n          var that = this;\n          var $cell;\n          if (that.isResizing()) {\n            var overlayInstance = that._columnHeadersView.getFilterRangeOverlayInstance();\n            if (overlayInstance) {\n              $cell = overlayInstance.$element().closest(\"td\");\n              that._columnHeadersView._updateFilterRangeOverlay({\n                width: getOuterWidth($cell, true) + CORRECT_FILTER_RANGE_OVERLAY_WIDTH\n              });\n              overlayInstance.$content().show();\n            }\n          }\n          that.callBase.apply(that, arguments);\n        }\n      },\n      editing: {\n        updateFieldValue: function updateFieldValue(options) {\n          if (options.column.lookup) {\n            this._needUpdateLookupDataSource = true;\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _afterSaveEditData: function _afterSaveEditData(cancel) {\n          if (this._needUpdateLookupDataSource && !cancel) {\n            var _this$getView;\n            null === (_this$getView = this.getView(\"columnHeadersView\")) || void 0 === _this$getView ? void 0 : _this$getView.updateLookupDataSource();\n          }\n          this._needUpdateLookupDataSource = false;\n          return this.callBase.apply(this, arguments);\n        },\n        _afterCancelEditData: function _afterCancelEditData() {\n          this._needUpdateLookupDataSource = false;\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      columnHeadersView: ColumnHeadersViewFilterRowExtender,\n      headerPanel: {\n        _getToolbarItems: function _getToolbarItems() {\n          var items = this.callBase();\n          var filterItem = this._prepareFilterItem(items);\n          return filterItem.concat(items);\n        },\n        _prepareFilterItem: function _prepareFilterItem() {\n          var that = this;\n          var filterItem = [];\n          if (that._isShowApplyFilterButton()) {\n            var hintText = that.option(\"filterRow.applyFilterText\");\n            var columns = that._columnsController.getColumns();\n            var disabled = !columns.filter(function (column) {\n              return void 0 !== column.bufferedFilterValue;\n            }).length;\n            var toolbarItem = {\n              widget: \"dxButton\",\n              options: {\n                icon: \"apply-filter\",\n                disabled: disabled,\n                onClick: function onClick() {\n                  that._applyFilterViewController.applyFilter();\n                },\n                hint: hintText,\n                text: hintText,\n                onInitialized: function onInitialized(e) {\n                  $(e.element).addClass(that._getToolbarButtonClass(APPLY_BUTTON_CLASS));\n                }\n              },\n              showText: \"inMenu\",\n              name: \"applyFilterButton\",\n              location: \"after\",\n              locateInMenu: \"auto\",\n              sortIndex: 10\n            };\n            filterItem.push(toolbarItem);\n          }\n          return filterItem;\n        },\n        _isShowApplyFilterButton: function _isShowApplyFilterButton() {\n          var filterRowOptions = this.option(\"filterRow\");\n          return filterRowOptions && filterRowOptions.visible && \"onClick\" === filterRowOptions.applyFilter;\n        },\n        init: function init() {\n          this.callBase();\n          this._dataController = this.getController(\"data\");\n          this._applyFilterViewController = this.getController(\"applyFilter\");\n        },\n        enableApplyButton: function enableApplyButton(value) {\n          this.setToolbarItemDisabled(\"applyFilterButton\", !value);\n        },\n        isVisible: function isVisible() {\n          return this.callBase() || this._isShowApplyFilterButton();\n        },\n        optionChanged: function optionChanged(args) {\n          if (\"filterRow\" === args.name) {\n            this._invalidate();\n            args.handled = true;\n          } else {\n            this.callBase(args);\n          }\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}