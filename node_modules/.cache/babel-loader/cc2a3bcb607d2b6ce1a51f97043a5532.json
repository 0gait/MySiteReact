{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/list/ui.list.edit.strategy.grouped.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { isNumeric } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport storeHelper from \"../../data/store_helper\";\nimport query from \"../../data/query\";\nimport EditStrategy from \"../collection/ui.collection_widget.edit.strategy.plain\";\nvar LIST_ITEM_CLASS = \"dx-list-item\";\nvar LIST_GROUP_CLASS = \"dx-list-group\";\nvar SELECTION_SHIFT = 20;\nvar SELECTION_MASK = (1 << SELECTION_SHIFT) - 1;\nvar combineIndex = function combineIndex(indices) {\n  return (indices.group << SELECTION_SHIFT) + indices.item;\n};\nvar splitIndex = function splitIndex(combinedIndex) {\n  return {\n    group: combinedIndex >> SELECTION_SHIFT,\n    item: combinedIndex & SELECTION_MASK\n  };\n};\nvar GroupedEditStrategy = EditStrategy.inherit({\n  _groupElements: function _groupElements() {\n    return this._collectionWidget._itemContainer().find(\".\" + LIST_GROUP_CLASS);\n  },\n  _groupItemElements: function _groupItemElements($group) {\n    return $group.find(\".\" + LIST_ITEM_CLASS);\n  },\n  getIndexByItemData: function getIndexByItemData(itemData) {\n    var groups = this._collectionWidget.option(\"items\");\n    var index = false;\n    if (!itemData) {\n      return false;\n    }\n    if (itemData.items && itemData.items.length) {\n      itemData = itemData.items[0];\n    }\n    each(groups, function (groupIndex, group) {\n      if (!group.items) {\n        return false;\n      }\n      each(group.items, function (itemIndex, item) {\n        if (item !== itemData) {\n          return true;\n        }\n        index = {\n          group: groupIndex,\n          item: itemIndex\n        };\n        return false;\n      });\n      if (index) {\n        return false;\n      }\n    });\n    return index;\n  },\n  getItemDataByIndex: function getItemDataByIndex(index) {\n    var items = this._collectionWidget.option(\"items\");\n    if (isNumeric(index)) {\n      return this.itemsGetter()[index];\n    }\n    return index && items[index.group] && items[index.group].items[index.item] || null;\n  },\n  itemsGetter: function itemsGetter() {\n    var resultItems = [];\n    var items = this._collectionWidget.option(\"items\");\n    for (var i = 0; i < items.length; i++) {\n      if (items[i] && items[i].items) {\n        resultItems = resultItems.concat(items[i].items);\n      } else {\n        resultItems.push(items[i]);\n      }\n    }\n    return resultItems;\n  },\n  deleteItemAtIndex: function deleteItemAtIndex(index) {\n    var indices = splitIndex(index);\n    var itemGroup = this._collectionWidget.option(\"items\")[indices.group].items;\n    itemGroup.splice(indices.item, 1);\n  },\n  getKeysByItems: function getKeysByItems(items) {\n    var plainItems = [];\n    var i;\n    for (i = 0; i < items.length; i++) {\n      if (items[i] && items[i].items) {\n        plainItems = plainItems.concat(items[i].items);\n      } else {\n        plainItems.push(items[i]);\n      }\n    }\n    var result = [];\n    for (i = 0; i < plainItems.length; i++) {\n      result.push(this._collectionWidget.keyOf(plainItems[i]));\n    }\n    return result;\n  },\n  getIndexByKey: function getIndexByKey(key, items) {\n    var groups = items || this._collectionWidget.option(\"items\");\n    var index = -1;\n    var that = this;\n    each(groups, function (groupIndex, group) {\n      if (!group.items) {\n        return;\n      }\n      each(group.items, function (itemIndex, item) {\n        var itemKey = that._collectionWidget.keyOf(item);\n        if (that._equalKeys(itemKey, key)) {\n          index = {\n            group: groupIndex,\n            item: itemIndex\n          };\n          return false;\n        }\n      });\n      if (-1 !== index) {\n        return false;\n      }\n    });\n    return index;\n  },\n  _getGroups: function _getGroups(items) {\n    var dataController = this._collectionWidget._dataController;\n    var group = dataController.group();\n    if (group) {\n      return storeHelper.queryByOptions(query(items), {\n        group: group\n      }).toArray();\n    }\n    return this._collectionWidget.option(\"items\");\n  },\n  getItemsByKeys: function getItemsByKeys(keys, items) {\n    var _this = this;\n    var result = [];\n    var groups = this._getGroups(items);\n    var groupItemByKeyMap = {};\n    var getItemMeta = function getItemMeta(key) {\n      var index = _this.getIndexByKey(key, groups);\n      var group = index && groups[index.group];\n      if (!group) {\n        return;\n      }\n      return {\n        groupKey: group.key,\n        item: group.items[index.item]\n      };\n    };\n    each(keys, function (_, key) {\n      var itemMeta = getItemMeta(key);\n      if (!itemMeta) {\n        return;\n      }\n      var groupKey = itemMeta.groupKey;\n      var item = itemMeta.item;\n      var selectedGroup = groupItemByKeyMap[groupKey];\n      if (!selectedGroup) {\n        selectedGroup = {\n          key: groupKey,\n          items: []\n        };\n        groupItemByKeyMap[groupKey] = selectedGroup;\n        result.push(selectedGroup);\n      }\n      selectedGroup.items.push(item);\n    });\n    return result;\n  },\n  moveItemAtIndexToIndex: function moveItemAtIndexToIndex(movingIndex, destinationIndex) {\n    var items = this._collectionWidget.option(\"items\");\n    var movingIndices = splitIndex(movingIndex);\n    var destinationIndices = splitIndex(destinationIndex);\n    var movingItemGroup = items[movingIndices.group].items;\n    var destinationItemGroup = items[destinationIndices.group].items;\n    var movedItemData = movingItemGroup[movingIndices.item];\n    movingItemGroup.splice(movingIndices.item, 1);\n    destinationItemGroup.splice(destinationIndices.item, 0, movedItemData);\n  },\n  _isItemIndex: function _isItemIndex(index) {\n    return index && isNumeric(index.group) && isNumeric(index.item);\n  },\n  _getNormalizedItemIndex: function _getNormalizedItemIndex(itemElement) {\n    var $item = $(itemElement);\n    var $group = $item.closest(\".\" + LIST_GROUP_CLASS);\n    if (!$group.length) {\n      return -1;\n    }\n    return combineIndex({\n      group: this._groupElements().index($group),\n      item: this._groupItemElements($group).index($item)\n    });\n  },\n  _normalizeItemIndex: function _normalizeItemIndex(index) {\n    return combineIndex(index);\n  },\n  _denormalizeItemIndex: function _denormalizeItemIndex(index) {\n    return splitIndex(index);\n  },\n  _getItemByNormalizedIndex: function _getItemByNormalizedIndex(index) {\n    var indices = splitIndex(index);\n    var $group = this._groupElements().eq(indices.group);\n    return this._groupItemElements($group).eq(indices.item);\n  },\n  _itemsFromSameParent: function _itemsFromSameParent(firstIndex, secondIndex) {\n    return splitIndex(firstIndex).group === splitIndex(secondIndex).group;\n  }\n});\nexport default GroupedEditStrategy;","map":null,"metadata":{},"sourceType":"module"}