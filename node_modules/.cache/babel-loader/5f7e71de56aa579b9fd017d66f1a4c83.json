{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.context_menu.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Widget from \"../widget/ui.widget\";\nimport ContextMenu from \"../context_menu\";\nimport DiagramCommandsManager from \"./diagram.commands_manager\";\nimport DiagramMenuHelper from \"./ui.diagram.menu_helper\";\nimport DiagramBar from \"./diagram.bar\";\nimport { getDiagram } from \"./diagram.importer\";\nvar DIAGRAM_TOUCHBAR_CLASS = \"dx-diagram-touchbar\";\nvar DIAGRAM_TOUCHBAR_OVERLAY_CLASS = \"dx-diagram-touchbar-overlay\";\nvar DIAGRAM_TOUCHBAR_TARGET_CLASS = \"dx-diagram-touchbar-target\";\nvar DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH = 800;\nvar DIAGRAM_TOUCHBAR_Y_OFFSET = 32;\nvar DiagramContextMenuWrapper = /*#__PURE__*/function (_Widget) {\n  _inherits(DiagramContextMenuWrapper, _Widget);\n  function DiagramContextMenuWrapper() {\n    _classCallCheck(this, DiagramContextMenuWrapper);\n    return _possibleConstructorReturn(this, _getPrototypeOf(DiagramContextMenuWrapper).apply(this, arguments));\n  }\n  _createClass(DiagramContextMenuWrapper, [{\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(DiagramContextMenuWrapper.prototype), \"_init\", this).call(this);\n      this._createOnVisibilityChangingAction();\n      this._createOnInternalCommand();\n      this._createOnCustomCommand();\n      this._createOnItemClickAction();\n      this._tempState = void 0;\n      this._commands = [];\n      this._commandToIndexMap = {};\n      this.bar = new DiagramContextMenuBar(this);\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      var _this = this;\n      _get(_getPrototypeOf(DiagramContextMenuWrapper.prototype), \"_initMarkup\", this).call(this);\n      this._commands = this._getCommands();\n      this._commandToIndexMap = {};\n      this._fillCommandToIndexMap(this._commands, []);\n      this._$contextMenuTargetElement = $(\"<div>\").addClass(DIAGRAM_TOUCHBAR_TARGET_CLASS).appendTo(this.$element());\n      var $contextMenu = $(\"<div>\").appendTo(this.$element());\n      this._contextMenuInstance = this._createComponent($contextMenu, DiagramContextMenu, {\n        isTouchBarMode: this._isTouchBarMode(),\n        cssClass: this._isTouchBarMode() ? DIAGRAM_TOUCHBAR_CLASS : DiagramMenuHelper.getContextMenuCssClass(),\n        hideOnOutsideClick: false,\n        showEvent: \"\",\n        focusStateEnabled: false,\n        items: this._commands,\n        position: this._isTouchBarMode() ? {\n          my: {\n            x: \"center\",\n            y: \"bottom\"\n          },\n          at: {\n            x: \"center\",\n            y: \"top\"\n          },\n          of: this._$contextMenuTargetElement\n        } : {},\n        itemTemplate: function itemTemplate(itemData, itemIndex, itemElement) {\n          DiagramMenuHelper.getContextMenuItemTemplate(this, itemData, itemIndex, itemElement);\n        },\n        onItemClick: function onItemClick(_ref) {\n          var itemData = _ref.itemData;\n          return _this._onItemClick(itemData);\n        },\n        onShowing: function onShowing(e) {\n          if (true === _this._inOnShowing) {\n            return;\n          }\n          _this._inOnShowing = true;\n          _this._onVisibilityChangingAction({\n            visible: true,\n            component: _this\n          });\n          e.component.option(\"items\", e.component.option(\"items\"));\n          delete _this._inOnShowing;\n        }\n      });\n    }\n  }, {\n    key: \"_show\",\n    value: function _show(x, y, selection) {\n      this._contextMenuInstance.hide();\n      if (this._isTouchBarMode()) {\n        this._$contextMenuTargetElement.show();\n        if (!selection) {\n          selection = {\n            x: x,\n            y: y,\n            width: 0,\n            height: 0\n          };\n        }\n        var widthCorrection = selection.width > DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH ? 0 : (DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH - selection.width) / 2;\n        this._$contextMenuTargetElement.css({\n          left: selection.x - widthCorrection,\n          top: selection.y - DIAGRAM_TOUCHBAR_Y_OFFSET,\n          width: selection.width + 2 * widthCorrection,\n          height: selection.height + 2 * DIAGRAM_TOUCHBAR_Y_OFFSET\n        });\n        this._contextMenuInstance.show();\n      } else {\n        this._contextMenuInstance.option(\"position\", {\n          offset: x + \" \" + y\n        });\n        this._contextMenuInstance.show();\n      }\n    }\n  }, {\n    key: \"_hide\",\n    value: function _hide() {\n      this._$contextMenuTargetElement.hide();\n      this._contextMenuInstance.hide();\n    }\n  }, {\n    key: \"_isTouchBarMode\",\n    value: function _isTouchBarMode() {\n      var _getDiagram = getDiagram(),\n        Browser = _getDiagram.Browser;\n      return Browser.TouchUI;\n    }\n  }, {\n    key: \"_onItemClick\",\n    value: function _onItemClick(itemData) {\n      var processed = false;\n      if (this._onItemClickAction) {\n        processed = this._onItemClickAction(itemData);\n      }\n      if (!processed) {\n        DiagramMenuHelper.onContextMenuItemClick(this, itemData, this._executeCommand.bind(this));\n        this._contextMenuInstance.hide();\n      }\n    }\n  }, {\n    key: \"_executeCommand\",\n    value: function _executeCommand(command, name, value) {\n      if (\"number\" === typeof command) {\n        this.bar.raiseBarCommandExecuted(command, value);\n      } else if (\"string\" === typeof command) {\n        this._onInternalCommandAction({\n          command: command\n        });\n      }\n      if (void 0 !== name) {\n        this._onCustomCommandAction({\n          name: name\n        });\n      }\n    }\n  }, {\n    key: \"_createOnInternalCommand\",\n    value: function _createOnInternalCommand() {\n      this._onInternalCommandAction = this._createActionByOption(\"onInternalCommand\");\n    }\n  }, {\n    key: \"_createOnCustomCommand\",\n    value: function _createOnCustomCommand() {\n      this._onCustomCommandAction = this._createActionByOption(\"onCustomCommand\");\n    }\n  }, {\n    key: \"_getCommands\",\n    value: function _getCommands() {\n      return DiagramCommandsManager.getContextMenuCommands(this.option(\"commands\"));\n    }\n  }, {\n    key: \"_fillCommandToIndexMap\",\n    value: function _fillCommandToIndexMap(commands, indexPath) {\n      var _this2 = this;\n      commands.forEach(function (command, index) {\n        var commandIndexPath = indexPath.concat([index]);\n        if (void 0 !== command.command) {\n          _this2._commandToIndexMap[command.command] = commandIndexPath;\n        }\n        if (Array.isArray(command.items)) {\n          _this2._fillCommandToIndexMap(command.items, commandIndexPath);\n        }\n      });\n    }\n  }, {\n    key: \"_setItemEnabled\",\n    value: function _setItemEnabled(key, enabled) {\n      this._setItemVisible(key, enabled);\n    }\n  }, {\n    key: \"_setItemVisible\",\n    value: function _setItemVisible(key, visible) {\n      var itemOptionText = DiagramMenuHelper.getItemOptionText(this._contextMenuInstance, this._commandToIndexMap[key]);\n      DiagramMenuHelper.updateContextMenuItemVisible(this._contextMenuInstance, itemOptionText, visible);\n    }\n  }, {\n    key: \"_setItemValue\",\n    value: function _setItemValue(key, value) {\n      var itemOptionText = DiagramMenuHelper.getItemOptionText(this._contextMenuInstance, this._commandToIndexMap[key]);\n      DiagramMenuHelper.updateContextMenuItemValue(this._contextMenuInstance, itemOptionText, key, value);\n    }\n  }, {\n    key: \"_setItemSubItems\",\n    value: function _setItemSubItems(key, items) {\n      var itemOptionText = DiagramMenuHelper.getItemOptionText(this._contextMenuInstance, this._commandToIndexMap[key]);\n      DiagramMenuHelper.updateContextMenuItems(this._contextMenuInstance, itemOptionText, key, items);\n    }\n  }, {\n    key: \"_setEnabled\",\n    value: function _setEnabled(enabled) {\n      this._contextMenuInstance.option(\"disabled\", !enabled);\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return this._inOnShowing;\n    }\n  }, {\n    key: \"_createOnVisibilityChangingAction\",\n    value: function _createOnVisibilityChangingAction() {\n      this._onVisibilityChangingAction = this._createActionByOption(\"onVisibilityChanging\");\n    }\n  }, {\n    key: \"_createOnItemClickAction\",\n    value: function _createOnItemClickAction() {\n      this._onItemClickAction = this._createActionByOption(\"onItemClick\");\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      switch (args.name) {\n        case \"onVisibilityChanging\":\n          this._createOnVisibilityChangingAction();\n          break;\n        case \"onInternalCommand\":\n          this._createOnInternalCommand();\n          break;\n        case \"onCustomCommand\":\n          this._createOnCustomCommand();\n          break;\n        case \"onItemClick\":\n          this._createOnItemClickAction();\n          break;\n        case \"commands\":\n          this._invalidate();\n          break;\n        case \"export\":\n          break;\n        default:\n          _get(_getPrototypeOf(DiagramContextMenuWrapper.prototype), \"_optionChanged\", this).call(this, args);\n      }\n    }\n  }]);\n  return DiagramContextMenuWrapper;\n}(Widget);\nvar DiagramContextMenu = /*#__PURE__*/function (_ContextMenu) {\n  _inherits(DiagramContextMenu, _ContextMenu);\n  function DiagramContextMenu() {\n    _classCallCheck(this, DiagramContextMenu);\n    return _possibleConstructorReturn(this, _getPrototypeOf(DiagramContextMenu).apply(this, arguments));\n  }\n  _createClass(DiagramContextMenu, [{\n    key: \"_renderContextMenuOverlay\",\n    value: function _renderContextMenuOverlay() {\n      var _this3 = this;\n      _get(_getPrototypeOf(DiagramContextMenu.prototype), \"_renderContextMenuOverlay\", this).call(this);\n      if (this._overlay && this.option(\"isTouchBarMode\")) {\n        this._overlay && this._overlay.option(\"onShown\", function () {\n          var $content = $(_this3._overlay.$content());\n          $content.parent().addClass(DIAGRAM_TOUCHBAR_OVERLAY_CLASS);\n        });\n      }\n    }\n  }]);\n  return DiagramContextMenu;\n}(ContextMenu);\nvar DiagramContextMenuBar = /*#__PURE__*/function (_DiagramBar) {\n  _inherits(DiagramContextMenuBar, _DiagramBar);\n  function DiagramContextMenuBar(owner) {\n    _classCallCheck(this, DiagramContextMenuBar);\n    return _possibleConstructorReturn(this, _getPrototypeOf(DiagramContextMenuBar).call(this, owner));\n  }\n  _createClass(DiagramContextMenuBar, [{\n    key: \"getCommandKeys\",\n    value: function getCommandKeys() {\n      return this._getKeys(this._owner._commands);\n    }\n  }, {\n    key: \"setItemValue\",\n    value: function setItemValue(key, value) {\n      this._owner._setItemValue(key, value);\n    }\n  }, {\n    key: \"setItemEnabled\",\n    value: function setItemEnabled(key, enabled) {\n      this._owner._setItemEnabled(key, enabled);\n    }\n  }, {\n    key: \"setItemVisible\",\n    value: function setItemVisible(key, visible) {\n      this._owner._setItemVisible(key, visible);\n    }\n  }, {\n    key: \"setItemSubItems\",\n    value: function setItemSubItems(key, items) {\n      this._owner._setItemSubItems(key, items);\n    }\n  }, {\n    key: \"setEnabled\",\n    value: function setEnabled(enabled) {\n      this._owner._setEnabled(enabled);\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return this._owner.isVisible();\n    }\n  }]);\n  return DiagramContextMenuBar;\n}(DiagramBar);\nexport default {\n  DiagramContextMenuWrapper: DiagramContextMenuWrapper,\n  DiagramContextMenu: DiagramContextMenu\n};","map":null,"metadata":{},"sourceType":"module"}