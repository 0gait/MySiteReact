{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n/**\r\n * DevExtreme (esm/renovation/ui/scheduler/appointment/overflow_indicator/layout.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"groups\", \"overflowIndicatorTemplate\", \"viewModel\"];\nimport { createVNode, createComponentVNode, normalizeProps } from \"inferno\";\nimport { InfernoEffect, InfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { normalizeStyles } from \"@devextreme/runtime/inferno\";\nimport { combineClasses } from \"../../../../utils/combine_classes\";\nimport { Button } from \"../../../button\";\nimport { getIndicatorColor, getOverflowIndicatorStyles } from \"./utils\";\nimport messageLocalization from \"../../../../../localization/message\";\nimport { AppointmentsContext } from \"../../appointments_context\";\nimport { mergeStylesWithColor } from \"../utils\";\nexport var viewFunction = function viewFunction(_ref) {\n  var classes = _ref.classes,\n    data = _ref.data,\n    OverflowIndicatorTemplate = _ref.props.overflowIndicatorTemplate,\n    styles = _ref.styles,\n    text = _ref.text;\n  return createComponentVNode(2, Button, {\n    style: normalizeStyles(styles),\n    className: classes,\n    type: \"default\",\n    stylingMode: \"contained\",\n    children: OverflowIndicatorTemplate ? OverflowIndicatorTemplate({\n      data: data\n    }) : createVNode(1, \"span\", null, text, 0)\n  });\n};\nexport var OverflowIndicatorProps = {};\nvar getTemplate = function getTemplate(TemplateProp) {\n  return TemplateProp && (TemplateProp.defaultProps ? function (props) {\n    return normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props)));\n  } : TemplateProp);\n};\nexport var OverflowIndicator = /*#__PURE__*/function (_InfernoComponent) {\n  _inherits(OverflowIndicator, _InfernoComponent);\n  function OverflowIndicator(props) {\n    var _this;\n    _classCallCheck(this, OverflowIndicator);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(OverflowIndicator).call(this, props));\n    _this.state = {\n      color: void 0\n    };\n    _this.updateStylesEffect = _this.updateStylesEffect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  _createClass(OverflowIndicator, [{\n    key: \"createEffects\",\n    value: function createEffects() {\n      return [new InfernoEffect(this.updateStylesEffect, [this.props.groups, this.props.viewModel, this.appointmentsContextValue])];\n    }\n  }, {\n    key: \"updateEffects\",\n    value: function updateEffects() {\n      var _this$_effects$;\n      null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.props.groups, this.props.viewModel, this.appointmentsContextValue]);\n    }\n  }, {\n    key: \"updateStylesEffect\",\n    value: function updateStylesEffect() {\n      var _this2 = this;\n      var _this$props2 = this.props,\n        groups = _this$props2.groups,\n        viewModel = _this$props2.viewModel;\n      getIndicatorColor(this.appointmentsContextValue, viewModel, groups).then(function (color) {\n        _this2.setState(function (__state_argument) {\n          return {\n            color: color\n          };\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props, {\n          overflowIndicatorTemplate: getTemplate(props.overflowIndicatorTemplate)\n        }),\n        color: this.state.color,\n        appointmentsContextValue: this.appointmentsContextValue,\n        data: this.data,\n        text: this.text,\n        appointmentStyles: this.appointmentStyles,\n        styles: this.styles,\n        classes: this.classes,\n        restAttributes: this.restAttributes\n      });\n    }\n  }, {\n    key: \"appointmentsContextValue\",\n    get: function get() {\n      if (this.context[AppointmentsContext.id]) {\n        return this.context[AppointmentsContext.id];\n      }\n      return AppointmentsContext.defaultValue;\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return {\n        appointmentCount: this.props.viewModel.items.settings.length,\n        isCompact: this.props.viewModel.isCompact\n      };\n    }\n  }, {\n    key: \"text\",\n    get: function get() {\n      var isCompact = this.props.viewModel.isCompact;\n      var appointmentCount = this.data.appointmentCount;\n      if (isCompact) {\n        return \"\".concat(appointmentCount);\n      }\n      var formatter = messageLocalization.getFormatter(\"dxScheduler-moreAppointments\");\n      return formatter(appointmentCount);\n    }\n  }, {\n    key: \"appointmentStyles\",\n    get: function get() {\n      return getOverflowIndicatorStyles(this.props.viewModel);\n    }\n  }, {\n    key: \"styles\",\n    get: function get() {\n      return mergeStylesWithColor(this.state.color, this.appointmentStyles);\n    }\n  }, {\n    key: \"classes\",\n    get: function get() {\n      return combineClasses({\n        \"dx-scheduler-appointment-collector\": true,\n        \"dx-scheduler-appointment-collector-compact\": this.data.isCompact\n      });\n    }\n  }, {\n    key: \"restAttributes\",\n    get: function get() {\n      var _this$props = this.props,\n        restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n      return restProps;\n    }\n  }]);\n  return OverflowIndicator;\n}(InfernoComponent);\nOverflowIndicator.defaultProps = OverflowIndicatorProps;","map":null,"metadata":{},"sourceType":"module"}