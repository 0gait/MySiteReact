{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.files_tree_view.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getImageContainer } from \"../../core/utils/icon\";\nimport { noop } from \"../../core/utils/common\";\nimport Widget from \"../widget/ui.widget\";\nimport TreeViewSearch from \"../tree_view/ui.tree_view.search\";\nimport FileManagerFileActionsButton from \"./ui.file_manager.file_actions_button\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { hasWindow } from \"../../core/utils/window\";\nimport { isNumeric } from \"../../core/utils/type\";\nvar FILE_MANAGER_DIRS_TREE_CLASS = \"dx-filemanager-dirs-tree\";\nvar FILE_MANAGER_DIRS_TREE_FOCUSED_ITEM_CLASS = \"dx-filemanager-focused-item\";\nvar FILE_MANAGER_DIRS_TREE_ITEM_TEXT_CLASS = \"dx-filemanager-dirs-tree-item-text\";\nvar TREE_VIEW_ITEM_CLASS = \"dx-treeview-item\";\nvar FileManagerFilesTreeView = /*#__PURE__*/function (_Widget) {\n  _inherits(FileManagerFilesTreeView, _Widget);\n  function FileManagerFilesTreeView() {\n    _classCallCheck(this, FileManagerFilesTreeView);\n    return _possibleConstructorReturn(this, _getPrototypeOf(FileManagerFilesTreeView).apply(this, arguments));\n  }\n  _createClass(FileManagerFilesTreeView, [{\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      var _this = this;\n      this._initActions();\n      this._getCurrentDirectory = this.option(\"getCurrentDirectory\");\n      this._createFileActionsButton = noop;\n      this._storeExpandedState = this.option(\"storeExpandedState\") || false;\n      var $treeView = $(\"<div>\").addClass(FILE_MANAGER_DIRS_TREE_CLASS).appendTo(this.$element());\n      var treeViewOptions = {\n        dataStructure: \"plain\",\n        rootValue: \"\",\n        createChildren: this._onFilesTreeViewCreateSubDirectories.bind(this),\n        itemTemplate: this._createFilesTreeViewItemTemplate.bind(this),\n        keyExpr: \"getInternalKey\",\n        parentIdExpr: \"parentDirectory.getInternalKey\",\n        displayExpr: function displayExpr(itemInfo) {\n          return itemInfo.getDisplayName();\n        },\n        hasItemsExpr: \"fileItem.hasSubDirectories\",\n        onItemClick: function onItemClick(e) {\n          return _this._actions.onDirectoryClick(e);\n        },\n        onItemExpanded: function onItemExpanded(e) {\n          return _this._onFilesTreeViewItemExpanded(e);\n        },\n        onItemCollapsed: function onItemCollapsed(e) {\n          return _this._onFilesTreeViewItemCollapsed(e);\n        },\n        onItemRendered: function onItemRendered(e) {\n          return _this._onFilesTreeViewItemRendered(e);\n        },\n        onContentReady: function onContentReady() {\n          return _this._actions.onFilesTreeViewContentReady();\n        }\n      };\n      if (this._contextMenu) {\n        this._contextMenu.option(\"onContextMenuHidden\", function () {\n          return _this._onContextMenuHidden();\n        });\n        treeViewOptions.onItemContextMenu = function (e) {\n          return _this._onFilesTreeViewItemContextMenu(e);\n        };\n        this._createFileActionsButton = function (element, options) {\n          return _this._createComponent(element, FileManagerFileActionsButton, options);\n        };\n      }\n      this._filesTreeView = this._createComponent($treeView, TreeViewSearch, treeViewOptions);\n    }\n  }, {\n    key: \"_initActions\",\n    value: function _initActions() {\n      this._actions = {\n        onDirectoryClick: this._createActionByOption(\"onDirectoryClick\"),\n        onFilesTreeViewContentReady: this._createActionByOption(\"onFilesTreeViewContentReady\")\n      };\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      _get(_getPrototypeOf(FileManagerFilesTreeView.prototype), \"_render\", this).call(this);\n      var that = this;\n      setTimeout(function () {\n        that._updateFocusedElement();\n      });\n    }\n  }, {\n    key: \"_onFilesTreeViewCreateSubDirectories\",\n    value: function _onFilesTreeViewCreateSubDirectories(rootItem) {\n      var getDirectories = this.option(\"getDirectories\");\n      var directoryInfo = rootItem && rootItem.itemData || null;\n      return getDirectories && getDirectories(directoryInfo, true);\n    }\n  }, {\n    key: \"_onFilesTreeViewItemRendered\",\n    value: function _onFilesTreeViewItemRendered(_ref) {\n      var itemData = _ref.itemData;\n      var currentDirectory = this._getCurrentDirectory();\n      if (currentDirectory && currentDirectory.fileItem.equals(itemData.fileItem)) {\n        this._updateFocusedElement();\n        this._restoreScrollTopPosition();\n      }\n    }\n  }, {\n    key: \"_onFilesTreeViewItemExpanded\",\n    value: function _onFilesTreeViewItemExpanded(_ref2) {\n      var itemData = _ref2.itemData;\n      if (this._storeExpandedState) {\n        itemData.expanded = true;\n      }\n    }\n  }, {\n    key: \"_onFilesTreeViewItemCollapsed\",\n    value: function _onFilesTreeViewItemCollapsed(_ref3) {\n      var itemData = _ref3.itemData;\n      if (this._storeExpandedState) {\n        itemData.expanded = false;\n      }\n    }\n  }, {\n    key: \"_createFilesTreeViewItemTemplate\",\n    value: function _createFilesTreeViewItemTemplate(itemData, itemIndex, itemElement) {\n      var _this2 = this;\n      var $itemElement = $(itemElement);\n      var $itemWrapper = $itemElement.closest(this._filesTreeViewItemSelector);\n      $itemWrapper.data(\"item\", itemData);\n      var $image = getImageContainer(itemData.icon);\n      var $text = $(\"<span>\").text(itemData.getDisplayName()).addClass(FILE_MANAGER_DIRS_TREE_ITEM_TEXT_CLASS);\n      var $button = $(\"<div>\");\n      $itemElement.append($image, $text, $button);\n      this._createFileActionsButton($button, {\n        onClick: function onClick(e) {\n          return _this2._onFileItemActionButtonClick(e);\n        }\n      });\n    }\n  }, {\n    key: \"_onFilesTreeViewItemContextMenu\",\n    value: function _onFilesTreeViewItemContextMenu(_ref4) {\n      var itemElement = _ref4.itemElement,\n        event = _ref4.event;\n      event.preventDefault();\n      event.stopPropagation();\n      var itemData = $(itemElement).data(\"item\");\n      this._contextMenu.showAt([itemData], itemElement, event, {\n        itemData: itemData,\n        itemElement: itemElement\n      });\n    }\n  }, {\n    key: \"_onFileItemActionButtonClick\",\n    value: function _onFileItemActionButtonClick(_ref5) {\n      var component = _ref5.component,\n        element = _ref5.element,\n        event = _ref5.event;\n      event.stopPropagation();\n      var itemElement = component.$element().closest(this._filesTreeViewItemSelector);\n      var itemData = itemElement.data(\"item\");\n      var target = {\n        itemData: itemData,\n        itemElement: itemElement,\n        isActionButton: true\n      };\n      this._contextMenu.showAt([itemData], element, event, target);\n      this._activeFileActionsButton = component;\n      this._activeFileActionsButton.setActive(true);\n    }\n  }, {\n    key: \"_onContextMenuHidden\",\n    value: function _onContextMenuHidden() {\n      if (this._activeFileActionsButton) {\n        this._activeFileActionsButton.setActive(false);\n      }\n    }\n  }, {\n    key: \"toggleNodeDisabledState\",\n    value: function toggleNodeDisabledState(key, state) {\n      var node = this._getNodeByKey(key);\n      if (!node) {\n        return;\n      }\n      var items = this._filesTreeView.option(\"items\");\n      var itemIndex = items.map(function (item) {\n        return item.getInternalKey();\n      }).indexOf(node.getInternalKey());\n      if (-1 !== itemIndex) {\n        this._filesTreeView.option(\"items[\".concat(itemIndex, \"].disabled\"), state);\n      }\n    }\n  }, {\n    key: \"_saveScrollTopPosition\",\n    value: function _saveScrollTopPosition() {\n      if (!hasWindow()) {\n        return;\n      }\n      this._scrollTopPosition = this._filesTreeView.getScrollable().scrollTop();\n    }\n  }, {\n    key: \"_restoreScrollTopPosition\",\n    value: function _restoreScrollTopPosition() {\n      var _this3 = this;\n      if (!hasWindow() || !isNumeric(this._scrollTopPosition)) {\n        return;\n      }\n      setTimeout(function () {\n        return _this3._filesTreeView.getScrollable().scrollTo(_this3._scrollTopPosition);\n      });\n    }\n  }, {\n    key: \"_updateFocusedElement\",\n    value: function _updateFocusedElement() {\n      var directoryInfo = this._getCurrentDirectory();\n      var $element = this._getItemElementByKey(null === directoryInfo || void 0 === directoryInfo ? void 0 : directoryInfo.getInternalKey());\n      if (this._$focusedElement) {\n        this._$focusedElement.toggleClass(FILE_MANAGER_DIRS_TREE_FOCUSED_ITEM_CLASS, false);\n      }\n      this._$focusedElement = $element || $();\n      this._$focusedElement.toggleClass(FILE_MANAGER_DIRS_TREE_FOCUSED_ITEM_CLASS, true);\n    }\n  }, {\n    key: \"_getNodeByKey\",\n    value: function _getNodeByKey(key) {\n      var _this$_filesTreeView;\n      return null === (_this$_filesTreeView = this._filesTreeView) || void 0 === _this$_filesTreeView ? void 0 : _this$_filesTreeView._getNode(key);\n    }\n  }, {\n    key: \"_getPublicNode\",\n    value: function _getPublicNode(key) {\n      var _this$_filesTreeView2;\n      var nodesQueue = _toConsumableArray(null === (_this$_filesTreeView2 = this._filesTreeView) || void 0 === _this$_filesTreeView2 ? void 0 : _this$_filesTreeView2.getNodes());\n      while (nodesQueue.length) {\n        var node = nodesQueue.shift();\n        if (node.itemData.getInternalKey() === key) {\n          return node;\n        } else if (node.children.length) {\n          nodesQueue.push.apply(nodesQueue, _toConsumableArray(node.children));\n        }\n      }\n      return;\n    }\n  }, {\n    key: \"_getItemElementByKey\",\n    value: function _getItemElementByKey(key) {\n      var node = this._getNodeByKey(key);\n      if (node) {\n        var $node = this._filesTreeView._getNodeElement(node);\n        if ($node) {\n          return $node.children(this._filesTreeViewItemSelector);\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerFilesTreeView.prototype), \"_getDefaultOptions\", this).call(this), {\n        storeExpandedState: false,\n        initialFolder: null,\n        contextMenu: null,\n        getItems: null,\n        getCurrentDirectory: null,\n        onDirectoryClick: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n      switch (name) {\n        case \"storeExpandedState\":\n          this._storeExpandedState = this.option(name);\n          break;\n        case \"getItems\":\n        case \"rootFolderDisplayName\":\n        case \"initialFolder\":\n        case \"contextMenu\":\n          this.repaint();\n          break;\n        case \"getCurrentDirectory\":\n          this.getCurrentDirectory = this.option(name);\n          break;\n        case \"onDirectoryClick\":\n        case \"onFilesTreeViewContentReady\":\n          this._actions[name] = this._createActionByOption(name);\n          break;\n        default:\n          _get(_getPrototypeOf(FileManagerFilesTreeView.prototype), \"_optionChanged\", this).call(this, args);\n      }\n    }\n  }, {\n    key: \"toggleDirectoryExpandedState\",\n    value: function toggleDirectoryExpandedState(directoryInfo, state) {\n      var deferred = new Deferred();\n      var treeViewNode = this._getPublicNode(null === directoryInfo || void 0 === directoryInfo ? void 0 : directoryInfo.getInternalKey());\n      if (!treeViewNode) {\n        return deferred.reject().promise();\n      }\n      if (treeViewNode.expanded === state || treeViewNode.itemsLoaded && !treeViewNode.itemData.fileItem.hasSubDirectories) {\n        return deferred.resolve().promise();\n      }\n      var action = state ? \"expandItem\" : \"collapseItem\";\n      return this._filesTreeView[action](directoryInfo.getInternalKey());\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      this._$focusedElement = null;\n      this._saveScrollTopPosition();\n      this._filesTreeView.option(\"dataSource\", []);\n    }\n  }, {\n    key: \"updateCurrentDirectory\",\n    value: function updateCurrentDirectory() {\n      if (this._disposed) {\n        return;\n      }\n      this._updateFocusedElement();\n      this._storeExpandedState && this._updateExpandedStateToCurrentDirectory();\n    }\n  }, {\n    key: \"_updateExpandedStateToCurrentDirectory\",\n    value: function _updateExpandedStateToCurrentDirectory() {\n      return this.toggleDirectoryExpandedStateRecursive(this._getCurrentDirectory().parentDirectory, true);\n    }\n  }, {\n    key: \"toggleDirectoryExpandedStateRecursive\",\n    value: function toggleDirectoryExpandedStateRecursive(directoryInfo, state) {\n      var dirLine = [];\n      for (var dirInfo = directoryInfo; dirInfo; dirInfo = dirInfo.parentDirectory) {\n        dirLine.unshift(dirInfo);\n      }\n      return this.toggleDirectoryLineExpandedState(dirLine, state);\n    }\n  }, {\n    key: \"toggleDirectoryLineExpandedState\",\n    value: function toggleDirectoryLineExpandedState(dirLine, state) {\n      var _this4 = this;\n      if (!dirLine.length) {\n        return new Deferred().resolve().promise();\n      }\n      return this.toggleDirectoryExpandedState(dirLine.shift(), state).then(function () {\n        return _this4.toggleDirectoryLineExpandedState(dirLine, state);\n      });\n    }\n  }, {\n    key: \"_filesTreeViewItemSelector\",\n    get: function get() {\n      return \".\".concat(TREE_VIEW_ITEM_CLASS);\n    }\n  }, {\n    key: \"_contextMenu\",\n    get: function get() {\n      return this.option(\"contextMenu\");\n    }\n  }]);\n  return FileManagerFilesTreeView;\n}(Widget);\nexport default FileManagerFilesTreeView;","map":null,"metadata":{},"sourceType":"module"}