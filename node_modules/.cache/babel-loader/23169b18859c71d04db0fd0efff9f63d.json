{"ast":null,"code":"/*!\n * devextreme-react\n * Version: 22.2.4\n * Build date: Thu Jan 19 2023\n *\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TreeMapborder = exports.TooltipBorder = exports.Tooltip = exports.Title = exports.TileLabel = exports.Tile = exports.Subtitle = exports.Size = exports.Shadow = exports.SelectionStyle = exports.Margin = exports.LoadingIndicator = exports.Label = exports.HoverStyle = exports.GroupLabel = exports.Group = exports.Format = exports.Font = exports.Export = exports.Colorizer = exports.Border = exports.TreeMap = void 0;\nvar tree_map_1 = require(\"devextreme/viz/tree_map\");\nvar PropTypes = require(\"prop-types\");\nvar component_1 = require(\"./core/component\");\nvar nested_option_1 = require(\"./core/nested-option\");\nvar TreeMap = /** @class */function (_super) {\n  __extends(TreeMap, _super);\n  function TreeMap() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this._WidgetClass = tree_map_1.default;\n    _this.subscribableOptions = [\"loadingIndicator\", \"loadingIndicator.show\"];\n    _this.independentEvents = [\"onClick\", \"onDisposing\", \"onDrawn\", \"onDrill\", \"onExported\", \"onExporting\", \"onFileSaving\", \"onIncidentOccurred\", \"onInitialized\", \"onNodesInitialized\", \"onNodesRendering\"];\n    _this._defaults = {\n      defaultLoadingIndicator: \"loadingIndicator\"\n    };\n    _this._expectedChildren = {\n      colorizer: {\n        optionName: \"colorizer\",\n        isCollectionItem: false\n      },\n      export: {\n        optionName: \"export\",\n        isCollectionItem: false\n      },\n      group: {\n        optionName: \"group\",\n        isCollectionItem: false\n      },\n      loadingIndicator: {\n        optionName: \"loadingIndicator\",\n        isCollectionItem: false\n      },\n      size: {\n        optionName: \"size\",\n        isCollectionItem: false\n      },\n      tile: {\n        optionName: \"tile\",\n        isCollectionItem: false\n      },\n      title: {\n        optionName: \"title\",\n        isCollectionItem: false\n      },\n      tooltip: {\n        optionName: \"tooltip\",\n        isCollectionItem: false\n      }\n    };\n    return _this;\n  }\n  Object.defineProperty(TreeMap.prototype, \"instance\", {\n    get: function get() {\n      return this._instance;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return TreeMap;\n}(component_1.Component);\nexports.TreeMap = TreeMap;\nTreeMap.propTypes = {\n  childrenField: PropTypes.string,\n  colorField: PropTypes.string,\n  colorizer: PropTypes.object,\n  disabled: PropTypes.bool,\n  elementAttr: PropTypes.object,\n  export: PropTypes.object,\n  group: PropTypes.object,\n  hoverEnabled: PropTypes.bool,\n  idField: PropTypes.string,\n  interactWithGroup: PropTypes.bool,\n  labelField: PropTypes.string,\n  layoutAlgorithm: PropTypes.oneOfType([PropTypes.func, PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([\"sliceanddice\", \"squarified\", \"strip\"])])]),\n  layoutDirection: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([\"leftBottomRightTop\", \"leftTopRightBottom\", \"rightBottomLeftTop\", \"rightTopLeftBottom\"])]),\n  loadingIndicator: PropTypes.object,\n  maxDepth: PropTypes.number,\n  onClick: PropTypes.func,\n  onDisposing: PropTypes.func,\n  onDrawn: PropTypes.func,\n  onDrill: PropTypes.func,\n  onExported: PropTypes.func,\n  onExporting: PropTypes.func,\n  onFileSaving: PropTypes.func,\n  onHoverChanged: PropTypes.func,\n  onIncidentOccurred: PropTypes.func,\n  onInitialized: PropTypes.func,\n  onNodesInitialized: PropTypes.func,\n  onNodesRendering: PropTypes.func,\n  onOptionChanged: PropTypes.func,\n  onSelectionChanged: PropTypes.func,\n  parentField: PropTypes.string,\n  pathModified: PropTypes.bool,\n  redrawOnResize: PropTypes.bool,\n  rtlEnabled: PropTypes.bool,\n  selectionMode: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([\"single\", \"multiple\", \"none\"])]),\n  size: PropTypes.object,\n  theme: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([\"generic.dark\", \"generic.light\", \"generic.contrast\", \"generic.carmine\", \"generic.darkmoon\", \"generic.darkviolet\", \"generic.greenmist\", \"generic.softblue\", \"material.blue.light\", \"material.lime.light\", \"material.orange.light\", \"material.purple.light\", \"material.teal.light\"])]),\n  tile: PropTypes.object,\n  title: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  tooltip: PropTypes.object,\n  valueField: PropTypes.string\n};\nvar Border = /** @class */function (_super) {\n  __extends(Border, _super);\n  function Border() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Border.OptionName = \"border\";\n  return Border;\n}(nested_option_1.default);\nexports.Border = Border;\nvar Colorizer = /** @class */function (_super) {\n  __extends(Colorizer, _super);\n  function Colorizer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Colorizer.OptionName = \"colorizer\";\n  return Colorizer;\n}(nested_option_1.default);\nexports.Colorizer = Colorizer;\nvar Export = /** @class */function (_super) {\n  __extends(Export, _super);\n  function Export() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Export.OptionName = \"export\";\n  return Export;\n}(nested_option_1.default);\nexports.Export = Export;\nvar Font = /** @class */function (_super) {\n  __extends(Font, _super);\n  function Font() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Font.OptionName = \"font\";\n  return Font;\n}(nested_option_1.default);\nexports.Font = Font;\nvar Format = /** @class */function (_super) {\n  __extends(Format, _super);\n  function Format() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Format.OptionName = \"format\";\n  return Format;\n}(nested_option_1.default);\nexports.Format = Format;\nvar Group = /** @class */function (_super) {\n  __extends(Group, _super);\n  function Group() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Group.OptionName = \"group\";\n  Group.ExpectedChildren = {\n    border: {\n      optionName: \"border\",\n      isCollectionItem: false\n    },\n    groupLabel: {\n      optionName: \"label\",\n      isCollectionItem: false\n    },\n    hoverStyle: {\n      optionName: \"hoverStyle\",\n      isCollectionItem: false\n    },\n    label: {\n      optionName: \"label\",\n      isCollectionItem: false\n    },\n    selectionStyle: {\n      optionName: \"selectionStyle\",\n      isCollectionItem: false\n    },\n    treeMapborder: {\n      optionName: \"border\",\n      isCollectionItem: false\n    }\n  };\n  return Group;\n}(nested_option_1.default);\nexports.Group = Group;\nvar GroupLabel = /** @class */function (_super) {\n  __extends(GroupLabel, _super);\n  function GroupLabel() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  GroupLabel.OptionName = \"label\";\n  GroupLabel.ExpectedChildren = {\n    font: {\n      optionName: \"font\",\n      isCollectionItem: false\n    }\n  };\n  return GroupLabel;\n}(nested_option_1.default);\nexports.GroupLabel = GroupLabel;\nvar HoverStyle = /** @class */function (_super) {\n  __extends(HoverStyle, _super);\n  function HoverStyle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  HoverStyle.OptionName = \"hoverStyle\";\n  return HoverStyle;\n}(nested_option_1.default);\nexports.HoverStyle = HoverStyle;\nvar Label = /** @class */function (_super) {\n  __extends(Label, _super);\n  function Label() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Label.OptionName = \"label\";\n  return Label;\n}(nested_option_1.default);\nexports.Label = Label;\nvar LoadingIndicator = /** @class */function (_super) {\n  __extends(LoadingIndicator, _super);\n  function LoadingIndicator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  LoadingIndicator.OptionName = \"loadingIndicator\";\n  LoadingIndicator.DefaultsProps = {\n    defaultShow: \"show\"\n  };\n  LoadingIndicator.ExpectedChildren = {\n    font: {\n      optionName: \"font\",\n      isCollectionItem: false\n    }\n  };\n  return LoadingIndicator;\n}(nested_option_1.default);\nexports.LoadingIndicator = LoadingIndicator;\nvar Margin = /** @class */function (_super) {\n  __extends(Margin, _super);\n  function Margin() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Margin.OptionName = \"margin\";\n  return Margin;\n}(nested_option_1.default);\nexports.Margin = Margin;\nvar SelectionStyle = /** @class */function (_super) {\n  __extends(SelectionStyle, _super);\n  function SelectionStyle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  SelectionStyle.OptionName = \"selectionStyle\";\n  return SelectionStyle;\n}(nested_option_1.default);\nexports.SelectionStyle = SelectionStyle;\nvar Shadow = /** @class */function (_super) {\n  __extends(Shadow, _super);\n  function Shadow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Shadow.OptionName = \"shadow\";\n  return Shadow;\n}(nested_option_1.default);\nexports.Shadow = Shadow;\nvar Size = /** @class */function (_super) {\n  __extends(Size, _super);\n  function Size() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Size.OptionName = \"size\";\n  return Size;\n}(nested_option_1.default);\nexports.Size = Size;\nvar Subtitle = /** @class */function (_super) {\n  __extends(Subtitle, _super);\n  function Subtitle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Subtitle.OptionName = \"subtitle\";\n  Subtitle.ExpectedChildren = {\n    font: {\n      optionName: \"font\",\n      isCollectionItem: false\n    }\n  };\n  return Subtitle;\n}(nested_option_1.default);\nexports.Subtitle = Subtitle;\nvar Tile = /** @class */function (_super) {\n  __extends(Tile, _super);\n  function Tile() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Tile.OptionName = \"tile\";\n  Tile.ExpectedChildren = {\n    border: {\n      optionName: \"border\",\n      isCollectionItem: false\n    },\n    hoverStyle: {\n      optionName: \"hoverStyle\",\n      isCollectionItem: false\n    },\n    label: {\n      optionName: \"label\",\n      isCollectionItem: false\n    },\n    selectionStyle: {\n      optionName: \"selectionStyle\",\n      isCollectionItem: false\n    },\n    tileLabel: {\n      optionName: \"label\",\n      isCollectionItem: false\n    },\n    treeMapborder: {\n      optionName: \"border\",\n      isCollectionItem: false\n    }\n  };\n  return Tile;\n}(nested_option_1.default);\nexports.Tile = Tile;\nvar TileLabel = /** @class */function (_super) {\n  __extends(TileLabel, _super);\n  function TileLabel() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TileLabel.OptionName = \"label\";\n  TileLabel.ExpectedChildren = {\n    font: {\n      optionName: \"font\",\n      isCollectionItem: false\n    }\n  };\n  return TileLabel;\n}(nested_option_1.default);\nexports.TileLabel = TileLabel;\nvar Title = /** @class */function (_super) {\n  __extends(Title, _super);\n  function Title() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Title.OptionName = \"title\";\n  Title.ExpectedChildren = {\n    font: {\n      optionName: \"font\",\n      isCollectionItem: false\n    },\n    margin: {\n      optionName: \"margin\",\n      isCollectionItem: false\n    },\n    subtitle: {\n      optionName: \"subtitle\",\n      isCollectionItem: false\n    }\n  };\n  return Title;\n}(nested_option_1.default);\nexports.Title = Title;\nvar Tooltip = /** @class */function (_super) {\n  __extends(Tooltip, _super);\n  function Tooltip() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Tooltip.OptionName = \"tooltip\";\n  Tooltip.ExpectedChildren = {\n    border: {\n      optionName: \"border\",\n      isCollectionItem: false\n    },\n    font: {\n      optionName: \"font\",\n      isCollectionItem: false\n    },\n    format: {\n      optionName: \"format\",\n      isCollectionItem: false\n    },\n    shadow: {\n      optionName: \"shadow\",\n      isCollectionItem: false\n    },\n    tooltipBorder: {\n      optionName: \"border\",\n      isCollectionItem: false\n    }\n  };\n  Tooltip.TemplateProps = [{\n    tmplOption: \"contentTemplate\",\n    render: \"contentRender\",\n    component: \"contentComponent\",\n    keyFn: \"contentKeyFn\"\n  }];\n  return Tooltip;\n}(nested_option_1.default);\nexports.Tooltip = Tooltip;\nvar TooltipBorder = /** @class */function (_super) {\n  __extends(TooltipBorder, _super);\n  function TooltipBorder() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TooltipBorder.OptionName = \"border\";\n  return TooltipBorder;\n}(nested_option_1.default);\nexports.TooltipBorder = TooltipBorder;\nvar TreeMapborder = /** @class */function (_super) {\n  __extends(TreeMapborder, _super);\n  function TreeMapborder() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TreeMapborder.OptionName = \"border\";\n  return TreeMapborder;\n}(nested_option_1.default);\nexports.TreeMapborder = TreeMapborder;\nexports.default = TreeMap;","map":null,"metadata":{},"sourceType":"script"}