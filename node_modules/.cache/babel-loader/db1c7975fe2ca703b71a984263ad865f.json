{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\MySiteReact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\MySiteReact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\MySiteReact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\MySiteReact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\MySiteReact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\MySiteReact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n/**\r\n * DevExtreme (esm/ui/toolbar/internal/ui.toolbar.menu.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterHeight } from \"../../../core/utils/size\";\nimport $ from \"../../../core/renderer\";\nimport devices from \"../../../core/devices\";\nimport { extend } from \"../../../core/utils/extend\";\nimport Widget from \"../../widget/ui.widget\";\nimport Button from \"../../button\";\nimport ToolbarMenuList from \"./ui.toolbar.menu.list\";\nimport { isMaterial } from \"../../themes\";\nimport { ChildDefaultTemplate } from \"../../../core/templates/child_default_template\";\nimport { toggleItemFocusableElementTabIndex } from \"../ui.toolbar.utils\";\nimport { getWindow } from \"../../../core/utils/window\";\nimport \"../../popup\";\nvar DROP_DOWN_MENU_CLASS = \"dx-dropdownmenu\";\nvar DROP_DOWN_MENU_POPUP_CLASS = \"dx-dropdownmenu-popup\";\nvar DROP_DOWN_MENU_POPUP_WRAPPER_CLASS = \"dx-dropdownmenu-popup-wrapper\";\nvar DROP_DOWN_MENU_LIST_CLASS = \"dx-dropdownmenu-list\";\nvar DROP_DOWN_MENU_BUTTON_CLASS = \"dx-dropdownmenu-button\";\nvar POPUP_BOUNDARY_VERTICAL_OFFSET = 10;\nvar POPUP_VERTICAL_OFFSET = 3;\nvar DropDownMenu = /*#__PURE__*/function (_Widget) {\n  _inherits(DropDownMenu, _Widget);\n  function DropDownMenu() {\n    _classCallCheck(this, DropDownMenu);\n    return _possibleConstructorReturn(this, _getPrototypeOf(DropDownMenu).apply(this, arguments));\n  }\n  _createClass(DropDownMenu, [{\n    key: \"_supportedKeys\",\n    value: function _supportedKeys() {\n      var extension = {};\n      if (!this.option(\"opened\") || !this._list.option(\"focusedElement\")) {\n        extension = this._button._supportedKeys();\n      }\n      return extend(_get(_getPrototypeOf(DropDownMenu.prototype), \"_supportedKeys\", this).call(this), extension, {\n        tab: function tab() {\n          this._popup && this._popup.hide();\n        }\n      });\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(DropDownMenu.prototype), \"_getDefaultOptions\", this).call(this), {\n        items: [],\n        onItemClick: null,\n        dataSource: null,\n        itemTemplate: \"item\",\n        onButtonClick: null,\n        activeStateEnabled: true,\n        hoverStateEnabled: true,\n        opened: false,\n        onItemRendered: null,\n        closeOnClick: true,\n        useInkRipple: false,\n        container: void 0,\n        animation: {\n          show: {\n            type: \"fade\",\n            from: 0,\n            to: 1\n          },\n          hide: {\n            type: \"fade\",\n            to: 0\n          }\n        }\n      });\n    }\n  }, {\n    key: \"_defaultOptionsRules\",\n    value: function _defaultOptionsRules() {\n      return _get(_getPrototypeOf(DropDownMenu.prototype), \"_defaultOptionsRules\", this).call(this).concat([{\n        device: function device() {\n          return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n        },\n        options: {\n          focusStateEnabled: true\n        }\n      }, {\n        device: function device() {\n          return isMaterial();\n        },\n        options: {\n          useInkRipple: true,\n          animation: {\n            show: {\n              type: \"pop\",\n              duration: 200,\n              from: {\n                scale: 0\n              },\n              to: {\n                scale: 1\n              }\n            },\n            hide: {\n              type: \"pop\",\n              duration: 200,\n              from: {\n                scale: 1\n              },\n              to: {\n                scale: 0\n              }\n            }\n          }\n        }\n      }]);\n    }\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      _get(_getPrototypeOf(DropDownMenu.prototype), \"_init\", this).call(this);\n      this.$element().addClass(DROP_DOWN_MENU_CLASS);\n      this._initItemClickAction();\n      this._initButtonClickAction();\n    }\n  }, {\n    key: \"_initItemClickAction\",\n    value: function _initItemClickAction() {\n      this._itemClickAction = this._createActionByOption(\"onItemClick\");\n    }\n  }, {\n    key: \"_initButtonClickAction\",\n    value: function _initButtonClickAction() {\n      this._buttonClickAction = this._createActionByOption(\"onButtonClick\");\n    }\n  }, {\n    key: \"_initTemplates\",\n    value: function _initTemplates() {\n      this._templateManager.addDefaultTemplates({\n        content: new ChildDefaultTemplate(\"content\")\n      });\n      _get(_getPrototypeOf(DropDownMenu.prototype), \"_initTemplates\", this).call(this);\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      this._renderButton();\n      _get(_getPrototypeOf(DropDownMenu.prototype), \"_initMarkup\", this).call(this);\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      _get(_getPrototypeOf(DropDownMenu.prototype), \"_render\", this).call(this);\n      this.setAria({\n        role: \"menubar\",\n        haspopup: true,\n        expanded: this.option(\"opened\")\n      });\n    }\n  }, {\n    key: \"_renderContentImpl\",\n    value: function _renderContentImpl() {\n      if (this.option(\"opened\")) {\n        this._renderPopup();\n      }\n    }\n  }, {\n    key: \"_clean\",\n    value: function _clean() {\n      this._cleanFocusState();\n      this._list && this._list.$element().remove();\n      this._popup && this._popup.$element().remove();\n      delete this._list;\n      delete this._popup;\n    }\n  }, {\n    key: \"_renderButton\",\n    value: function _renderButton() {\n      var _this = this;\n      var $button = this.$element().addClass(DROP_DOWN_MENU_BUTTON_CLASS);\n      this._button = this._createComponent($button, Button, {\n        icon: \"overflow\",\n        template: \"content\",\n        useInkRipple: this.option(\"useInkRipple\"),\n        hoverStateEnabled: false,\n        focusStateEnabled: false,\n        onClick: function onClick(e) {\n          _this.option(\"opened\", !_this.option(\"opened\"));\n          _this._buttonClickAction(e);\n        }\n      });\n    }\n  }, {\n    key: \"_toggleActiveState\",\n    value: function _toggleActiveState($element, value, e) {\n      this._button._toggleActiveState($element, value, e);\n    }\n  }, {\n    key: \"_toggleMenuVisibility\",\n    value: function _toggleMenuVisibility(opened) {\n      var state = null !== opened && void 0 !== opened ? opened : !this._popup.option(\"visible\");\n      if (opened) {\n        this._renderPopup();\n      }\n      this._popup.toggle(state);\n      this.setAria(\"expanded\", state);\n    }\n  }, {\n    key: \"_renderPopup\",\n    value: function _renderPopup() {\n      var _this2 = this;\n      if (this._$popup) {\n        return;\n      }\n      this._$popup = $(\"<div>\").appendTo(this.$element());\n      var _this$option2 = this.option(),\n        rtlEnabled = _this$option2.rtlEnabled,\n        container = _this$option2.container,\n        animation = _this$option2.animation;\n      this._popup = this._createComponent(this._$popup, \"dxPopup\", {\n        onInitialized: function onInitialized(_ref) {\n          var component = _ref.component;\n          component.$wrapper().addClass(DROP_DOWN_MENU_POPUP_WRAPPER_CLASS).addClass(DROP_DOWN_MENU_POPUP_CLASS);\n        },\n        deferRendering: false,\n        contentTemplate: function contentTemplate(contentElement) {\n          return _this2._renderList(contentElement);\n        },\n        _ignoreFunctionValueDeprecation: true,\n        maxHeight: function maxHeight() {\n          return _this2._getMaxHeight();\n        },\n        position: {\n          my: \"top \".concat(rtlEnabled ? \"left\" : \"right\"),\n          at: \"bottom \".concat(rtlEnabled ? \"left\" : \"right\"),\n          collision: \"fit flip\",\n          offset: {\n            v: POPUP_VERTICAL_OFFSET\n          },\n          of: this.$element()\n        },\n        animation: animation,\n        onOptionChanged: function onOptionChanged(_ref2) {\n          var name = _ref2.name,\n            value = _ref2.value;\n          if (\"visible\" === name) {\n            _this2.option(\"opened\", value);\n          }\n        },\n        container: container,\n        autoResizeEnabled: false,\n        height: \"auto\",\n        width: \"auto\",\n        hideOnOutsideClick: function hideOnOutsideClick(e) {\n          return _this2._closeOutsideDropDownHandler(e);\n        },\n        hideOnParentScroll: true,\n        shading: false,\n        dragEnabled: false,\n        showTitle: false,\n        fullScreen: false,\n        _fixWrapperPosition: true\n      });\n    }\n  }, {\n    key: \"_getMaxHeight\",\n    value: function _getMaxHeight() {\n      var $element = this.$element();\n      var offsetTop = $element.offset().top;\n      var windowHeight = getOuterHeight(getWindow());\n      var maxHeight = Math.max(offsetTop, windowHeight - offsetTop - getOuterHeight($element));\n      return Math.min(windowHeight, maxHeight - POPUP_VERTICAL_OFFSET - POPUP_BOUNDARY_VERTICAL_OFFSET);\n    }\n  }, {\n    key: \"_closeOutsideDropDownHandler\",\n    value: function _closeOutsideDropDownHandler(e) {\n      var isOutsideClick = !$(e.target).closest(this.$element()).length;\n      return isOutsideClick;\n    }\n  }, {\n    key: \"_renderList\",\n    value: function _renderList(contentElement) {\n      var _this3 = this;\n      var $content = $(contentElement);\n      $content.addClass(DROP_DOWN_MENU_LIST_CLASS);\n      this._list = this._createComponent($content, ToolbarMenuList, {\n        dataSource: this._getListDataSource(),\n        pageLoadMode: \"scrollBottom\",\n        indicateLoading: false,\n        noDataText: \"\",\n        itemTemplate: this.option(\"itemTemplate\"),\n        onItemClick: function onItemClick(e) {\n          if (_this3.option(\"closeOnClick\")) {\n            _this3.option(\"opened\", false);\n          }\n          _this3._itemClickAction(e);\n        },\n        tabIndex: -1,\n        focusStateEnabled: false,\n        activeStateEnabled: true,\n        onItemRendered: this.option(\"onItemRendered\"),\n        _areaTarget: this.$element(),\n        _itemAttributes: {\n          role: \"menuitem\"\n        }\n      });\n    }\n  }, {\n    key: \"_itemOptionChanged\",\n    value: function _itemOptionChanged(item, property, value) {\n      var _this$_list;\n      null === (_this$_list = this._list) || void 0 === _this$_list ? void 0 : _this$_list._itemOptionChanged(item, property, value);\n      toggleItemFocusableElementTabIndex(this._list, item);\n    }\n  }, {\n    key: \"_getListDataSource\",\n    value: function _getListDataSource() {\n      var _this$option;\n      return null !== (_this$option = this.option(\"dataSource\")) && void 0 !== _this$option ? _this$option : this.option(\"items\");\n    }\n  }, {\n    key: \"_setListDataSource\",\n    value: function _setListDataSource() {\n      var _this$_list2;\n      null === (_this$_list2 = this._list) || void 0 === _this$_list2 ? void 0 : _this$_list2.option(\"dataSource\", this._getListDataSource());\n      delete this._deferRendering;\n    }\n  }, {\n    key: \"_getKeyboardListeners\",\n    value: function _getKeyboardListeners() {\n      return _get(_getPrototypeOf(DropDownMenu.prototype), \"_getKeyboardListeners\", this).call(this).concat([this._list]);\n    }\n  }, {\n    key: \"_toggleVisibility\",\n    value: function _toggleVisibility(visible) {\n      _get(_getPrototypeOf(DropDownMenu.prototype), \"_toggleVisibility\", this).call(this, visible);\n      this._button.option(\"visible\", visible);\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var _this$_list3, _this$_list4, _this$_list5;\n      var name = args.name,\n        value = args.value;\n      switch (name) {\n        case \"items\":\n        case \"dataSource\":\n          if (!this.option(\"opened\")) {\n            this._deferRendering = true;\n          } else {\n            this._setListDataSource();\n          }\n          break;\n        case \"itemTemplate\":\n          null === (_this$_list3 = this._list) || void 0 === _this$_list3 ? void 0 : _this$_list3.option(name, this._getTemplate(value));\n          break;\n        case \"onItemClick\":\n          this._initItemClickAction();\n          break;\n        case \"onButtonClick\":\n          this._buttonClickAction();\n          break;\n        case \"useInkRipple\":\n          this._invalidate();\n          break;\n        case \"focusStateEnabled\":\n          null === (_this$_list4 = this._list) || void 0 === _this$_list4 ? void 0 : _this$_list4.option(name, value);\n          _get(_getPrototypeOf(DropDownMenu.prototype), \"_optionChanged\", this).call(this, args);\n          break;\n        case \"onItemRendered\":\n          null === (_this$_list5 = this._list) || void 0 === _this$_list5 ? void 0 : _this$_list5.option(name, value);\n          break;\n        case \"opened\":\n          if (this._deferRendering) {\n            this._setListDataSource();\n          }\n          this._toggleMenuVisibility(value);\n          this._updateFocusableItemsTabIndex();\n          break;\n        case \"closeOnClick\":\n          break;\n        case \"container\":\n          this._popup && this._popup.option(name, value);\n          break;\n        case \"disabled\":\n          if (this._list) {\n            this._updateFocusableItemsTabIndex();\n          }\n          break;\n        default:\n          _get(_getPrototypeOf(DropDownMenu.prototype), \"_optionChanged\", this).call(this, args);\n      }\n    }\n  }, {\n    key: \"_updateFocusableItemsTabIndex\",\n    value: function _updateFocusableItemsTabIndex() {\n      var _this4 = this;\n      this.option(\"items\").forEach(function (item) {\n        return toggleItemFocusableElementTabIndex(_this4._list, item);\n      });\n    }\n  }]);\n  return DropDownMenu;\n}(Widget);\nexport { DropDownMenu as default };","map":null,"metadata":{},"sourceType":"module"}