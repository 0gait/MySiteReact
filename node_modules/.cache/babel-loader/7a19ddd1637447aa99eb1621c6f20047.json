{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n/**\r\n * DevExtreme (esm/renovation/ui/scheduler/appointment/layout.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"isAllDay\"];\nimport { createVNode, createComponentVNode } from \"inferno\";\nimport { InfernoEffect, InfernoWrapperComponent } from \"@devextreme/runtime/inferno\";\nimport { Appointment } from \"./appointment\";\nimport { OverflowIndicator } from \"./overflow_indicator/layout\";\nimport { combineClasses } from \"../../../utils/combine_classes\";\nimport { AppointmentsContext } from \"../appointments_context\";\nimport { subscribeToDXPointerDownEvent } from \"../../../utils/subscribe_to_event\";\nvar SELECTOR = {\n  appointment: \".dx-scheduler-appointment\",\n  allDay: \"dx-scheduler-all-day-appointment\",\n  collector: \"dx-scheduler-appointment-collector\"\n};\nexport var viewFunction = function viewFunction(_ref) {\n  var appointments = _ref.appointments,\n    _ref$appointmentsCont = _ref.appointmentsContextValue,\n    appointmentTemplate = _ref$appointmentsCont.appointmentTemplate,\n    groups = _ref$appointmentsCont.groups,\n    hideReducedIconTooltip = _ref$appointmentsCont.hideReducedIconTooltip,\n    onAppointmentClick = _ref$appointmentsCont.onAppointmentClick,\n    onAppointmentDoubleClick = _ref$appointmentsCont.onAppointmentDoubleClick,\n    overflowIndicatorTemplate = _ref$appointmentsCont.overflowIndicatorTemplate,\n    showReducedIconTooltip = _ref$appointmentsCont.showReducedIconTooltip,\n    classes = _ref.classes,\n    layoutRef = _ref.layoutRef,\n    overflowIndicators = _ref.overflowIndicators;\n  return createVNode(1, \"div\", classes, [appointments.map(function (item, index) {\n    return createComponentVNode(2, Appointment, {\n      viewModel: item,\n      appointmentTemplate: appointmentTemplate,\n      index: index,\n      groups: groups,\n      onItemClick: onAppointmentClick,\n      onItemDoubleClick: onAppointmentDoubleClick,\n      showReducedIconTooltip: showReducedIconTooltip,\n      hideReducedIconTooltip: hideReducedIconTooltip\n    }, item.key);\n  }), overflowIndicators.map(function (item, index) {\n    return createComponentVNode(2, OverflowIndicator, {\n      viewModel: item,\n      groups: groups,\n      overflowIndicatorTemplate: overflowIndicatorTemplate,\n      \"data-index\": index\n    }, item.key);\n  })], 0, null, null, layoutRef);\n};\nexport var AppointmentLayoutProps = {\n  isAllDay: false\n};\nimport { createReRenderEffect } from \"@devextreme/runtime/inferno\";\nimport { createRef as infernoCreateRef } from \"inferno\";\nexport var AppointmentLayout = /*#__PURE__*/function (_InfernoWrapperCompon) {\n  _inherits(AppointmentLayout, _InfernoWrapperCompon);\n  function AppointmentLayout(props) {\n    var _this;\n    _classCallCheck(this, AppointmentLayout);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AppointmentLayout).call(this, props));\n    _this.state = {};\n    _this.layoutRef = infernoCreateRef();\n    _this.__getterCache = {};\n    _this.pointerEventsEffect = _this.pointerEventsEffect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onAppointmentPointerDown = _this.onAppointmentPointerDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  _createClass(AppointmentLayout, [{\n    key: \"createEffects\",\n    value: function createEffects() {\n      return [new InfernoEffect(this.pointerEventsEffect, [this.appointmentsContextValue]), createReRenderEffect()];\n    }\n  }, {\n    key: \"updateEffects\",\n    value: function updateEffects() {\n      var _this$_effects$;\n      null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.appointmentsContextValue]);\n    }\n  }, {\n    key: \"pointerEventsEffect\",\n    value: function pointerEventsEffect() {\n      var _this2 = this;\n      var disposePointerDown = subscribeToDXPointerDownEvent(this.layoutRef.current, function (e) {\n        return _this2.onAppointmentPointerDown(e);\n      });\n      return function () {\n        disposePointerDown();\n      };\n    }\n  }, {\n    key: \"onAppointmentPointerDown\",\n    value: function onAppointmentPointerDown(e) {\n      var appointmentElement = e.target.closest(SELECTOR.appointment);\n      if (appointmentElement) {\n        var index = appointmentElement.dataset.index;\n        var focusedAppointmentIndex = index ? parseInt(index, 10) : -1;\n        var isAllDay = appointmentElement.classList.contains(SELECTOR.allDay);\n        var isCompact = appointmentElement.classList.contains(SELECTOR.collector);\n        var typeMap = {\n          allDayCompact: isAllDay && isCompact,\n          allDay: isAllDay && !isCompact,\n          regularCompact: !isAllDay && isCompact,\n          regular: !isAllDay && !isCompact\n        };\n        var appointmentType = Object.entries(typeMap).filter(function (item) {\n          return item[1];\n        })[0][0];\n        this.appointmentsContextValue.updateFocusedAppointment(appointmentType, focusedAppointmentIndex);\n      }\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(nextProps, nextState, context) {\n      _get(_getPrototypeOf(AppointmentLayout.prototype), \"componentWillUpdate\", this).call(this);\n      if (this.props.isAllDay !== nextProps.isAllDay || this.context[AppointmentsContext.id] !== context[AppointmentsContext.id]) {\n        this.__getterCache.appointments = void 0;\n      }\n      if (this.props.isAllDay !== nextProps.isAllDay || this.context[AppointmentsContext.id] !== context[AppointmentsContext.id]) {\n        this.__getterCache.overflowIndicators = void 0;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props),\n        layoutRef: this.layoutRef,\n        appointmentsContextValue: this.appointmentsContextValue,\n        classes: this.classes,\n        appointments: this.appointments,\n        overflowIndicators: this.overflowIndicators,\n        onAppointmentPointerDown: this.onAppointmentPointerDown,\n        restAttributes: this.restAttributes\n      });\n    }\n  }, {\n    key: \"appointmentsContextValue\",\n    get: function get() {\n      if (this.context[AppointmentsContext.id]) {\n        return this.context[AppointmentsContext.id];\n      }\n      return AppointmentsContext.defaultValue;\n    }\n  }, {\n    key: \"classes\",\n    get: function get() {\n      var isAllDay = this.props.isAllDay;\n      return combineClasses({\n        \"dx-scheduler-scrollable-appointments\": !isAllDay,\n        \"dx-scheduler-all-day-appointments\": isAllDay\n      });\n    }\n  }, {\n    key: \"appointments\",\n    get: function get() {\n      var _this3 = this;\n      if (void 0 !== this.__getterCache.appointments) {\n        return this.__getterCache.appointments;\n      }\n      return this.__getterCache.appointments = function () {\n        if (_this3.props.isAllDay) {\n          return _this3.appointmentsContextValue.viewModel.allDay;\n        }\n        return _this3.appointmentsContextValue.viewModel.regular;\n      }();\n    }\n  }, {\n    key: \"overflowIndicators\",\n    get: function get() {\n      var _this4 = this;\n      if (void 0 !== this.__getterCache.overflowIndicators) {\n        return this.__getterCache.overflowIndicators;\n      }\n      return this.__getterCache.overflowIndicators = function () {\n        if (_this4.props.isAllDay) {\n          return _this4.appointmentsContextValue.viewModel.allDayCompact;\n        }\n        return _this4.appointmentsContextValue.viewModel.regularCompact;\n      }();\n    }\n  }, {\n    key: \"restAttributes\",\n    get: function get() {\n      var _this$props = this.props,\n        restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n      return restProps;\n    }\n  }]);\n  return AppointmentLayout;\n}(InfernoWrapperComponent);\nAppointmentLayout.defaultProps = AppointmentLayoutProps;","map":null,"metadata":{},"sourceType":"module"}