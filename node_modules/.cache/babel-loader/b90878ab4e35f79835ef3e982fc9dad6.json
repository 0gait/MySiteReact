{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\MySiteReact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar NUMBER_STYLES = new Set(['animationIterationCount', 'borderImageOutset', 'borderImageSlice', 'border-imageWidth', 'boxFlex', 'boxFlexGroup', 'boxOrdinalGroup', 'columnCount', 'fillOpacity', 'flex', 'flexGrow', 'flexNegative', 'flexOrder', 'flexPositive', 'flexShrink', 'floodOpacity', 'fontWeight', 'gridColumn', 'gridRow', 'lineClamp', 'lineHeight', 'opacity', 'order', 'orphans', 'stopOpacity', 'strokeDasharray', 'strokeDashoffset', 'strokeMiterlimit', 'strokeOpacity', 'strokeWidth', 'tabSize', 'widows', 'zIndex', 'zoom']);\nvar isNumeric = function isNumeric(value) {\n  if (typeof value === 'number') return true;\n  return !Number.isNaN(Number(value));\n};\nvar getNumberStyleValue = function getNumberStyleValue(style, value) {\n  return NUMBER_STYLES.has(style) ? value : \"\".concat(value, \"px\");\n};\nvar uppercasePattern = /[A-Z]/g;\nvar kebabCase = function kebabCase(str) {\n  return str.replace(uppercasePattern, '-$&').toLowerCase();\n};\nexport function normalizeStyles(styles) {\n  if (!(styles instanceof Object)) {\n    return undefined;\n  }\n  return Object.entries(styles).reduce(function (acc, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      key = _ref2[0],\n      value = _ref2[1];\n    acc[kebabCase(key)] = isNumeric(value) ? getNumberStyleValue(key, value) : value;\n    return acc;\n  }, {});\n}","map":null,"metadata":{},"sourceType":"module"}