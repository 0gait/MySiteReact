{"ast":null,"code":"/*!\n * devextreme-react\n * Version: 22.2.4\n * Build date: Thu Jan 19 2023\n *\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Upload = exports.ToolbarItem = exports.Toolbar = exports.Permissions = exports.Notifications = exports.ItemView = exports.Item = exports.FileSelectionItem = exports.Details = exports.ContextMenuItem = exports.ContextMenu = exports.Column = exports.FileManager = void 0;\nvar file_manager_1 = require(\"devextreme/ui/file_manager\");\nvar PropTypes = require(\"prop-types\");\nvar component_1 = require(\"./core/component\");\nvar nested_option_1 = require(\"./core/nested-option\");\nvar FileManager = /** @class */function (_super) {\n  __extends(FileManager, _super);\n  function FileManager() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this._WidgetClass = file_manager_1.default;\n    _this.independentEvents = [\"onContentReady\", \"onContextMenuItemClick\", \"onContextMenuShowing\", \"onDirectoryCreated\", \"onDirectoryCreating\", \"onDisposing\", \"onErrorOccurred\", \"onFileUploaded\", \"onFileUploading\", \"onInitialized\", \"onItemCopied\", \"onItemCopying\", \"onItemDeleted\", \"onItemDeleting\", \"onItemDownloading\", \"onItemMoved\", \"onItemMoving\", \"onItemRenamed\", \"onItemRenaming\", \"onSelectedFileOpened\", \"onToolbarItemClick\"];\n    _this._expectedChildren = {\n      contextMenu: {\n        optionName: \"contextMenu\",\n        isCollectionItem: false\n      },\n      itemView: {\n        optionName: \"itemView\",\n        isCollectionItem: false\n      },\n      notifications: {\n        optionName: \"notifications\",\n        isCollectionItem: false\n      },\n      permissions: {\n        optionName: \"permissions\",\n        isCollectionItem: false\n      },\n      toolbar: {\n        optionName: \"toolbar\",\n        isCollectionItem: false\n      },\n      upload: {\n        optionName: \"upload\",\n        isCollectionItem: false\n      }\n    };\n    return _this;\n  }\n  Object.defineProperty(FileManager.prototype, \"instance\", {\n    get: function get() {\n      return this._instance;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return FileManager;\n}(component_1.Component);\nexports.FileManager = FileManager;\nFileManager.propTypes = {\n  accessKey: PropTypes.string,\n  activeStateEnabled: PropTypes.bool,\n  allowedFileExtensions: PropTypes.array,\n  contextMenu: PropTypes.object,\n  currentPath: PropTypes.string,\n  currentPathKeys: PropTypes.array,\n  customizeDetailColumns: PropTypes.func,\n  customizeThumbnail: PropTypes.func,\n  disabled: PropTypes.bool,\n  elementAttr: PropTypes.object,\n  focusedItemKey: PropTypes.string,\n  focusStateEnabled: PropTypes.bool,\n  height: PropTypes.oneOfType([PropTypes.func, PropTypes.number, PropTypes.string]),\n  hint: PropTypes.string,\n  hoverStateEnabled: PropTypes.bool,\n  itemView: PropTypes.object,\n  notifications: PropTypes.object,\n  onContentReady: PropTypes.func,\n  onContextMenuItemClick: PropTypes.func,\n  onContextMenuShowing: PropTypes.func,\n  onCurrentDirectoryChanged: PropTypes.func,\n  onDirectoryCreated: PropTypes.func,\n  onDirectoryCreating: PropTypes.func,\n  onDisposing: PropTypes.func,\n  onErrorOccurred: PropTypes.func,\n  onFileUploaded: PropTypes.func,\n  onFileUploading: PropTypes.func,\n  onFocusedItemChanged: PropTypes.func,\n  onInitialized: PropTypes.func,\n  onItemCopied: PropTypes.func,\n  onItemCopying: PropTypes.func,\n  onItemDeleted: PropTypes.func,\n  onItemDeleting: PropTypes.func,\n  onItemDownloading: PropTypes.func,\n  onItemMoved: PropTypes.func,\n  onItemMoving: PropTypes.func,\n  onItemRenamed: PropTypes.func,\n  onItemRenaming: PropTypes.func,\n  onOptionChanged: PropTypes.func,\n  onSelectedFileOpened: PropTypes.func,\n  onSelectionChanged: PropTypes.func,\n  onToolbarItemClick: PropTypes.func,\n  permissions: PropTypes.object,\n  rootFolderName: PropTypes.string,\n  rtlEnabled: PropTypes.bool,\n  selectedItemKeys: PropTypes.array,\n  selectionMode: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([\"single\", \"multiple\"])]),\n  tabIndex: PropTypes.number,\n  toolbar: PropTypes.object,\n  upload: PropTypes.object,\n  visible: PropTypes.bool,\n  width: PropTypes.oneOfType([PropTypes.func, PropTypes.number, PropTypes.string])\n};\nvar Column = /** @class */function (_super) {\n  __extends(Column, _super);\n  function Column() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Column.OptionName = \"columns\";\n  Column.IsCollectionItem = true;\n  return Column;\n}(nested_option_1.default);\nexports.Column = Column;\nvar ContextMenu = /** @class */function (_super) {\n  __extends(ContextMenu, _super);\n  function ContextMenu() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ContextMenu.OptionName = \"contextMenu\";\n  ContextMenu.ExpectedChildren = {\n    contextMenuItem: {\n      optionName: \"items\",\n      isCollectionItem: true\n    },\n    item: {\n      optionName: \"items\",\n      isCollectionItem: true\n    }\n  };\n  return ContextMenu;\n}(nested_option_1.default);\nexports.ContextMenu = ContextMenu;\nvar ContextMenuItem = /** @class */function (_super) {\n  __extends(ContextMenuItem, _super);\n  function ContextMenuItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ContextMenuItem.OptionName = \"items\";\n  ContextMenuItem.IsCollectionItem = true;\n  ContextMenuItem.TemplateProps = [{\n    tmplOption: \"template\",\n    render: \"render\",\n    component: \"component\",\n    keyFn: \"keyFn\"\n  }];\n  return ContextMenuItem;\n}(nested_option_1.default);\nexports.ContextMenuItem = ContextMenuItem;\nvar Details = /** @class */function (_super) {\n  __extends(Details, _super);\n  function Details() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Details.OptionName = \"details\";\n  Details.ExpectedChildren = {\n    column: {\n      optionName: \"columns\",\n      isCollectionItem: true\n    }\n  };\n  return Details;\n}(nested_option_1.default);\nexports.Details = Details;\nvar FileSelectionItem = /** @class */function (_super) {\n  __extends(FileSelectionItem, _super);\n  function FileSelectionItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  FileSelectionItem.OptionName = \"fileSelectionItems\";\n  FileSelectionItem.IsCollectionItem = true;\n  FileSelectionItem.TemplateProps = [{\n    tmplOption: \"menuItemTemplate\",\n    render: \"menuItemRender\",\n    component: \"menuItemComponent\",\n    keyFn: \"menuItemKeyFn\"\n  }, {\n    tmplOption: \"template\",\n    render: \"render\",\n    component: \"component\",\n    keyFn: \"keyFn\"\n  }];\n  return FileSelectionItem;\n}(nested_option_1.default);\nexports.FileSelectionItem = FileSelectionItem;\nvar Item = /** @class */function (_super) {\n  __extends(Item, _super);\n  function Item() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Item.OptionName = \"items\";\n  Item.IsCollectionItem = true;\n  Item.TemplateProps = [{\n    tmplOption: \"template\",\n    render: \"render\",\n    component: \"component\",\n    keyFn: \"keyFn\"\n  }, {\n    tmplOption: \"menuItemTemplate\",\n    render: \"menuItemRender\",\n    component: \"menuItemComponent\",\n    keyFn: \"menuItemKeyFn\"\n  }];\n  return Item;\n}(nested_option_1.default);\nexports.Item = Item;\nvar ItemView = /** @class */function (_super) {\n  __extends(ItemView, _super);\n  function ItemView() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ItemView.OptionName = \"itemView\";\n  ItemView.ExpectedChildren = {\n    details: {\n      optionName: \"details\",\n      isCollectionItem: false\n    }\n  };\n  return ItemView;\n}(nested_option_1.default);\nexports.ItemView = ItemView;\nvar Notifications = /** @class */function (_super) {\n  __extends(Notifications, _super);\n  function Notifications() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Notifications.OptionName = \"notifications\";\n  return Notifications;\n}(nested_option_1.default);\nexports.Notifications = Notifications;\nvar Permissions = /** @class */function (_super) {\n  __extends(Permissions, _super);\n  function Permissions() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Permissions.OptionName = \"permissions\";\n  return Permissions;\n}(nested_option_1.default);\nexports.Permissions = Permissions;\nvar Toolbar = /** @class */function (_super) {\n  __extends(Toolbar, _super);\n  function Toolbar() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Toolbar.OptionName = \"toolbar\";\n  Toolbar.ExpectedChildren = {\n    fileSelectionItem: {\n      optionName: \"fileSelectionItems\",\n      isCollectionItem: true\n    },\n    item: {\n      optionName: \"items\",\n      isCollectionItem: true\n    },\n    toolbarItem: {\n      optionName: \"items\",\n      isCollectionItem: true\n    }\n  };\n  return Toolbar;\n}(nested_option_1.default);\nexports.Toolbar = Toolbar;\nvar ToolbarItem = /** @class */function (_super) {\n  __extends(ToolbarItem, _super);\n  function ToolbarItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ToolbarItem.OptionName = \"items\";\n  ToolbarItem.IsCollectionItem = true;\n  ToolbarItem.TemplateProps = [{\n    tmplOption: \"menuItemTemplate\",\n    render: \"menuItemRender\",\n    component: \"menuItemComponent\",\n    keyFn: \"menuItemKeyFn\"\n  }, {\n    tmplOption: \"template\",\n    render: \"render\",\n    component: \"component\",\n    keyFn: \"keyFn\"\n  }];\n  return ToolbarItem;\n}(nested_option_1.default);\nexports.ToolbarItem = ToolbarItem;\nvar Upload = /** @class */function (_super) {\n  __extends(Upload, _super);\n  function Upload() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Upload.OptionName = \"upload\";\n  return Upload;\n}(nested_option_1.default);\nexports.Upload = Upload;\nexports.default = FileManager;","map":null,"metadata":{},"sourceType":"script"}