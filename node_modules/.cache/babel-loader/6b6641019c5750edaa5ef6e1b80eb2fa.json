{"ast":null,"code":"/*!\n * devextreme-react\n * Version: 22.2.4\n * Build date: Thu Jan 19 2023\n *\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TemplateWrapper = void 0;\nvar events = require(\"devextreme/events\");\nvar React = require(\"react\");\nvar ReactDOM = require(\"react-dom\");\nvar component_base_1 = require(\"./component-base\");\nvar removalListenerStyle = {\n  display: 'none'\n};\nvar TableNodeNames;\n(function (TableNodeNames) {\n  TableNodeNames[\"TABLE\"] = \"tbody\";\n  TableNodeNames[\"TBODY\"] = \"tr\";\n})(TableNodeNames || (TableNodeNames = {}));\nvar TemplateWrapper = /** @class */function (_super) {\n  __extends(TemplateWrapper, _super);\n  function TemplateWrapper(props) {\n    var _this = _super.call(this, props) || this;\n    _this._removalListenerRef = React.createRef();\n    _this.state = {\n      removalListenerRequired: false\n    };\n    _this._onDxRemove = _this._onDxRemove.bind(_this);\n    _this.getPreviousSiblingNode = _this.getPreviousSiblingNode.bind(_this);\n    return _this;\n  }\n  TemplateWrapper.prototype.componentDidMount = function () {\n    var _a, _b;\n    this._subscribeOnRemove();\n    (_b = (_a = this.props).onDidMount) === null || _b === void 0 ? void 0 : _b.call(_a);\n  };\n  TemplateWrapper.prototype.componentDidUpdate = function () {\n    this._subscribeOnRemove();\n  };\n  TemplateWrapper.prototype.componentWillUnmount = function () {\n    // Let React remove it itself\n    var node = this.element;\n    var hiddenNode = this.hiddenElement;\n    var container = this.props.container;\n    if (node) {\n      container.appendChild(node);\n    }\n    if (hiddenNode) {\n      container.appendChild(hiddenNode);\n    }\n    if (this._listenerElement) {\n      container.appendChild(this._listenerElement);\n    }\n  };\n  Object.defineProperty(TemplateWrapper.prototype, \"_listenerElement\", {\n    get: function get() {\n      return this._removalListenerRef.current;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  TemplateWrapper.prototype.getPreviousSiblingNode = function (node) {\n    this.hiddenElement = node;\n    this.element = node === null || node === void 0 ? void 0 : node.previousSibling;\n  };\n  TemplateWrapper.prototype._subscribeOnRemove = function () {\n    var node = this.element;\n    var removalListenerRequired = this.state.removalListenerRequired;\n    if (node && node.nodeType === Node.ELEMENT_NODE) {\n      this._subscribeOnElementRemoval(node);\n      return;\n    }\n    if (!removalListenerRequired) {\n      this.setState({\n        removalListenerRequired: true\n      });\n      return;\n    }\n    if (this._listenerElement) {\n      this._subscribeOnElementRemoval(this._listenerElement);\n    }\n  };\n  TemplateWrapper.prototype._subscribeOnElementRemoval = function (element) {\n    events.off(element, component_base_1.DX_REMOVE_EVENT, this._onDxRemove);\n    events.one(element, component_base_1.DX_REMOVE_EVENT, this._onDxRemove);\n  };\n  TemplateWrapper.prototype._onDxRemove = function () {\n    var onRemoved = this.props.onRemoved;\n    onRemoved();\n  };\n  TemplateWrapper.prototype.render = function () {\n    var removalListenerRequired = this.state.removalListenerRequired;\n    var _a = this.props,\n      content = _a.content,\n      container = _a.container;\n    var removalListener = removalListenerRequired ? React.createElement('span', {\n      style: removalListenerStyle,\n      ref: this._removalListenerRef\n    }) : undefined;\n    var nodeName = TableNodeNames[container.nodeName] || 'div';\n    return ReactDOM.createPortal(React.createElement(React.Fragment, null, content, content && React.createElement(nodeName, {\n      style: {\n        display: 'none'\n      },\n      ref: this.getPreviousSiblingNode\n    }), removalListener), container);\n  };\n  return TemplateWrapper;\n}(React.PureComponent);\nexports.TemplateWrapper = TemplateWrapper;","map":null,"metadata":{},"sourceType":"script"}