{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\MySiteReact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\MySiteReact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n/**\r\n * DevExtreme (esm/ui/text_box/ui.text_editor.mask.strategy.base.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport EventsEngine from \"../../events/core/events_engine\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport browser from \"../../core/utils/browser\";\nimport { clipboardText as getClipboardText } from \"../../core/utils/dom\";\nvar MASK_EVENT_NAMESPACE = \"dxMask\";\nvar BLUR_EVENT = \"blur beforedeactivate\";\nvar EMPTY_CHAR = \" \";\nvar BaseMaskStrategy = /*#__PURE__*/function () {\n  function BaseMaskStrategy(editor) {\n    _classCallCheck(this, BaseMaskStrategy);\n    this.editor = editor;\n    this.DIRECTION = {\n      FORWARD: \"forward\",\n      BACKWARD: \"backward\"\n    };\n    this.NAME = this._getStrategyName();\n  }\n  _createClass(BaseMaskStrategy, [{\n    key: \"_getStrategyName\",\n    value: function _getStrategyName() {\n      return \"base\";\n    }\n  }, {\n    key: \"editorOption\",\n    value: function editorOption() {\n      var _this$editor;\n      return (_this$editor = this.editor).option.apply(_this$editor, arguments);\n    }\n  }, {\n    key: \"editorInput\",\n    value: function editorInput() {\n      return this.editor._input();\n    }\n  }, {\n    key: \"editorCaret\",\n    value: function editorCaret(newCaret) {\n      if (!newCaret) {\n        return this.editor._caret();\n      }\n      this.editor._caret(newCaret);\n    }\n  }, {\n    key: \"getHandler\",\n    value: function getHandler(handlerName) {\n      var handler = this[\"_\".concat(handlerName, \"Handler\")] || function () {};\n      return handler.bind(this);\n    }\n  }, {\n    key: \"attachEvents\",\n    value: function attachEvents() {\n      var _this = this;\n      var $input = this.editorInput();\n      this.getHandleEventNames().forEach(function (eventName) {\n        var subscriptionName = addNamespace(eventName.toLowerCase(), MASK_EVENT_NAMESPACE);\n        EventsEngine.on($input, subscriptionName, _this.getEventHandler(eventName));\n      });\n      this._attachChangeEventHandlers();\n    }\n  }, {\n    key: \"getHandleEventNames\",\n    value: function getHandleEventNames() {\n      return [\"focusIn\", \"focusOut\", \"keyDown\", \"input\", \"paste\", \"cut\", \"drop\"];\n    }\n  }, {\n    key: \"getEventHandler\",\n    value: function getEventHandler(eventName) {\n      return this[\"_\".concat(eventName, \"Handler\")].bind(this);\n    }\n  }, {\n    key: \"detachEvents\",\n    value: function detachEvents() {\n      EventsEngine.off(this.editorInput(), \".\".concat(MASK_EVENT_NAMESPACE));\n    }\n  }, {\n    key: \"_attachChangeEventHandlers\",\n    value: function _attachChangeEventHandlers() {\n      if (!this.editorOption(\"valueChangeEvent\").split(\" \").includes(\"change\")) {\n        return;\n      }\n      EventsEngine.on(this.editorInput(), addNamespace(BLUR_EVENT, MASK_EVENT_NAMESPACE), function (e) {\n        this._suppressCaretChanging(this._changeHandler, [e]);\n        this._changeHandler(e);\n      }.bind(this.editor));\n    }\n  }, {\n    key: \"_focusInHandler\",\n    value: function _focusInHandler() {\n      this.editor._showMaskPlaceholder();\n      this.editor._direction(this.DIRECTION.FORWARD);\n      if (!this.editor._isValueEmpty() && this.editorOption(\"isValid\")) {\n        this.editor._adjustCaret();\n      } else {\n        var caret = this.editor._maskRulesChain.first();\n        this._caretTimeout = setTimeout(function () {\n          this._caret({\n            start: caret,\n            end: caret\n          });\n        }.bind(this.editor), 0);\n      }\n    }\n  }, {\n    key: \"_focusOutHandler\",\n    value: function _focusOutHandler(event) {\n      this.editor._changeHandler(event);\n      if (\"onFocus\" === this.editorOption(\"showMaskMode\") && this.editor._isValueEmpty()) {\n        this.editorOption(\"text\", \"\");\n        this.editor._renderDisplayText(\"\");\n      }\n    }\n  }, {\n    key: \"_cutHandler\",\n    value: function _cutHandler(event) {\n      var caret = this.editorCaret();\n      var selectedText = this.editorInput().val().substring(caret.start, caret.end);\n      this.editor._maskKeyHandler(event, function () {\n        return getClipboardText(event, selectedText);\n      });\n    }\n  }, {\n    key: \"_dropHandler\",\n    value: function _dropHandler() {\n      this._clearDragTimer();\n      this._dragTimer = setTimeout(function () {\n        this.option(\"value\", this._convertToValue(this._input().val()));\n      }.bind(this.editor));\n    }\n  }, {\n    key: \"_clearDragTimer\",\n    value: function _clearDragTimer() {\n      clearTimeout(this._dragTimer);\n    }\n  }, {\n    key: \"_keyDownHandler\",\n    value: function _keyDownHandler() {\n      this._keyPressHandled = false;\n    }\n  }, {\n    key: \"_pasteHandler\",\n    value: function _pasteHandler(event) {\n      var editor = this.editor;\n      this._keyPressHandled = true;\n      var caret = this.editorCaret();\n      editor._maskKeyHandler(event, function () {\n        var pastedText = getClipboardText(event);\n        var restText = editor._maskRulesChain.text().substring(caret.end);\n        var accepted = editor._handleChain({\n          text: pastedText,\n          start: caret.start,\n          length: pastedText.length\n        });\n        var newCaret = caret.start + accepted;\n        editor._handleChain({\n          text: restText,\n          start: newCaret,\n          length: restText.length\n        });\n        editor._caret({\n          start: newCaret,\n          end: newCaret\n        });\n      });\n    }\n  }, {\n    key: \"_autoFillHandler\",\n    value: function _autoFillHandler(event) {\n      var _this2 = this;\n      var editor = this.editor;\n      var inputVal = this.editorInput().val();\n      this._inputHandlerTimer = setTimeout(function () {\n        _this2._keyPressHandled = true;\n        if (_this2._isAutoFill()) {\n          _this2._keyPressHandled = true;\n          editor._maskKeyHandler(event, function () {\n            editor._handleChain({\n              text: inputVal,\n              start: 0,\n              length: inputVal.length\n            });\n          });\n          editor._validateMask();\n        }\n      });\n    }\n  }, {\n    key: \"_isAutoFill\",\n    value: function _isAutoFill() {\n      var $input = this.editor._input();\n      var result = false;\n      if (browser.webkit) {\n        var input = $input.get(0);\n        result = input && input.matches(\":-webkit-autofill\");\n      }\n      return result;\n    }\n  }, {\n    key: \"runWithoutEventProcessing\",\n    value: function runWithoutEventProcessing(action) {\n      var keyPressHandled = this._keyPressHandled;\n      this._keyPressHandled = true;\n      action();\n      this._keyPressHandled = keyPressHandled;\n    }\n  }, {\n    key: \"_backspaceHandler\",\n    value: function _backspaceHandler() {}\n  }, {\n    key: \"_delHandler\",\n    value: function _delHandler(event) {\n      var editor = this.editor;\n      this._keyPressHandled = true;\n      editor._maskKeyHandler(event, function () {\n        return !editor._hasSelection() && editor._handleKey(EMPTY_CHAR);\n      });\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this._clearDragTimer();\n      clearTimeout(this._backspaceHandlerTimeout);\n      clearTimeout(this._caretTimeout);\n      clearTimeout(this._inputHandlerTimer);\n    }\n  }]);\n  return BaseMaskStrategy;\n}();\nexport { BaseMaskStrategy as default };","map":null,"metadata":{},"sourceType":"module"}