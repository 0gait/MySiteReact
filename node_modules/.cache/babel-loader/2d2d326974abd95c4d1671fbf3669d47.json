{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\MySiteReact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\MySiteReact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\MySiteReact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\MySiteReact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\MySiteReact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\MySiteReact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n/**\r\n * DevExtreme (esm/ui/toolbar/ui.toolbar.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport registerComponent from \"../../core/component_registrator\";\nimport { extend } from \"../../core/utils/extend\";\nimport ToolbarBase from \"./ui.toolbar.base\";\nimport { toggleItemFocusableElementTabIndex } from \"./ui.toolbar.utils\";\nimport { MultiLineStrategy } from \"./strategy/toolbar.multiline\";\nimport { SingleLineStrategy } from \"./strategy/toolbar.singleline\";\nvar TOOLBAR_MULTILINE_CLASS = \"dx-toolbar-multiline\";\nvar TOOLBAR_AUTO_HIDE_TEXT_CLASS = \"dx-toolbar-text-auto-hide\";\nvar Toolbar = /*#__PURE__*/function (_ToolbarBase) {\n  _inherits(Toolbar, _ToolbarBase);\n  function Toolbar() {\n    _classCallCheck(this, Toolbar);\n    return _possibleConstructorReturn(this, _getPrototypeOf(Toolbar).apply(this, arguments));\n  }\n  _createClass(Toolbar, [{\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(Toolbar.prototype), \"_getDefaultOptions\", this).call(this), {\n        menuItemTemplate: \"menuItem\",\n        menuContainer: void 0,\n        overflowMenuVisible: false,\n        multiline: false\n      });\n    }\n  }, {\n    key: \"_isMultiline\",\n    value: function _isMultiline() {\n      return this.option(\"multiline\");\n    }\n  }, {\n    key: \"_dimensionChanged\",\n    value: function _dimensionChanged(dimension) {\n      if (\"height\" === dimension) {\n        return;\n      }\n      _get(_getPrototypeOf(Toolbar.prototype), \"_dimensionChanged\", this).call(this);\n      this._layoutStrategy._dimensionChanged();\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      _get(_getPrototypeOf(Toolbar.prototype), \"_initMarkup\", this).call(this);\n      this._updateFocusableItemsTabIndex();\n      this._layoutStrategy._initMarkup();\n    }\n  }, {\n    key: \"_renderToolbar\",\n    value: function _renderToolbar() {\n      _get(_getPrototypeOf(Toolbar.prototype), \"_renderToolbar\", this).call(this);\n      this._renderLayoutStrategy();\n    }\n  }, {\n    key: \"_itemContainer\",\n    value: function _itemContainer() {\n      if (this._isMultiline()) {\n        return this._$toolbarItemsContainer;\n      }\n      return _get(_getPrototypeOf(Toolbar.prototype), \"_itemContainer\", this).call(this);\n    }\n  }, {\n    key: \"_renderLayoutStrategy\",\n    value: function _renderLayoutStrategy() {\n      this.$element().toggleClass(TOOLBAR_MULTILINE_CLASS, this._isMultiline());\n      this._layoutStrategy = this._isMultiline() ? new MultiLineStrategy(this) : new SingleLineStrategy(this);\n    }\n  }, {\n    key: \"_renderSections\",\n    value: function _renderSections() {\n      if (this._isMultiline()) {\n        return;\n      }\n      return _get(_getPrototypeOf(Toolbar.prototype), \"_renderSections\", this).call(this);\n    }\n  }, {\n    key: \"_postProcessRenderItems\",\n    value: function _postProcessRenderItems() {\n      this._layoutStrategy._hideOverflowItems();\n      this._layoutStrategy._updateMenuVisibility();\n      _get(_getPrototypeOf(Toolbar.prototype), \"_postProcessRenderItems\", this).call(this);\n      this._layoutStrategy._renderMenuItems();\n    }\n  }, {\n    key: \"_renderItem\",\n    value: function _renderItem(index, item, itemContainer, $after) {\n      var itemElement = _get(_getPrototypeOf(Toolbar.prototype), \"_renderItem\", this).call(this, index, item, itemContainer, $after);\n      this._layoutStrategy._renderItem(item, itemElement);\n      var widget = item.widget,\n        showText = item.showText;\n      if (\"dxButton\" === widget && \"inMenu\" === showText) {\n        itemElement.toggleClass(TOOLBAR_AUTO_HIDE_TEXT_CLASS);\n      }\n      return itemElement;\n    }\n  }, {\n    key: \"_getItemsWidth\",\n    value: function _getItemsWidth() {\n      return this._layoutStrategy._getItemsWidth();\n    }\n  }, {\n    key: \"_getMenuItems\",\n    value: function _getMenuItems() {\n      return this._layoutStrategy._getMenuItems();\n    }\n  }, {\n    key: \"_getToolbarItems\",\n    value: function _getToolbarItems() {\n      return this._layoutStrategy._getToolbarItems();\n    }\n  }, {\n    key: \"_arrangeItems\",\n    value: function _arrangeItems() {\n      if (this.$element().is(\":hidden\")) {\n        return;\n      }\n      var elementWidth = this._layoutStrategy._arrangeItems();\n      if (!this._isMultiline()) {\n        _get(_getPrototypeOf(Toolbar.prototype), \"_arrangeItems\", this).call(this, elementWidth);\n      }\n    }\n  }, {\n    key: \"_itemOptionChanged\",\n    value: function _itemOptionChanged(item, property, value) {\n      this._layoutStrategy._itemOptionChanged(item, property, value);\n      if (!this._isMenuItem(item)) {\n        _get(_getPrototypeOf(Toolbar.prototype), \"_itemOptionChanged\", this).call(this, item, property, value);\n      }\n      if (\"disabled\" === property || \"options.disabled\" === property) {\n        toggleItemFocusableElementTabIndex(this, item);\n      }\n      if (\"location\" === property) {\n        this.repaint();\n      }\n    }\n  }, {\n    key: \"_updateFocusableItemsTabIndex\",\n    value: function _updateFocusableItemsTabIndex() {\n      var _this = this;\n      this._getToolbarItems().forEach(function (item) {\n        return toggleItemFocusableElementTabIndex(_this, item);\n      });\n    }\n  }, {\n    key: \"_isMenuItem\",\n    value: function _isMenuItem(itemData) {\n      return \"menu\" === itemData.location || \"always\" === itemData.locateInMenu;\n    }\n  }, {\n    key: \"_isToolbarItem\",\n    value: function _isToolbarItem(itemData) {\n      return void 0 === itemData.location || \"never\" === itemData.locateInMenu;\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(_ref) {\n      var name = _ref.name,\n        value = _ref.value;\n      this._layoutStrategy._optionChanged(name, value);\n      switch (name) {\n        case \"menuContainer\":\n        case \"menuItemTemplate\":\n        case \"overflowMenuVisible\":\n          break;\n        case \"multiline\":\n          this._invalidate();\n          break;\n        case \"disabled\":\n          _get(_getPrototypeOf(Toolbar.prototype), \"_optionChanged\", this).apply(this, arguments);\n          this._updateFocusableItemsTabIndex();\n          break;\n        default:\n          _get(_getPrototypeOf(Toolbar.prototype), \"_optionChanged\", this).apply(this, arguments);\n      }\n    }\n  }, {\n    key: \"updateDimensions\",\n    value: function updateDimensions() {\n      this._dimensionChanged();\n    }\n  }]);\n  return Toolbar;\n}(ToolbarBase);\nregisterComponent(\"dxToolbar\", Toolbar);\nexport default Toolbar;","map":null,"metadata":{},"sourceType":"module"}