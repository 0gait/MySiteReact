{"ast":null,"code":"/**\r\n * DevExtreme (esm/core/utils/array_compare.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isObject } from \"./type\";\nvar getKeyWrapper = function getKeyWrapper(item, getKey) {\n  var key = getKey(item);\n  if (isObject(key)) {\n    try {\n      return JSON.stringify(key);\n    } catch (e) {\n      return key;\n    }\n  }\n  return key;\n};\nvar getSameNewByOld = function getSameNewByOld(oldItem, newItems, newIndexByKey, getKey) {\n  var key = getKeyWrapper(oldItem, getKey);\n  return newItems[newIndexByKey[key]];\n};\nexport var isKeysEqual = function isKeysEqual(oldKeys, newKeys) {\n  if (oldKeys.length !== newKeys.length) {\n    return false;\n  }\n  for (var i = 0; i < newKeys.length; i++) {\n    if (oldKeys[i] !== newKeys[i]) {\n      return false;\n    }\n  }\n  return true;\n};\nexport var findChanges = function findChanges(oldItems, newItems, getKey, isItemEquals) {\n  var oldIndexByKey = {};\n  var newIndexByKey = {};\n  var addedCount = 0;\n  var removeCount = 0;\n  var result = [];\n  oldItems.forEach(function (item, index) {\n    var key = getKeyWrapper(item, getKey);\n    oldIndexByKey[key] = index;\n  });\n  newItems.forEach(function (item, index) {\n    var key = getKeyWrapper(item, getKey);\n    newIndexByKey[key] = index;\n  });\n  var itemCount = Math.max(oldItems.length, newItems.length);\n  for (var index = 0; index < itemCount + addedCount; index++) {\n    var newItem = newItems[index];\n    var oldNextIndex = index - addedCount + removeCount;\n    var nextOldItem = oldItems[oldNextIndex];\n    var isRemoved = !newItem || nextOldItem && !getSameNewByOld(nextOldItem, newItems, newIndexByKey, getKey);\n    if (isRemoved) {\n      if (nextOldItem) {\n        result.push({\n          type: \"remove\",\n          key: getKey(nextOldItem),\n          index: index,\n          oldItem: nextOldItem\n        });\n        removeCount++;\n        index--;\n      }\n    } else {\n      var key = getKeyWrapper(newItem, getKey);\n      var oldIndex = oldIndexByKey[key];\n      var oldItem = oldItems[oldIndex];\n      if (!oldItem) {\n        addedCount++;\n        result.push({\n          type: \"insert\",\n          data: newItem,\n          index: index\n        });\n      } else if (oldIndex === oldNextIndex) {\n        if (!isItemEquals(oldItem, newItem)) {\n          result.push({\n            type: \"update\",\n            data: newItem,\n            key: getKey(newItem),\n            index: index,\n            oldItem: oldItem\n          });\n        }\n      } else {\n        return;\n      }\n    }\n  }\n  return result;\n};","map":null,"metadata":{},"sourceType":"module"}