{"ast":null,"code":"import _possibleConstructorReturn from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/helpers/positionHelper.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar getCellSize = function getCellSize(DOMMetaData) {\n  var dateTableCellsMeta = DOMMetaData.dateTableCellsMeta;\n  var length = null === dateTableCellsMeta || void 0 === dateTableCellsMeta ? void 0 : dateTableCellsMeta.length;\n  if (!length) {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n  var cellIndex = length > 1 ? 1 : 0;\n  var cellSize = dateTableCellsMeta[cellIndex][0];\n  return {\n    width: cellSize.width,\n    height: cellSize.height\n  };\n};\nvar getMaxAllowedHorizontalPosition = function getMaxAllowedHorizontalPosition(groupIndex, viewDataProvider, rtlEnabled, DOMMetaData) {\n  var dateTableCellsMeta = DOMMetaData.dateTableCellsMeta;\n  var firstRow = dateTableCellsMeta[0];\n  if (!firstRow) {\n    return 0;\n  }\n  var _viewDataProvider$get = viewDataProvider.getLastGroupCellPosition(groupIndex),\n    columnIndex = _viewDataProvider$get.columnIndex;\n  var cellPosition = firstRow[columnIndex];\n  if (!cellPosition) {\n    return 0;\n  }\n  return !rtlEnabled ? cellPosition.left + cellPosition.width : cellPosition.left;\n};\nexport var getCellHeight = function getCellHeight(DOMMetaData) {\n  return getCellSize(DOMMetaData).height;\n};\nexport var getCellWidth = function getCellWidth(DOMMetaData) {\n  return getCellSize(DOMMetaData).width;\n};\nexport var getAllDayHeight = function getAllDayHeight(showAllDayPanel, isVerticalGrouping, DOMMetaData) {\n  if (!showAllDayPanel) {\n    return 0;\n  }\n  if (isVerticalGrouping) {\n    var dateTableCellsMeta = DOMMetaData.dateTableCellsMeta;\n    var length = null === dateTableCellsMeta || void 0 === dateTableCellsMeta ? void 0 : dateTableCellsMeta.length;\n    return length ? dateTableCellsMeta[0][0].height : 0;\n  }\n  var allDayPanelCellsMeta = DOMMetaData.allDayPanelCellsMeta;\n  return null !== allDayPanelCellsMeta && void 0 !== allDayPanelCellsMeta && allDayPanelCellsMeta.length ? allDayPanelCellsMeta[0].height : 0;\n};\nexport var getMaxAllowedPosition = function getMaxAllowedPosition(groupIndex, viewDataProvider, rtlEnabled, DOMMetaData) {\n  var validGroupIndex = groupIndex || 0;\n  return getMaxAllowedHorizontalPosition(validGroupIndex, viewDataProvider, rtlEnabled, DOMMetaData);\n};\nexport var getGroupWidth = function getGroupWidth(groupIndex, viewDataProvider, options) {\n  var isVirtualScrolling = options.isVirtualScrolling,\n    rtlEnabled = options.rtlEnabled,\n    DOMMetaData = options.DOMMetaData;\n  var cellWidth = getCellWidth(DOMMetaData);\n  var result = viewDataProvider.getCellCount(options) * cellWidth;\n  if (isVirtualScrolling) {\n    var groupedData = viewDataProvider.groupedDataMap.dateTableGroupedMap;\n    var groupLength = groupedData[groupIndex][0].length;\n    result = groupLength * cellWidth;\n  }\n  var position = getMaxAllowedPosition(groupIndex, viewDataProvider, rtlEnabled, DOMMetaData);\n  var currentPosition = position[groupIndex];\n  if (currentPosition) {\n    if (rtlEnabled) {\n      result = currentPosition - position[groupIndex + 1];\n    } else if (0 === groupIndex) {\n      result = currentPosition;\n    } else {\n      result = currentPosition - position[groupIndex - 1];\n    }\n  }\n  return result;\n};\nexport var PositionHelper = /*#__PURE__*/function () {\n  _createClass(PositionHelper, [{\n    key: \"viewDataProvider\",\n    get: function get() {\n      return this.options.viewDataProvider;\n    }\n  }, {\n    key: \"rtlEnabled\",\n    get: function get() {\n      return this.options.rtlEnabled;\n    }\n  }, {\n    key: \"isGroupedByDate\",\n    get: function get() {\n      return this.options.isGroupedByDate;\n    }\n  }, {\n    key: \"groupCount\",\n    get: function get() {\n      return this.options.groupCount;\n    }\n  }, {\n    key: \"DOMMetaData\",\n    get: function get() {\n      return this.options.getDOMMetaDataCallback();\n    }\n  }]);\n  function PositionHelper(options) {\n    _classCallCheck(this, PositionHelper);\n    this.options = options;\n    this.groupStrategy = this.options.isVerticalGrouping ? new GroupStrategyBase(this.options) : new GroupStrategyHorizontal(this.options);\n  }\n  _createClass(PositionHelper, [{\n    key: \"getHorizontalMax\",\n    value: function getHorizontalMax(groupIndex) {\n      var _this = this;\n      var getMaxPosition = function getMaxPosition(groupIndex) {\n        return getMaxAllowedPosition(groupIndex, _this.viewDataProvider, _this.rtlEnabled, _this.DOMMetaData);\n      };\n      if (this.isGroupedByDate) {\n        var viewPortGroupCount = this.viewDataProvider.getViewPortGroupCount();\n        return Math.max(getMaxPosition(groupIndex), getMaxPosition(viewPortGroupCount - 1));\n      }\n      return getMaxPosition(groupIndex);\n    }\n  }, {\n    key: \"getResizableStep\",\n    value: function getResizableStep() {\n      var cellWidth = getCellWidth(this.DOMMetaData);\n      if (this.isGroupedByDate) {\n        return this.groupCount * cellWidth;\n      }\n      return cellWidth;\n    }\n  }, {\n    key: \"getVerticalMax\",\n    value: function getVerticalMax(options) {\n      return this.groupStrategy.getVerticalMax(options);\n    }\n  }, {\n    key: \"getOffsetByAllDayPanel\",\n    value: function getOffsetByAllDayPanel(options) {\n      return this.groupStrategy.getOffsetByAllDayPanel(options);\n    }\n  }, {\n    key: \"getGroupTop\",\n    value: function getGroupTop(options) {\n      return this.groupStrategy.getGroupTop(options);\n    }\n  }]);\n  return PositionHelper;\n}();\nvar GroupStrategyBase = /*#__PURE__*/function () {\n  function GroupStrategyBase(options) {\n    _classCallCheck(this, GroupStrategyBase);\n    this.options = options;\n  }\n  _createClass(GroupStrategyBase, [{\n    key: \"getOffsetByAllDayPanel\",\n    value: function getOffsetByAllDayPanel(_ref) {\n      var groupIndex = _ref.groupIndex,\n        supportAllDayRow = _ref.supportAllDayRow,\n        showAllDayPanel = _ref.showAllDayPanel;\n      var result = 0;\n      if (supportAllDayRow && showAllDayPanel) {\n        var allDayPanelHeight = getAllDayHeight(showAllDayPanel, true, this.DOMMetaData);\n        result = allDayPanelHeight * (groupIndex + 1);\n      }\n      return result;\n    }\n  }, {\n    key: \"getVerticalMax\",\n    value: function getVerticalMax(options) {\n      var maxAllowedPosition = this._getMaxAllowedVerticalPosition(_extends({}, options, {\n        viewDataProvider: this.viewDataProvider,\n        rtlEnabled: this.rtlEnabled,\n        DOMMetaData: this.DOMMetaData\n      }));\n      maxAllowedPosition += this.getOffsetByAllDayPanel(options);\n      return maxAllowedPosition;\n    }\n  }, {\n    key: \"getGroupTop\",\n    value: function getGroupTop(_ref2) {\n      var groupIndex = _ref2.groupIndex,\n        showAllDayPanel = _ref2.showAllDayPanel,\n        isGroupedAllDayPanel = _ref2.isGroupedAllDayPanel;\n      var rowCount = this.viewDataProvider.getRowCountInGroup(groupIndex);\n      var maxVerticalPosition = this._getMaxAllowedVerticalPosition({\n        groupIndex: groupIndex,\n        viewDataProvider: this.viewDataProvider,\n        showAllDayPanel: showAllDayPanel,\n        isGroupedAllDayPanel: isGroupedAllDayPanel,\n        isVerticalGrouping: true,\n        DOMMetaData: this.DOMMetaData\n      });\n      return maxVerticalPosition - getCellHeight(this.DOMMetaData) * rowCount;\n    }\n  }, {\n    key: \"_getAllDayHeight\",\n    value: function _getAllDayHeight(showAllDayPanel) {\n      return getAllDayHeight(showAllDayPanel, true, this.DOMMetaData);\n    }\n  }, {\n    key: \"_getMaxAllowedVerticalPosition\",\n    value: function _getMaxAllowedVerticalPosition(_ref3) {\n      var groupIndex = _ref3.groupIndex,\n        showAllDayPanel = _ref3.showAllDayPanel,\n        isGroupedAllDayPanel = _ref3.isGroupedAllDayPanel;\n      var _this$viewDataProvide = this.viewDataProvider.getLastGroupCellPosition(groupIndex),\n        rowIndex = _this$viewDataProvide.rowIndex;\n      var dateTableCellsMeta = this.DOMMetaData.dateTableCellsMeta;\n      var lastGroupRow = dateTableCellsMeta[rowIndex];\n      if (!lastGroupRow) {\n        return 0;\n      }\n      var result = lastGroupRow[0].top + lastGroupRow[0].height;\n      if (isGroupedAllDayPanel) {\n        result -= (groupIndex + 1) * this._getAllDayHeight(showAllDayPanel);\n      }\n      return result;\n    }\n  }, {\n    key: \"viewDataProvider\",\n    get: function get() {\n      return this.options.viewDataProvider;\n    }\n  }, {\n    key: \"isGroupedByDate\",\n    get: function get() {\n      return this.options.isGroupedByDate;\n    }\n  }, {\n    key: \"rtlEnabled\",\n    get: function get() {\n      return this.options.rtlEnabled;\n    }\n  }, {\n    key: \"groupCount\",\n    get: function get() {\n      return this.options.groupCount;\n    }\n  }, {\n    key: \"DOMMetaData\",\n    get: function get() {\n      return this.options.getDOMMetaDataCallback();\n    }\n  }]);\n  return GroupStrategyBase;\n}();\nvar GroupStrategyHorizontal = /*#__PURE__*/function (_GroupStrategyBase) {\n  _inherits(GroupStrategyHorizontal, _GroupStrategyBase);\n  function GroupStrategyHorizontal() {\n    _classCallCheck(this, GroupStrategyHorizontal);\n    return _possibleConstructorReturn(this, _getPrototypeOf(GroupStrategyHorizontal).apply(this, arguments));\n  }\n  _createClass(GroupStrategyHorizontal, [{\n    key: \"getOffsetByAllDayPanel\",\n    value: function getOffsetByAllDayPanel(options) {\n      return 0;\n    }\n  }, {\n    key: \"getVerticalMax\",\n    value: function getVerticalMax(options) {\n      var isVirtualScrolling = options.isVirtualScrolling,\n        groupIndex = options.groupIndex;\n      var correctedGroupIndex = isVirtualScrolling ? groupIndex : 0;\n      return this._getMaxAllowedVerticalPosition(_extends({}, options, {\n        groupIndex: correctedGroupIndex\n      }));\n    }\n  }, {\n    key: \"getGroupTop\",\n    value: function getGroupTop(options) {\n      return 0;\n    }\n  }, {\n    key: \"_getAllDayHeight\",\n    value: function _getAllDayHeight(showAllDayPanel) {\n      return getAllDayHeight(showAllDayPanel, false, this.DOMMetaData);\n    }\n  }]);\n  return GroupStrategyHorizontal;\n}(GroupStrategyBase);","map":null,"metadata":{},"sourceType":"module"}