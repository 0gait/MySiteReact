{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/sankey/tooltip.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend as _extend } from \"../../core/utils/extend\";\nimport { isFunction } from \"../../core/utils/type\";\nvar defaultCustomizeLinkTooltip = function defaultCustomizeLinkTooltip(formatter) {\n  return function (info) {\n    return {\n      html: \"<strong>\".concat(info.source, \" > \").concat(info.target, \"</strong><br/>Weight: \").concat(formatter(info.weight))\n    };\n  };\n};\nvar defaultCustomizeNodeTooltip = function defaultCustomizeNodeTooltip(formatter) {\n  return function (info) {\n    return {\n      html: \"<strong>\".concat(info.label, \"</strong><br/>Incoming weight: \").concat(formatter(info.weightIn), \"<br/>Outgoing weight: \").concat(formatter(info.weightOut))\n    };\n  };\n};\nvar generateCustomCallback = function generateCustomCallback(customCallback, defaultCallback) {\n  return function (objectInfo) {\n    var res = isFunction(customCallback) ? customCallback.call(objectInfo, objectInfo) : {};\n    var hasOwnProperty = Object.prototype.hasOwnProperty.bind(res);\n    if (!hasOwnProperty(\"html\") && !hasOwnProperty(\"text\")) {\n      res = _extend(res, defaultCallback.call(objectInfo, objectInfo));\n    }\n    return res;\n  };\n};\nexport function setTooltipCustomOptions(sankey) {\n  sankey.prototype._setTooltipOptions = function () {\n    var tooltip = this._tooltip;\n    var options = tooltip && this._getOption(\"tooltip\");\n    var linkTemplate;\n    var nodeTemplate;\n    if (options.linkTooltipTemplate) {\n      linkTemplate = this._getTemplate(options.linkTooltipTemplate);\n    }\n    if (options.nodeTooltipTemplate) {\n      nodeTemplate = this._getTemplate(options.nodeTooltipTemplate);\n    }\n    tooltip && tooltip.update(_extend({}, options, {\n      customizeTooltip: function customizeTooltip(args) {\n        if (!(linkTemplate && \"link\" === args.type || nodeTemplate && \"node\" === args.type)) {\n          args.skipTemplate = true;\n        }\n        var formatter = function formatter(value) {\n          return tooltip.formatValue(value);\n        };\n        if (\"node\" === args.type) {\n          return generateCustomCallback(options.customizeNodeTooltip, defaultCustomizeNodeTooltip(formatter))(args.info);\n        } else if (\"link\" === args.type) {\n          return generateCustomCallback(options.customizeLinkTooltip, defaultCustomizeLinkTooltip(formatter))(args.info);\n        }\n        return {};\n      },\n      contentTemplate: function contentTemplate(arg, div) {\n        var templateArgs = {\n          model: arg.info,\n          container: div\n        };\n        if (linkTemplate && \"link\" === arg.type) {\n          return linkTemplate.render(templateArgs);\n        }\n        if (nodeTemplate && \"node\" === arg.type) {\n          return nodeTemplate.render(templateArgs);\n        }\n      },\n      enabled: options.enabled\n    }));\n  };\n  sankey.prototype.hideTooltip = function () {\n    this._tooltip && this._tooltip.hide();\n  };\n}","map":null,"metadata":{},"sourceType":"module"}