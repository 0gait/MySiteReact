{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n/**\r\n * DevExtreme (esm/renovation/ui/pager/pages/page_index_selector.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"hasKnownLastPage\", \"isLargeDisplayMode\", \"maxPagesCount\", \"pageCount\", \"pageIndex\", \"pageIndexChange\", \"pagesCountText\", \"showNavigationButtons\", \"totalCount\"];\nimport { createFragment, createComponentVNode } from \"inferno\";\nimport { Fragment } from \"inferno\";\nimport { BaseInfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { LightButton } from \"../common/light_button\";\nimport { PagesLarge } from \"./large\";\nimport { PagesSmall } from \"./small\";\nimport { InternalPagerProps } from \"../common/pager_props\";\nimport { ConfigContext } from \"../../../common/config_context\";\nimport messageLocalization from \"../../../../localization/message\";\nvar PAGER_NAVIGATE_BUTTON = \"dx-navigate-button\";\nvar PAGER_PREV_BUTTON_CLASS = \"dx-prev-button\";\nvar PAGER_NEXT_BUTTON_CLASS = \"dx-next-button\";\nexport var PAGER_BUTTON_DISABLE_CLASS = \"dx-button-disable\";\nvar getNextButtonLabel = function getNextButtonLabel() {\n  return messageLocalization.getFormatter(\"dxPager-nextPage\")();\n};\nvar getPrevButtonLabel = function getPrevButtonLabel() {\n  return messageLocalization.getFormatter(\"dxPager-prevPage\")();\n};\nvar classNames = {\n  nextEnabledClass: \"\".concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_NEXT_BUTTON_CLASS),\n  prevEnabledClass: \"\".concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_PREV_BUTTON_CLASS),\n  nextDisabledClass: \"\".concat(PAGER_BUTTON_DISABLE_CLASS, \" \").concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_NEXT_BUTTON_CLASS),\n  prevDisabledClass: \"\".concat(PAGER_BUTTON_DISABLE_CLASS, \" \").concat(PAGER_NAVIGATE_BUTTON, \" \").concat(PAGER_PREV_BUTTON_CLASS)\n};\nvar reverseDirections = {\n  next: \"prev\",\n  prev: \"next\"\n};\nexport var viewFunction = function viewFunction(_ref) {\n  var nextButtonProps = _ref.nextButtonProps,\n    pageIndexChange = _ref.pageIndexChange,\n    prevButtonProps = _ref.prevButtonProps,\n    _ref$props = _ref.props,\n    isLargeDisplayMode = _ref$props.isLargeDisplayMode,\n    maxPagesCount = _ref$props.maxPagesCount,\n    pageCount = _ref$props.pageCount,\n    pageIndex = _ref$props.pageIndex,\n    pagesCountText = _ref$props.pagesCountText,\n    renderNextButton = _ref.renderNextButton,\n    renderPrevButton = _ref.renderPrevButton;\n  return createFragment([renderPrevButton && createComponentVNode(2, LightButton, {\n    label: getPrevButtonLabel(),\n    className: prevButtonProps.className,\n    tabIndex: prevButtonProps.tabIndex,\n    onClick: prevButtonProps.navigate\n  }), isLargeDisplayMode && createComponentVNode(2, PagesLarge, {\n    maxPagesCount: maxPagesCount,\n    pageCount: pageCount,\n    pageIndex: pageIndex,\n    pageIndexChange: pageIndexChange\n  }), !isLargeDisplayMode && createComponentVNode(2, PagesSmall, {\n    pageCount: pageCount,\n    pageIndex: pageIndex,\n    pageIndexChange: pageIndexChange,\n    pagesCountText: pagesCountText\n  }), renderNextButton && createComponentVNode(2, LightButton, {\n    label: getNextButtonLabel(),\n    className: nextButtonProps.className,\n    tabIndex: nextButtonProps.tabIndex,\n    onClick: nextButtonProps.navigate\n  })], 0);\n};\nfunction getIncrement(direction) {\n  return \"next\" === direction ? 1 : -1;\n}\nexport var PageIndexSelectorProps = {\n  isLargeDisplayMode: true\n};\nvar PageIndexSelectorPropsType = {\n  get pageIndex() {\n    return InternalPagerProps.pageIndex;\n  },\n  get maxPagesCount() {\n    return InternalPagerProps.maxPagesCount;\n  },\n  get pageCount() {\n    return InternalPagerProps.pageCount;\n  },\n  get hasKnownLastPage() {\n    return InternalPagerProps.hasKnownLastPage;\n  },\n  get showNavigationButtons() {\n    return InternalPagerProps.showNavigationButtons;\n  },\n  get totalCount() {\n    return InternalPagerProps.totalCount;\n  },\n  get isLargeDisplayMode() {\n    return PageIndexSelectorProps.isLargeDisplayMode;\n  }\n};\nexport var PageIndexSelector = /*#__PURE__*/function (_BaseInfernoComponent) {\n  _inherits(PageIndexSelector, _BaseInfernoComponent);\n  function PageIndexSelector(props) {\n    var _this;\n    _classCallCheck(this, PageIndexSelector);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PageIndexSelector).call(this, props));\n    _this.state = {};\n    _this.__getterCache = {};\n    _this.pageIndexChange = _this.pageIndexChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getButtonProps = _this.getButtonProps.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.canNavigateToPage = _this.canNavigateToPage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getNextPageIndex = _this.getNextPageIndex.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.canNavigateTo = _this.canNavigateTo.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.navigateToPage = _this.navigateToPage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  _createClass(PageIndexSelector, [{\n    key: \"pageIndexChange\",\n    value: function pageIndexChange(pageIndex) {\n      if (this.canNavigateToPage(pageIndex)) {\n        this.props.pageIndexChange(pageIndex);\n      }\n    }\n  }, {\n    key: \"getButtonProps\",\n    value: function getButtonProps(direction) {\n      var _this2 = this;\n      var _this$config;\n      var rtlAwareDirection = null !== (_this$config = this.config) && void 0 !== _this$config && _this$config.rtlEnabled ? reverseDirections[direction] : direction;\n      var canNavigate = this.canNavigateTo(rtlAwareDirection);\n      var className = classNames[\"\".concat(direction).concat(canNavigate ? \"Enabled\" : \"Disabled\", \"Class\")];\n      return {\n        className: className,\n        tabIndex: canNavigate ? 0 : -1,\n        navigate: function navigate() {\n          return _this2.navigateToPage(rtlAwareDirection);\n        }\n      };\n    }\n  }, {\n    key: \"canNavigateToPage\",\n    value: function canNavigateToPage(pageIndex) {\n      if (!this.props.hasKnownLastPage) {\n        return pageIndex >= 0;\n      }\n      return pageIndex >= 0 && pageIndex <= this.props.pageCount - 1;\n    }\n  }, {\n    key: \"getNextPageIndex\",\n    value: function getNextPageIndex(direction) {\n      return this.props.pageIndex + getIncrement(direction);\n    }\n  }, {\n    key: \"canNavigateTo\",\n    value: function canNavigateTo(direction) {\n      return this.canNavigateToPage(this.getNextPageIndex(direction));\n    }\n  }, {\n    key: \"navigateToPage\",\n    value: function navigateToPage(direction) {\n      this.pageIndexChange(this.getNextPageIndex(direction));\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(nextProps, nextState, context) {\n      if (this.context[ConfigContext.id] !== context[ConfigContext.id] || this.props.hasKnownLastPage !== nextProps.hasKnownLastPage || this.props.pageCount !== nextProps.pageCount || this.props.pageIndex !== nextProps.pageIndex || this.props.pageIndexChange !== nextProps.pageIndexChange) {\n        this.__getterCache.prevButtonProps = void 0;\n      }\n      if (this.context[ConfigContext.id] !== context[ConfigContext.id] || this.props.hasKnownLastPage !== nextProps.hasKnownLastPage || this.props.pageCount !== nextProps.pageCount || this.props.pageIndex !== nextProps.pageIndex || this.props.pageIndexChange !== nextProps.pageIndexChange) {\n        this.__getterCache.nextButtonProps = void 0;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props),\n        config: this.config,\n        pageIndexChange: this.pageIndexChange,\n        renderPrevButton: this.renderPrevButton,\n        renderNextButton: this.renderNextButton,\n        prevButtonProps: this.prevButtonProps,\n        nextButtonProps: this.nextButtonProps,\n        restAttributes: this.restAttributes\n      });\n    }\n  }, {\n    key: \"config\",\n    get: function get() {\n      if (this.context[ConfigContext.id]) {\n        return this.context[ConfigContext.id];\n      }\n      return ConfigContext.defaultValue;\n    }\n  }, {\n    key: \"renderPrevButton\",\n    get: function get() {\n      var _this$props2 = this.props,\n        isLargeDisplayMode = _this$props2.isLargeDisplayMode,\n        showNavigationButtons = _this$props2.showNavigationButtons;\n      return !isLargeDisplayMode || showNavigationButtons;\n    }\n  }, {\n    key: \"renderNextButton\",\n    get: function get() {\n      return this.renderPrevButton || !this.props.hasKnownLastPage;\n    }\n  }, {\n    key: \"prevButtonProps\",\n    get: function get() {\n      var _this3 = this;\n      if (void 0 !== this.__getterCache.prevButtonProps) {\n        return this.__getterCache.prevButtonProps;\n      }\n      return this.__getterCache.prevButtonProps = function () {\n        return _this3.getButtonProps(\"prev\");\n      }();\n    }\n  }, {\n    key: \"nextButtonProps\",\n    get: function get() {\n      var _this4 = this;\n      if (void 0 !== this.__getterCache.nextButtonProps) {\n        return this.__getterCache.nextButtonProps;\n      }\n      return this.__getterCache.nextButtonProps = function () {\n        return _this4.getButtonProps(\"next\");\n      }();\n    }\n  }, {\n    key: \"restAttributes\",\n    get: function get() {\n      var _this$props = this.props,\n        restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n      return restProps;\n    }\n  }]);\n  return PageIndexSelector;\n}(BaseInfernoComponent);\nPageIndexSelector.defaultProps = PageIndexSelectorPropsType;","map":null,"metadata":{},"sourceType":"module"}