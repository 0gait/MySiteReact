{"ast":null,"code":"import { getFlagsForElementVnode, createComponentVNode, createFragment, createVNode } from 'inferno';\nfunction isNullOrUndef(o) {\n  return o === void 0 || o === null;\n}\nfunction isString(o) {\n  return typeof o === 'string';\n}\nfunction isUndefined(o) {\n  return o === void 0;\n}\nvar componentHooks = {\n  onComponentDidMount: 1,\n  onComponentDidUpdate: 1,\n  onComponentShouldUpdate: 1,\n  onComponentWillMount: 1,\n  onComponentWillUnmount: 1,\n  onComponentWillUpdate: 1\n};\nfunction createElement(type, props, _children) {\n  var arguments$1 = arguments;\n  var children;\n  var ref = null;\n  var key = null;\n  var className = null;\n  var flags = 0;\n  var newProps;\n  var childLen = arguments.length - 2;\n  if (childLen === 1) {\n    children = _children;\n  } else if (childLen > 1) {\n    children = [];\n    while (childLen-- > 0) {\n      children[childLen] = arguments$1[childLen + 2];\n    }\n  }\n  if (isString(type)) {\n    flags = getFlagsForElementVnode(type);\n    if (!isNullOrUndef(props)) {\n      newProps = {};\n      for (var prop in props) {\n        if (prop === 'className' || prop === 'class') {\n          className = props[prop];\n        } else if (prop === 'key') {\n          key = props.key;\n        } else if (prop === 'children' && isUndefined(children)) {\n          children = props.children; // always favour children args over props\n        } else if (prop === 'ref') {\n          ref = props.ref;\n        } else {\n          if (prop === 'contenteditable') {\n            flags |= 4096 /* ContentEditable */;\n          }\n\n          newProps[prop] = props[prop];\n        }\n      }\n    }\n  } else {\n    flags = 2 /* ComponentUnknown */;\n    if (!isUndefined(children)) {\n      if (!props) {\n        props = {};\n      }\n      props.children = children;\n    }\n    if (!isNullOrUndef(props)) {\n      newProps = {};\n      for (var prop$1 in props) {\n        if (prop$1 === 'key') {\n          key = props.key;\n        } else if (prop$1 === 'ref') {\n          ref = props.ref;\n        } else if (componentHooks[prop$1] === 1) {\n          if (!ref) {\n            ref = {};\n          }\n          ref[prop$1] = props[prop$1];\n        } else {\n          newProps[prop$1] = props[prop$1];\n        }\n      }\n    }\n    return createComponentVNode(flags, type, newProps, key, ref);\n  }\n  if (flags & 8192 /* Fragment */) {\n    return createFragment(childLen === 1 ? [children] : children, 0 /* UnknownChildren */, key);\n  }\n  return createVNode(flags, type, className, children, 0 /* UnknownChildren */, newProps, key, ref);\n}\nexport { createElement };","map":null,"metadata":{},"sourceType":"module"}