{"ast":null,"code":"import _get from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _classCallCheck from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Component, findDOMfromVNode } from 'inferno';\nimport { InfernoEffectHost } from './effect_host';\nvar areObjectsEqual = function areObjectsEqual(firstObject, secondObject) {\n  var bothAreObjects = firstObject instanceof Object && secondObject instanceof Object;\n  if (!bothAreObjects) {\n    return firstObject === secondObject;\n  }\n  var firstObjectKeys = Object.keys(firstObject);\n  var secondObjectKeys = Object.keys(secondObject);\n  if (firstObjectKeys.length !== secondObjectKeys.length) {\n    return false;\n  }\n  var hasDifferentElement = firstObjectKeys.some(function (key) {\n    return firstObject[key] !== secondObject[key];\n  });\n  return !hasDifferentElement;\n};\nexport var BaseInfernoComponent = /*#__PURE__*/function (_Component) {\n  _inherits(BaseInfernoComponent, _Component);\n  function BaseInfernoComponent() {\n    var _this;\n    _classCallCheck(this, BaseInfernoComponent);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BaseInfernoComponent).apply(this, arguments));\n    _this._pendingContext = _this.context;\n    return _this;\n  }\n  _createClass(BaseInfernoComponent, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(_, context) {\n      this._pendingContext = context !== null && context !== void 0 ? context : {};\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return !areObjectsEqual(this.props, nextProps) || !areObjectsEqual(this.state, nextState) || !areObjectsEqual(this.context, this._pendingContext);\n    }\n  }]);\n  return BaseInfernoComponent;\n}(Component);\nexport var InfernoComponent = /*#__PURE__*/function (_BaseInfernoComponent) {\n  _inherits(InfernoComponent, _BaseInfernoComponent);\n  function InfernoComponent() {\n    var _this2;\n    _classCallCheck(this, InfernoComponent);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(InfernoComponent).apply(this, arguments));\n    _this2._effects = [];\n    return _this2;\n  }\n  _createClass(InfernoComponent, [{\n    key: \"createEffects\",\n    value: function createEffects() {\n      return [];\n    }\n  }, {\n    key: \"updateEffects\",\n    value: function updateEffects() {}\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      InfernoEffectHost.lock();\n    } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(_nextProps, _nextState, _context) {\n      InfernoEffectHost.lock();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n      InfernoEffectHost.callbacks.push(function () {\n        _this3._effects = _this3.createEffects();\n      });\n      InfernoEffectHost.callEffects();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this4 = this;\n      InfernoEffectHost.callbacks.push(function () {\n        return _this4.updateEffects();\n      });\n      InfernoEffectHost.callEffects();\n    }\n  }, {\n    key: \"destroyEffects\",\n    value: function destroyEffects() {\n      this._effects.forEach(function (e) {\n        return e.dispose();\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.destroyEffects();\n    }\n  }]);\n  return InfernoComponent;\n}(BaseInfernoComponent);\nexport var InfernoWrapperComponent = /*#__PURE__*/function (_InfernoComponent) {\n  _inherits(InfernoWrapperComponent, _InfernoComponent);\n  function InfernoWrapperComponent() {\n    var _this5;\n    _classCallCheck(this, InfernoWrapperComponent);\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(InfernoWrapperComponent).apply(this, arguments));\n    _this5.vDomElement = null;\n    return _this5;\n  }\n  _createClass(InfernoWrapperComponent, [{\n    key: \"vDomUpdateClasses\",\n    value: function vDomUpdateClasses() {\n      var el = this.vDomElement;\n      var currentClasses = el.className.length ? el.className.split(' ') : [];\n      var addedClasses = currentClasses.filter(function (className) {\n        return el.dxClasses.previous.indexOf(className) < 0;\n      });\n      var removedClasses = el.dxClasses.previous.filter(function (className) {\n        return currentClasses.indexOf(className) < 0;\n      });\n      addedClasses.forEach(function (value) {\n        var indexInRemoved = el.dxClasses.removed.indexOf(value);\n        if (indexInRemoved > -1) {\n          el.dxClasses.removed.splice(indexInRemoved, 1);\n        } else {\n          el.dxClasses.added.push(value);\n        }\n      });\n      removedClasses.forEach(function (value) {\n        var indexInAdded = el.dxClasses.added.indexOf(value);\n        if (indexInAdded > -1) {\n          el.dxClasses.added.splice(indexInAdded, 1);\n        } else {\n          el.dxClasses.removed.push(value);\n        }\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var el = findDOMfromVNode(this.$LI, true);\n      this.vDomElement = el;\n      _get(_getPrototypeOf(InfernoWrapperComponent.prototype), \"componentDidMount\", this).call(this);\n      el.dxClasses = el.dxClasses || {\n        removed: [],\n        added: [],\n        previous: []\n      };\n      el.dxClasses.previous = (el === null || el === void 0 ? void 0 : el.className.length) ? el.className.split(' ') : [];\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      _get(_getPrototypeOf(InfernoWrapperComponent.prototype), \"componentDidUpdate\", this).call(this);\n      var el = this.vDomElement;\n      if (el !== null) {\n        el.dxClasses.added.forEach(function (className) {\n          return el.classList.add(className);\n        });\n        el.dxClasses.removed.forEach(function (className) {\n          return el.classList.remove(className);\n        });\n        el.dxClasses.previous = el.className.length ? el.className.split(' ') : [];\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var shouldUpdate = _get(_getPrototypeOf(InfernoWrapperComponent.prototype), \"shouldComponentUpdate\", this).call(this, nextProps, nextState);\n      if (shouldUpdate) {\n        this.vDomUpdateClasses();\n      }\n      return shouldUpdate;\n    }\n  }]);\n  return InfernoWrapperComponent;\n}(InfernoComponent);","map":null,"metadata":{},"sourceType":"module"}