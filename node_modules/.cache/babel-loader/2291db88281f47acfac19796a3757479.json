{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/html_editor/utils/table_helper.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { camelize } from \"../../../core/utils/inflector\";\nvar TABLE_FORMATS = [\"table\", \"tableHeaderCell\"];\nvar TABLE_OPERATIONS = [\"insertTable\", \"insertHeaderRow\", \"insertRowAbove\", \"insertRowBelow\", \"insertColumnLeft\", \"insertColumnRight\", \"deleteColumn\", \"deleteRow\", \"deleteTable\", \"cellProperties\", \"tableProperties\"];\nfunction getTableFormats(quill) {\n  var tableModule = quill.getModule(\"table\");\n  return null !== tableModule && void 0 !== tableModule && tableModule.tableFormats ? tableModule.tableFormats() : TABLE_FORMATS;\n}\nfunction hasEmbedContent(module, selection) {\n  return !!selection && module.quill.getText(selection).trim().length < selection.length;\n}\nfunction unfixTableWidth($table, _ref) {\n  var tableBlot = _ref.tableBlot,\n    quill = _ref.quill;\n  var formatBlot = null !== tableBlot && void 0 !== tableBlot ? tableBlot : quill.scroll.find($table.get(0));\n  formatBlot.format(\"tableWidth\", \"initial\");\n}\nfunction getColumnElements($table) {\n  var index = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\n  return $table.find(\"tr\").eq(index).find(\"th, td\");\n}\nfunction getAutoSizedElements($table) {\n  var direction = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"horizontal\";\n  var result = [];\n  var isHorizontal = \"horizontal\" === direction;\n  var $lineElements = isHorizontal ? getColumnElements($table) : getRowElements($table);\n  $lineElements.each(function (index, element) {\n    var $element = $(element);\n    if (\"\" === $element.get(0).style[isHorizontal ? \"width\" : \"height\"]) {\n      result.push($element);\n    }\n  });\n  return result;\n}\nfunction setLineElementsFormat(module, _ref2) {\n  var elements = _ref2.elements,\n    property = _ref2.property,\n    value = _ref2.value;\n  var tableBlotNames = module.quill.getModule(\"table\").tableBlots;\n  var fullPropertyName = \"cell\".concat(camelize(property, true));\n  each(elements, function (i, element) {\n    var _formatBlot;\n    var formatBlot = module.quill.scroll.find(element);\n    if (!tableBlotNames.includes(formatBlot.statics.blotName)) {\n      var descendBlot = formatBlot.descendant(function (blot) {\n        return tableBlotNames.includes(blot.statics.blotName);\n      });\n      formatBlot = descendBlot ? descendBlot[0] : null;\n    }\n    null === (_formatBlot = formatBlot) || void 0 === _formatBlot ? void 0 : _formatBlot.format(fullPropertyName, value + \"px\");\n  });\n}\nfunction getLineElements($table, index) {\n  var direction = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : \"horizontal\";\n  return \"horizontal\" === direction ? getRowElements($table, index) : getColumnElements($table, index);\n}\nfunction getRowElements($table) {\n  var index = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\n  return $table.find(\"th:nth-child(\".concat(1 + index, \"), td:nth-child(\").concat(1 + index, \")\"));\n}\nfunction getTableOperationHandler(quill, operationName) {\n  for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    rest[_key - 2] = arguments[_key];\n  }\n  return function () {\n    var table = quill.getModule(\"table\");\n    if (!table) {\n      return;\n    }\n    quill.focus();\n    return table[operationName].apply(table, rest);\n  };\n}\nexport { TABLE_OPERATIONS, getTableFormats, getTableOperationHandler, unfixTableWidth, getColumnElements, getAutoSizedElements, setLineElementsFormat, getLineElements, getRowElements, hasEmbedContent };","map":null,"metadata":{},"sourceType":"module"}