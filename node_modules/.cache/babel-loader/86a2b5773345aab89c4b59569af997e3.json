{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.master_detail.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight, getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { grep } from \"../../core/utils/common\";\nimport { each } from \"../../core/utils/iterator\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\nvar MASTER_DETAIL_ROW_CLASS = \"dx-master-detail-row\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar ROW_LINES_CLASS = \"dx-row-lines\";\nexport var masterDetailModule = {\n  defaultOptions: function defaultOptions() {\n    return {\n      masterDetail: {\n        enabled: false,\n        autoExpandAll: false,\n        template: null\n      }\n    };\n  },\n  extenders: {\n    controllers: {\n      columns: {\n        _getExpandColumnsCore: function _getExpandColumnsCore() {\n          var expandColumns = this.callBase();\n          if (this.option(\"masterDetail.enabled\")) {\n            expandColumns.push({\n              type: \"detailExpand\",\n              cellTemplate: gridCoreUtils.getExpandCellTemplate()\n            });\n          }\n          return expandColumns;\n        }\n      },\n      data: function () {\n        var initMasterDetail = function initMasterDetail(that) {\n          that._expandedItems = [];\n          that._isExpandAll = that.option(\"masterDetail.autoExpandAll\");\n        };\n        return {\n          init: function init() {\n            initMasterDetail(this);\n            this.callBase();\n          },\n          expandAll: function expandAll(groupIndex) {\n            var that = this;\n            if (groupIndex < 0) {\n              that._isExpandAll = true;\n              that._expandedItems = [];\n              that.updateItems();\n            } else {\n              that.callBase.apply(that, arguments);\n            }\n          },\n          collapseAll: function collapseAll(groupIndex) {\n            var that = this;\n            if (groupIndex < 0) {\n              that._isExpandAll = false;\n              that._expandedItems = [];\n              that.updateItems();\n            } else {\n              that.callBase.apply(that, arguments);\n            }\n          },\n          isRowExpanded: function isRowExpanded(key) {\n            var that = this;\n            var expandIndex = gridCoreUtils.getIndexByKey(key, that._expandedItems);\n            if (Array.isArray(key)) {\n              return that.callBase.apply(that, arguments);\n            } else {\n              return !!(that._isExpandAll ^ (expandIndex >= 0 && that._expandedItems[expandIndex].visible));\n            }\n          },\n          _getRowIndicesForExpand: function _getRowIndicesForExpand(key) {\n            var rowIndex = this.getRowIndexByKey(key);\n            return [rowIndex, rowIndex + 1];\n          },\n          _changeRowExpandCore: function _changeRowExpandCore(key) {\n            var that = this;\n            var result;\n            if (Array.isArray(key)) {\n              result = that.callBase.apply(that, arguments);\n            } else {\n              var expandIndex = gridCoreUtils.getIndexByKey(key, that._expandedItems);\n              if (expandIndex >= 0) {\n                var visible = that._expandedItems[expandIndex].visible;\n                that._expandedItems[expandIndex].visible = !visible;\n              } else {\n                that._expandedItems.push({\n                  key: key,\n                  visible: true\n                });\n              }\n              that.updateItems({\n                changeType: \"update\",\n                rowIndices: that._getRowIndicesForExpand(key)\n              });\n              result = new Deferred().resolve();\n            }\n            return result;\n          },\n          _processDataItem: function _processDataItem(data, options) {\n            var that = this;\n            var dataItem = that.callBase.apply(that, arguments);\n            dataItem.isExpanded = that.isRowExpanded(dataItem.key);\n            if (void 0 === options.detailColumnIndex) {\n              options.detailColumnIndex = -1;\n              each(options.visibleColumns, function (index, column) {\n                if (\"expand\" === column.command && !isDefined(column.groupIndex)) {\n                  options.detailColumnIndex = index;\n                  return false;\n                }\n              });\n            }\n            if (options.detailColumnIndex >= 0) {\n              dataItem.values[options.detailColumnIndex] = dataItem.isExpanded;\n            }\n            return dataItem;\n          },\n          _processItems: function _processItems(items, change) {\n            var that = this;\n            var changeType = change.changeType;\n            var result = [];\n            items = that.callBase.apply(that, arguments);\n            if (\"loadingAll\" === changeType) {\n              return items;\n            }\n            if (\"refresh\" === changeType) {\n              that._expandedItems = grep(that._expandedItems, function (item) {\n                return item.visible;\n              });\n            }\n            each(items, function (index, item) {\n              result.push(item);\n              var expandIndex = gridCoreUtils.getIndexByKey(item.key, that._expandedItems);\n              if (\"data\" === item.rowType && (item.isExpanded || expandIndex >= 0) && !item.isNewRow) {\n                result.push({\n                  visible: item.isExpanded,\n                  rowType: \"detail\",\n                  key: item.key,\n                  data: item.data,\n                  values: []\n                });\n              }\n            });\n            return result;\n          },\n          optionChanged: function optionChanged(args) {\n            var isEnabledChanged;\n            var isAutoExpandAllChanged;\n            if (\"masterDetail\" === args.name) {\n              args.name = \"dataSource\";\n              switch (args.fullName) {\n                case \"masterDetail\":\n                  var value = args.value || {};\n                  var previousValue = args.previousValue || {};\n                  isEnabledChanged = value.enabled !== previousValue.enabled;\n                  isAutoExpandAllChanged = value.autoExpandAll !== previousValue.autoExpandAll;\n                  break;\n                case \"masterDetail.template\":\n                  initMasterDetail(this);\n                  break;\n                case \"masterDetail.enabled\":\n                  isEnabledChanged = true;\n                  break;\n                case \"masterDetail.autoExpandAll\":\n                  isAutoExpandAllChanged = true;\n              }\n              if (isEnabledChanged || isAutoExpandAllChanged) {\n                initMasterDetail(this);\n              }\n            }\n            this.callBase(args);\n          }\n        };\n      }(),\n      resizing: {\n        fireContentReadyAction: function fireContentReadyAction() {\n          this.callBase.apply(this, arguments);\n          this._updateParentDataGrids(this.component.$element());\n        },\n        _updateParentDataGrids: function _updateParentDataGrids($element) {\n          var _this = this;\n          var $masterDetailRow = $element.closest(\".\" + MASTER_DETAIL_ROW_CLASS);\n          if ($masterDetailRow.length) {\n            when(this._updateMasterDataGrid($masterDetailRow, $element)).done(function () {\n              _this._updateParentDataGrids($masterDetailRow.parent());\n            });\n          }\n        },\n        _updateMasterDataGrid: function _updateMasterDataGrid($masterDetailRow, $detailElement) {\n          var masterRowOptions = $($masterDetailRow).data(\"options\");\n          var masterDataGrid = $($masterDetailRow).closest(\".\" + this.getWidgetContainerClass()).parent().data(\"dxDataGrid\");\n          if (masterRowOptions && masterDataGrid) {\n            return this._updateMasterDataGridCore(masterDataGrid, masterRowOptions);\n          }\n        },\n        _updateMasterDataGridCore: function _updateMasterDataGridCore(masterDataGrid, masterRowOptions) {\n          var d = Deferred();\n          if (masterDataGrid.getView(\"rowsView\").isFixedColumns()) {\n            this._updateFixedMasterDetailGrids(masterDataGrid, masterRowOptions.rowIndex, $(masterRowOptions.rowElement)).done(d.resolve);\n          } else {\n            if (true === masterDataGrid.option(\"scrolling.useNative\")) {\n              masterDataGrid.updateDimensions().done(function () {\n                return d.resolve(true);\n              });\n              return;\n            }\n            var scrollable = masterDataGrid.getScrollable();\n            if (scrollable) {\n              null === scrollable || void 0 === scrollable ? void 0 : scrollable.update().done(function () {\n                return d.resolve();\n              });\n            } else {\n              d.resolve();\n            }\n          }\n          return d.promise();\n        },\n        _updateFixedMasterDetailGrids: function _updateFixedMasterDetailGrids(masterDataGrid, masterRowIndex, $detailElement) {\n          var _this2 = this;\n          var d = Deferred();\n          var $rows = $(masterDataGrid.getRowElement(masterRowIndex));\n          var $tables = $(masterDataGrid.getView(\"rowsView\").getTableElements());\n          var rowsNotEqual = 2 === (null === $rows || void 0 === $rows ? void 0 : $rows.length) && getHeight($rows.eq(0)) !== getHeight($rows.eq(1));\n          var tablesNotEqual = 2 === (null === $tables || void 0 === $tables ? void 0 : $tables.length) && getHeight($tables.eq(0)) !== getHeight($tables.eq(1));\n          if (rowsNotEqual || tablesNotEqual) {\n            var detailElementWidth = getWidth($detailElement);\n            masterDataGrid.updateDimensions().done(function () {\n              var isDetailHorizontalScrollCanBeShown = _this2.option(\"columnAutoWidth\") && true === masterDataGrid.option(\"scrolling.useNative\");\n              var isDetailGridWidthChanged = isDetailHorizontalScrollCanBeShown && detailElementWidth !== getWidth($detailElement);\n              if (isDetailHorizontalScrollCanBeShown && isDetailGridWidthChanged) {\n                _this2.updateDimensions().done(function () {\n                  return d.resolve(true);\n                });\n              } else {\n                d.resolve(true);\n              }\n            });\n            return d.promise();\n          }\n          return Deferred().resolve();\n        },\n        _toggleBestFitMode: function _toggleBestFitMode(isBestFit) {\n          this.callBase.apply(this, arguments);\n          if (this.option(\"masterDetail.template\")) {\n            var $rowsTable = this._rowsView.getTableElement();\n            if ($rowsTable) {\n              $rowsTable.find(\".dx-master-detail-cell\").css(\"maxWidth\", isBestFit ? 0 : \"\");\n            }\n          }\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _getCellTemplate: function _getCellTemplate(options) {\n          var that = this;\n          var column = options.column;\n          var editingController = that.getController(\"editing\");\n          var isEditRow = editingController && editingController.isEditRow(options.rowIndex);\n          var template;\n          if (\"detail\" === column.command && !isEditRow) {\n            template = that.option(\"masterDetail.template\") || {\n              allowRenderToDetachedContainer: false,\n              render: that._getDefaultTemplate(column)\n            };\n          } else {\n            template = that.callBase.apply(that, arguments);\n          }\n          return template;\n        },\n        _isDetailRow: function _isDetailRow(row) {\n          return row && row.rowType && 0 === row.rowType.indexOf(\"detail\");\n        },\n        _createRow: function _createRow(row) {\n          var $row = this.callBase.apply(this, arguments);\n          if (row && this._isDetailRow(row)) {\n            this.option(\"showRowLines\") && $row.addClass(ROW_LINES_CLASS);\n            $row.addClass(MASTER_DETAIL_ROW_CLASS);\n            if (isDefined(row.visible)) {\n              $row.toggle(row.visible);\n            }\n          }\n          return $row;\n        },\n        _renderCells: function _renderCells($row, options) {\n          var row = options.row;\n          var $detailCell;\n          var visibleColumns = this._columnsController.getVisibleColumns();\n          if (row.rowType && this._isDetailRow(row)) {\n            if (this._needRenderCell(0, options.columnIndices)) {\n              $detailCell = this._renderCell($row, {\n                value: null,\n                row: row,\n                rowIndex: row.rowIndex,\n                column: {\n                  command: \"detail\"\n                },\n                columnIndex: 0,\n                change: options.change\n              });\n              $detailCell.addClass(CELL_FOCUS_DISABLED_CLASS).addClass(MASTER_DETAIL_CELL_CLASS).attr(\"colSpan\", visibleColumns.length);\n            }\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}