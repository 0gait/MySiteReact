{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n/**\r\n * DevExtreme (esm/ui/scheduler/appointments.layout_manager.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport { AppointmentViewModelGenerator } from \"./appointments/viewModelGenerator\";\nimport { getGroupCount } from \"./resources/utils\";\nimport { getCellWidth, getCellHeight, getAllDayHeight } from \"./workspaces/helpers/positionHelper\";\nimport { getCellDuration } from \"../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { getAppointmentRenderingStrategyName } from \"../../renovation/ui/scheduler/model/appointments\";\nvar AppointmentLayoutManager = /*#__PURE__*/function () {\n  function AppointmentLayoutManager(instance) {\n    _classCallCheck(this, AppointmentLayoutManager);\n    this.instance = instance;\n    this.appointmentViewModel = new AppointmentViewModelGenerator();\n  }\n  _createClass(AppointmentLayoutManager, [{\n    key: \"getCellDimensions\",\n    value: function getCellDimensions(options) {\n      if (this.instance._workSpace) {\n        return {\n          width: this.instance._workSpace.getCellWidth(),\n          height: this.instance._workSpace.getCellHeight(),\n          allDayHeight: this.instance._workSpace.getAllDayHeight()\n        };\n      }\n    }\n  }, {\n    key: \"_getRenderingStrategyOptions\",\n    value: function _getRenderingStrategyOptions() {\n      var workspace = this.instance.getWorkSpace();\n      var _this$instance$getWor = this.instance.getWorkSpace(),\n        virtualScrollingDispatcher = _this$instance$getWor.virtualScrollingDispatcher;\n      var cellCountInsideLeftVirtualCell = virtualScrollingDispatcher.cellCountInsideLeftVirtualCell,\n        cellCountInsideTopVirtualRow = virtualScrollingDispatcher.cellCountInsideTopVirtualRow;\n      var groupCount = getGroupCount(this.instance.option(\"loadedResources\"));\n      var DOMMetaData = workspace.getDOMElementsMetaData();\n      var allDayHeight = getAllDayHeight(workspace.option(\"showAllDayPanel\"), workspace._isVerticalGroupedWorkSpace(), DOMMetaData);\n      var rowCount = workspace._getRowCount();\n      var positionHelper = workspace.positionHelper,\n        viewDataProvider = workspace.viewDataProvider;\n      var visibleDayDuration = viewDataProvider.getVisibleDayDuration(workspace.option(\"startDayHour\"), workspace.option(\"endDayHour\"), workspace.option(\"hoursInterval\"));\n      var cellDuration = getCellDuration(workspace.type, workspace.option(\"startDayHour\"), workspace.option(\"endDayHour\"), workspace.option(\"hoursInterval\"));\n      return {\n        resources: this.instance.option(\"resources\"),\n        loadedResources: this.instance.option(\"loadedResources\"),\n        getAppointmentColor: this.instance.createGetAppointmentColor(),\n        dataAccessors: this.instance._dataAccessors,\n        isRenovatedAppointments: this.instance.option(\"isRenovatedAppointments\"),\n        appointmentRenderingStrategyName: this.appointmentRenderingStrategyName,\n        adaptivityEnabled: this.instance.option(\"adaptivityEnabled\"),\n        rtlEnabled: this.instance.option(\"rtlEnabled\"),\n        startDayHour: this.instance._getCurrentViewOption(\"startDayHour\"),\n        endDayHour: this.instance._getCurrentViewOption(\"endDayHour\"),\n        maxAppointmentsPerCell: this.instance._getCurrentViewOption(\"maxAppointmentsPerCell\"),\n        currentDate: this.instance.option(\"currentDate\"),\n        isVirtualScrolling: this.instance.isVirtualScrolling(),\n        leftVirtualCellCount: cellCountInsideLeftVirtualCell,\n        topVirtualCellCount: cellCountInsideTopVirtualRow,\n        intervalCount: workspace.option(\"intervalCount\"),\n        hoursInterval: workspace.option(\"hoursInterval\"),\n        showAllDayPanel: workspace.option(\"showAllDayPanel\"),\n        isGroupedAllDayPanel: workspace.isGroupedAllDayPanel(),\n        groups: this.instance._getCurrentViewOption(\"groups\"),\n        groupCount: groupCount,\n        rowCount: rowCount,\n        appointmentCountPerCell: this.instance.option(\"_appointmentCountPerCell\"),\n        appointmentOffset: this.instance.option(\"_appointmentOffset\"),\n        allowResizing: this.instance._allowResizing(),\n        allowAllDayResizing: this.instance._allowAllDayResizing(),\n        startViewDate: workspace.getStartViewDate(),\n        groupOrientation: workspace._getRealGroupOrientation(),\n        cellWidth: getCellWidth(DOMMetaData),\n        cellHeight: getCellHeight(DOMMetaData),\n        allDayHeight: allDayHeight,\n        resizableStep: positionHelper.getResizableStep(),\n        visibleDayDuration: visibleDayDuration,\n        allDayPanelMode: this.instance._getCurrentViewOption(\"allDayPanelMode\"),\n        timeZoneCalculator: this.instance.timeZoneCalculator,\n        timeZone: this.instance.option(\"timeZone\"),\n        firstDayOfWeek: this.instance.getFirstDayOfWeek(),\n        viewStartDayHour: this.instance._getCurrentViewOption(\"startDayHour\"),\n        viewEndDayHour: this.instance._getCurrentViewOption(\"endDayHour\"),\n        viewType: workspace.type,\n        endViewDate: workspace.getEndViewDate(),\n        positionHelper: positionHelper,\n        isGroupedByDate: workspace.isGroupedByDate(),\n        cellDuration: cellDuration,\n        cellDurationInMinutes: workspace.option(\"cellDuration\"),\n        viewDataProvider: workspace.viewDataProvider,\n        supportAllDayRow: workspace.supportAllDayRow(),\n        dateRange: workspace.getDateRange(),\n        intervalDuration: workspace.getIntervalDuration(),\n        allDayIntervalDuration: workspace.getIntervalDuration(true),\n        isVerticalGroupOrientation: workspace.isVerticalOrientation(),\n        DOMMetaData: DOMMetaData,\n        instance: this.instance,\n        agendaDuration: workspace.option(\"agendaDuration\")\n      };\n    }\n  }, {\n    key: \"createAppointmentsMap\",\n    value: function createAppointmentsMap(items) {\n      var renderingStrategyOptions = this._getRenderingStrategyOptions();\n      var _this$appointmentView = this.appointmentViewModel.generate(items, renderingStrategyOptions),\n        viewModel = _this$appointmentView.viewModel,\n        positionMap = _this$appointmentView.positionMap;\n      this._positionMap = positionMap;\n      return viewModel;\n    }\n  }, {\n    key: \"_isDataChanged\",\n    value: function _isDataChanged(data) {\n      var appointmentDataProvider = this.instance.appointmentDataProvider;\n      var updatedData = appointmentDataProvider.getUpdatedAppointment();\n      return updatedData === data || appointmentDataProvider.getUpdatedAppointmentKeys().some(function (item) {\n        return data[item.key] === item.value;\n      });\n    }\n  }, {\n    key: \"_isAppointmentShouldAppear\",\n    value: function _isAppointmentShouldAppear(currentAppointment, sourceAppointment) {\n      return currentAppointment.needRepaint && sourceAppointment.needRemove;\n    }\n  }, {\n    key: \"_isSettingChanged\",\n    value: function _isSettingChanged(settings, sourceSetting) {\n      if (settings.length !== sourceSetting.length) {\n        return true;\n      }\n      var createSettingsToCompare = function createSettingsToCompare(settings, index) {\n        var currentSetting = settings[index];\n        var leftVirtualCellCount = currentSetting.leftVirtualCellCount || 0;\n        var topVirtualCellCount = currentSetting.topVirtualCellCount || 0;\n        var columnIndex = currentSetting.columnIndex + leftVirtualCellCount;\n        var rowIndex = currentSetting.rowIndex + topVirtualCellCount;\n        var hMax = currentSetting.reduced ? currentSetting.hMax : void 0;\n        var vMax = currentSetting.reduced ? currentSetting.vMax : void 0;\n        return _extends({}, currentSetting, {\n          columnIndex: columnIndex,\n          rowIndex: rowIndex,\n          positionByMap: void 0,\n          topVirtualCellCount: void 0,\n          leftVirtualCellCount: void 0,\n          leftVirtualWidth: void 0,\n          topVirtualHeight: void 0,\n          hMax: hMax,\n          vMax: vMax,\n          info: {}\n        });\n      };\n      for (var i = 0; i < settings.length; i++) {\n        var newSettings = createSettingsToCompare(settings, i);\n        var oldSettings = createSettingsToCompare(sourceSetting, i);\n        if (oldSettings) {\n          oldSettings.sortedIndex = newSettings.sortedIndex;\n        }\n        if (!equalByValue(newSettings, oldSettings)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"_getAssociatedSourceAppointment\",\n    value: function _getAssociatedSourceAppointment(currentAppointment, sourceAppointments) {\n      for (var i = 0; i < sourceAppointments.length; i++) {\n        var item = sourceAppointments[i];\n        if (item.itemData === currentAppointment.itemData) {\n          return item;\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"_getDeletedAppointments\",\n    value: function _getDeletedAppointments(currentAppointments, sourceAppointments) {\n      var result = [];\n      for (var i = 0; i < sourceAppointments.length; i++) {\n        var sourceAppointment = sourceAppointments[i];\n        var currentAppointment = this._getAssociatedSourceAppointment(sourceAppointment, currentAppointments);\n        if (!currentAppointment) {\n          sourceAppointment.needRemove = true;\n          result.push(sourceAppointment);\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"getRepaintedAppointments\",\n    value: function getRepaintedAppointments(currentAppointments, sourceAppointments) {\n      var _this = this;\n      if (0 === sourceAppointments.length || \"agenda\" === this.appointmentRenderingStrategyName) {\n        return currentAppointments;\n      }\n      currentAppointments.forEach(function (appointment) {\n        var sourceAppointment = _this._getAssociatedSourceAppointment(appointment, sourceAppointments);\n        if (sourceAppointment) {\n          var isDataChanged = _this._isDataChanged(appointment.itemData);\n          var isSettingChanged = _this._isSettingChanged(appointment.settings, sourceAppointment.settings);\n          var isAppointmentShouldAppear = _this._isAppointmentShouldAppear(appointment, sourceAppointment);\n          appointment.needRepaint = isDataChanged || isSettingChanged || isAppointmentShouldAppear;\n        }\n      });\n      return currentAppointments.concat(this._getDeletedAppointments(currentAppointments, sourceAppointments));\n    }\n  }, {\n    key: \"getRenderingStrategyInstance\",\n    value: function getRenderingStrategyInstance() {\n      var renderingStrategy = this.appointmentViewModel.getRenderingStrategy();\n      if (!renderingStrategy) {\n        var options = this._getRenderingStrategyOptions();\n        this.appointmentViewModel.initRenderingStrategy(options);\n      }\n      return this.appointmentViewModel.getRenderingStrategy();\n    }\n  }, {\n    key: \"appointmentRenderingStrategyName\",\n    get: function get() {\n      return getAppointmentRenderingStrategyName(this.instance.currentViewType);\n    }\n  }]);\n  return AppointmentLayoutManager;\n}();\nexport default AppointmentLayoutManager;","map":null,"metadata":{},"sourceType":"module"}