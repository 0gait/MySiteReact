{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n/**\r\n * DevExtreme (esm/renovation/ui/scheduler/timeZoneCalculator/utils.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../../../core/utils/type\";\nimport dateUtils from \"../../../../core/utils/date\";\nimport { PathTimeZoneConversion } from \"./types\";\nvar MS_IN_MINUTE = 6e4;\nvar MS_IN_HOUR = 60 * MS_IN_MINUTE;\nexport var TimeZoneCalculator = /*#__PURE__*/function () {\n  function TimeZoneCalculator(options) {\n    _classCallCheck(this, TimeZoneCalculator);\n    this.options = options;\n  }\n  _createClass(TimeZoneCalculator, [{\n    key: \"createDate\",\n    value: function createDate(sourceDate, info) {\n      var date = new Date(sourceDate);\n      switch (info.path) {\n        case PathTimeZoneConversion.fromSourceToAppointment:\n          return this.getConvertedDate(date, info.appointmentTimeZone, true, false);\n        case PathTimeZoneConversion.fromAppointmentToSource:\n          return this.getConvertedDate(date, info.appointmentTimeZone, true, true);\n        case PathTimeZoneConversion.fromSourceToGrid:\n          return this.getConvertedDate(date, info.appointmentTimeZone, false, false);\n        case PathTimeZoneConversion.fromGridToSource:\n          return this.getConvertedDate(date, info.appointmentTimeZone, false, true);\n        default:\n          throw new Error(\"not specified pathTimeZoneConversion\");\n      }\n    }\n  }, {\n    key: \"getOffsets\",\n    value: function getOffsets(date, appointmentTimezone) {\n      var clientOffset = -this.getClientOffset(date) / dateUtils.dateToMilliseconds(\"hour\");\n      var commonOffset = this.getCommonOffset(date);\n      var appointmentOffset = this.getAppointmentOffset(date, appointmentTimezone);\n      return {\n        client: clientOffset,\n        common: !isDefined(commonOffset) ? clientOffset : commonOffset,\n        appointment: \"number\" !== typeof appointmentOffset ? clientOffset : appointmentOffset\n      };\n    }\n  }, {\n    key: \"getConvertedDateByOffsets\",\n    value: function getConvertedDateByOffsets(date, clientOffset, targetOffset, isBack) {\n      var direction = isBack ? -1 : 1;\n      var resultDate = new Date(date);\n      resultDate.setMinutes(resultDate.getMinutes() - direction * (60 * clientOffset));\n      resultDate.setMinutes(resultDate.getMinutes() + direction * (60 * targetOffset));\n      return new Date(resultDate);\n    }\n  }, {\n    key: \"getOriginStartDateOffsetInMs\",\n    value: function getOriginStartDateOffsetInMs(date, timezone, isUTCDate) {\n      var offsetInHours = this.getOffsetInHours(date, timezone, isUTCDate);\n      return offsetInHours * MS_IN_HOUR;\n    }\n  }, {\n    key: \"getOffsetInHours\",\n    value: function getOffsetInHours(date, timezone, isUTCDate) {\n      var _this$getOffsets = this.getOffsets(date, timezone),\n        appointment = _this$getOffsets.appointment,\n        client = _this$getOffsets.client,\n        common = _this$getOffsets.common;\n      if (!!timezone && isUTCDate) {\n        return appointment - client;\n      }\n      if (!!timezone && !isUTCDate) {\n        return appointment - common;\n      }\n      if (!timezone && isUTCDate) {\n        return common - client;\n      }\n      return 0;\n    }\n  }, {\n    key: \"getClientOffset\",\n    value: function getClientOffset(date) {\n      return this.options.getClientOffset(date);\n    }\n  }, {\n    key: \"getCommonOffset\",\n    value: function getCommonOffset(date) {\n      return this.options.tryGetCommonOffset(date);\n    }\n  }, {\n    key: \"getAppointmentOffset\",\n    value: function getAppointmentOffset(date, appointmentTimezone) {\n      return this.options.tryGetAppointmentOffset(date, appointmentTimezone);\n    }\n  }, {\n    key: \"getConvertedDate\",\n    value: function getConvertedDate(date, appointmentTimezone, useAppointmentTimeZone, isBack) {\n      var newDate = new Date(date.getTime());\n      var offsets = this.getOffsets(newDate, appointmentTimezone);\n      if (useAppointmentTimeZone && !!appointmentTimezone) {\n        return this.getConvertedDateByOffsets(date, offsets.client, offsets.appointment, isBack);\n      }\n      return this.getConvertedDateByOffsets(date, offsets.client, offsets.common, isBack);\n    }\n  }]);\n  return TimeZoneCalculator;\n}();","map":null,"metadata":{},"sourceType":"module"}