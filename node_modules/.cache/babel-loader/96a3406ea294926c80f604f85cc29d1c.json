{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\n/**\r\n * DevExtreme (esm/renovation/ui/scheduler/appointment/appointment.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"appointmentTemplate\", \"groups\", \"hideReducedIconTooltip\", \"index\", \"onItemClick\", \"onItemDoubleClick\", \"showReducedIconTooltip\", \"viewModel\"];\nimport { createComponentVNode, normalizeProps } from \"inferno\";\nimport { InfernoEffect, InfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { normalizeStyles } from \"@devextreme/runtime/inferno\";\nimport { getAppointmentStyles, mergeStylesWithColor } from \"./utils\";\nimport { AppointmentContent } from \"./content/layout\";\nimport { Widget } from \"../../common/widget\";\nimport { combineClasses } from \"../../../utils/combine_classes\";\nimport { getAppointmentColor } from \"../resources/utils\";\nimport { AppointmentsContext } from \"../appointments_context\";\nexport var viewFunction = function viewFunction(_ref) {\n  var classes = _ref.classes,\n    data = _ref.data,\n    dateText = _ref.dateText,\n    isReduced = _ref.isReduced,\n    onItemClick = _ref.onItemClick,\n    _ref$props = _ref.props,\n    appointmentTemplate = _ref$props.appointmentTemplate,\n    hideReducedIconTooltip = _ref$props.hideReducedIconTooltip,\n    index = _ref$props.index,\n    showReducedIconTooltip = _ref$props.showReducedIconTooltip,\n    isRecurrent = _ref$props.viewModel.info.isRecurrent,\n    ref = _ref.ref,\n    styles = _ref.styles,\n    text = _ref.text;\n  return normalizeProps(createComponentVNode(2, Widget, _extends({\n    focusStateEnabled: true,\n    onClick: onItemClick,\n    rootElementRef: ref,\n    style: normalizeStyles(styles),\n    classes: classes,\n    hint: text\n  }, {\n    role: \"button\",\n    \"data-index\": index\n  }, {\n    children: createComponentVNode(2, AppointmentContent, {\n      text: text,\n      isReduced: isReduced,\n      dateText: dateText,\n      isRecurrent: isRecurrent,\n      index: index,\n      data: data,\n      showReducedIconTooltip: showReducedIconTooltip,\n      hideReducedIconTooltip: hideReducedIconTooltip,\n      appointmentTemplate: appointmentTemplate\n    })\n  })));\n};\nexport var AppointmentProps = {\n  index: 0\n};\nimport { createRef as infernoCreateRef } from \"inferno\";\nvar getTemplate = function getTemplate(TemplateProp) {\n  return TemplateProp && (TemplateProp.defaultProps ? function (props) {\n    return normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props)));\n  } : TemplateProp);\n};\nexport var Appointment = /*#__PURE__*/function (_InfernoComponent) {\n  _inherits(Appointment, _InfernoComponent);\n  function Appointment(props) {\n    var _this;\n    _classCallCheck(this, Appointment);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Appointment).call(this, props));\n    _this.ref = infernoCreateRef();\n    _this.state = {\n      color: void 0\n    };\n    _this.updateStylesEffect = _this.updateStylesEffect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.bindDoubleClickEffect = _this.bindDoubleClickEffect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onItemClick = _this.onItemClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onItemDoubleClick = _this.onItemDoubleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  _createClass(Appointment, [{\n    key: \"createEffects\",\n    value: function createEffects() {\n      return [new InfernoEffect(this.updateStylesEffect, [this.props.viewModel, this.appointmentsContextValue, this.props.groups]), new InfernoEffect(this.bindDoubleClickEffect, [])];\n    }\n  }, {\n    key: \"updateEffects\",\n    value: function updateEffects() {\n      var _this$_effects$;\n      null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.props.viewModel, this.appointmentsContextValue, this.props.groups]);\n    }\n  }, {\n    key: \"updateStylesEffect\",\n    value: function updateStylesEffect() {\n      var _this2 = this;\n      var _viewModel$info$group;\n      var viewModel = this.props.viewModel;\n      var groupIndex = null !== (_viewModel$info$group = viewModel.info.groupIndex) && void 0 !== _viewModel$info$group ? _viewModel$info$group : 0;\n      var appointment = viewModel.appointment;\n      getAppointmentColor({\n        resources: this.appointmentsContextValue.resources,\n        resourceLoaderMap: this.appointmentsContextValue.resourceLoaderMap,\n        resourcesDataAccessors: this.appointmentsContextValue.dataAccessors.resources,\n        loadedResources: this.appointmentsContextValue.loadedResources\n      }, {\n        itemData: appointment,\n        groupIndex: groupIndex,\n        groups: this.props.groups\n      }).then(function (color) {\n        _this2.setState(function (__state_argument) {\n          return {\n            color: color\n          };\n        });\n      }).catch(function () {\n        return \"\";\n      });\n    }\n  }, {\n    key: \"bindDoubleClickEffect\",\n    value: function bindDoubleClickEffect() {\n      var _this3 = this;\n      var _this$ref$current;\n      var onDoubleClick = function onDoubleClick() {\n        return _this3.onItemDoubleClick();\n      };\n      null === (_this$ref$current = this.ref.current) || void 0 === _this$ref$current ? void 0 : _this$ref$current.addEventListener(\"dblclick\", onDoubleClick);\n      return function () {\n        var _this$ref$current2;\n        null === (_this$ref$current2 = _this3.ref.current) || void 0 === _this$ref$current2 ? void 0 : _this$ref$current2.removeEventListener(\"dblclick\", onDoubleClick);\n      };\n    }\n  }, {\n    key: \"onItemClick\",\n    value: function onItemClick() {\n      var e = {\n        data: [this.props.viewModel],\n        target: this.ref.current,\n        index: this.props.index\n      };\n      this.props.onItemClick(e);\n    }\n  }, {\n    key: \"onItemDoubleClick\",\n    value: function onItemDoubleClick() {\n      var e = {\n        data: [this.props.viewModel],\n        target: this.ref.current,\n        index: this.props.index\n      };\n      this.props.onItemDoubleClick(e);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      return viewFunction({\n        props: _extends({}, props, {\n          appointmentTemplate: getTemplate(props.appointmentTemplate)\n        }),\n        color: this.state.color,\n        ref: this.ref,\n        appointmentsContextValue: this.appointmentsContextValue,\n        appointmentStyles: this.appointmentStyles,\n        styles: this.styles,\n        text: this.text,\n        isReduced: this.isReduced,\n        classes: this.classes,\n        dateText: this.dateText,\n        data: this.data,\n        onItemClick: this.onItemClick,\n        onItemDoubleClick: this.onItemDoubleClick,\n        restAttributes: this.restAttributes\n      });\n    }\n  }, {\n    key: \"appointmentsContextValue\",\n    get: function get() {\n      if (this.context[AppointmentsContext.id]) {\n        return this.context[AppointmentsContext.id];\n      }\n      return AppointmentsContext.defaultValue;\n    }\n  }, {\n    key: \"appointmentStyles\",\n    get: function get() {\n      return getAppointmentStyles(this.props.viewModel);\n    }\n  }, {\n    key: \"styles\",\n    get: function get() {\n      return mergeStylesWithColor(this.state.color, this.appointmentStyles);\n    }\n  }, {\n    key: \"text\",\n    get: function get() {\n      return this.props.viewModel.appointment.text;\n    }\n  }, {\n    key: \"isReduced\",\n    get: function get() {\n      var appointmentReduced = this.props.viewModel.info.appointmentReduced;\n      return !!appointmentReduced;\n    }\n  }, {\n    key: \"classes\",\n    get: function get() {\n      var _this$props$viewModel = this.props.viewModel,\n        focused = _this$props$viewModel.focused,\n        _this$props$viewModel2 = _this$props$viewModel.info,\n        allDay = _this$props$viewModel2.allDay,\n        appointmentReduced = _this$props$viewModel2.appointmentReduced,\n        direction = _this$props$viewModel2.direction,\n        isRecurrent = _this$props$viewModel2.isRecurrent;\n      var isVerticalDirection = \"vertical\" === direction;\n      return combineClasses({\n        \"dx-state-focused\": !!focused,\n        \"dx-scheduler-appointment\": true,\n        \"dx-scheduler-appointment-horizontal\": !isVerticalDirection,\n        \"dx-scheduler-appointment-vertical\": isVerticalDirection,\n        \"dx-scheduler-appointment-recurrence\": isRecurrent,\n        \"dx-scheduler-all-day-appointment\": allDay,\n        \"dx-scheduler-appointment-reduced\": this.isReduced,\n        \"dx-scheduler-appointment-head\": \"head\" === appointmentReduced,\n        \"dx-scheduler-appointment-body\": \"body\" === appointmentReduced,\n        \"dx-scheduler-appointment-tail\": \"tail\" === appointmentReduced\n      });\n    }\n  }, {\n    key: \"dateText\",\n    get: function get() {\n      return this.props.viewModel.info.dateText;\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return {\n        appointmentData: this.props.viewModel.info.appointment,\n        targetedAppointmentData: this.props.viewModel.appointment\n      };\n    }\n  }, {\n    key: \"restAttributes\",\n    get: function get() {\n      var _this$props = this.props,\n        restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n      return restProps;\n    }\n  }]);\n  return Appointment;\n}(InfernoComponent);\nAppointment.defaultProps = AppointmentProps;","map":null,"metadata":{},"sourceType":"module"}