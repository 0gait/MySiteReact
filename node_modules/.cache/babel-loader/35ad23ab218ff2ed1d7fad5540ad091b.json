{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\tiriq\\\\Documents\\\\Tiago\\\\MyThings\\\\MyProjects\\\\site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.dialog.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isDefined } from \"../../core/utils/type\";\nimport messageLocalization from \"../../localization/message\";\nimport Widget from \"../widget/ui.widget\";\nimport Popup from \"../popup/ui.popup\";\nvar FILE_MANAGER_DIALOG_CONTENT = \"dx-filemanager-dialog\";\nvar FILE_MANAGER_DIALOG_POPUP = \"dx-filemanager-dialog-popup\";\nvar FileManagerDialogBase = /*#__PURE__*/function (_Widget) {\n  _inherits(FileManagerDialogBase, _Widget);\n  function FileManagerDialogBase() {\n    _classCallCheck(this, FileManagerDialogBase);\n    return _possibleConstructorReturn(this, _getPrototypeOf(FileManagerDialogBase).apply(this, arguments));\n  }\n  _createClass(FileManagerDialogBase, [{\n    key: \"_initMarkup\",\n    value: function _initMarkup() {\n      var _this = this;\n      var _options$popupCssClas;\n      _get(_getPrototypeOf(FileManagerDialogBase.prototype), \"_initMarkup\", this).call(this);\n      this._createOnClosedAction();\n      var options = this._getDialogOptions();\n      var $popup = $(\"<div>\").appendTo(this.$element());\n      var popupOptions = {\n        showTitle: true,\n        title: options.title,\n        visible: false,\n        hideOnOutsideClick: true,\n        contentTemplate: this._createContentTemplate.bind(this),\n        toolbarItems: [{\n          widget: \"dxButton\",\n          toolbar: \"bottom\",\n          location: \"after\",\n          options: {\n            text: options.buttonText,\n            onClick: this._applyDialogChanges.bind(this)\n          }\n        }, {\n          widget: \"dxButton\",\n          toolbar: \"bottom\",\n          location: \"after\",\n          options: {\n            text: messageLocalization.format(\"dxFileManager-dialogButtonCancel\"),\n            onClick: this._closeDialog.bind(this)\n          }\n        }],\n        onInitialized: function onInitialized(_ref) {\n          var component = _ref.component;\n          component.registerKeyHandler(\"enter\", _this._applyDialogChanges.bind(_this));\n        },\n        onHidden: this._onPopupHidden.bind(this),\n        onShown: this._onPopupShown.bind(this),\n        _wrapperClassExternal: \"\".concat(FILE_MANAGER_DIALOG_POPUP, \" \").concat(null !== (_options$popupCssClas = options.popupCssClass) && void 0 !== _options$popupCssClas ? _options$popupCssClas : \"\")\n      };\n      if (isDefined(options.height)) {\n        popupOptions.height = options.height;\n      }\n      if (isDefined(options.maxHeight)) {\n        popupOptions.maxHeight = options.maxHeight;\n      }\n      this._popup = this._createComponent($popup, Popup, popupOptions);\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      this._dialogResult = null;\n      this._popup.show();\n    }\n  }, {\n    key: \"_getDialogOptions\",\n    value: function _getDialogOptions() {\n      return {\n        title: \"Title\",\n        buttonText: \"ButtonText\",\n        contentCssClass: \"\",\n        popupCssClass: \"\"\n      };\n    }\n  }, {\n    key: \"_createContentTemplate\",\n    value: function _createContentTemplate(element) {\n      this._$contentElement = $(\"<div>\").appendTo(element).addClass(FILE_MANAGER_DIALOG_CONTENT);\n      var cssClass = this._getDialogOptions().contentCssClass;\n      if (cssClass) {\n        this._$contentElement.addClass(cssClass);\n      }\n    }\n  }, {\n    key: \"_getDialogResult\",\n    value: function _getDialogResult() {\n      return null;\n    }\n  }, {\n    key: \"_applyDialogChanges\",\n    value: function _applyDialogChanges() {\n      var result = this._getDialogResult();\n      if (result) {\n        this._dialogResult = result;\n        this._closeDialog();\n      }\n    }\n  }, {\n    key: \"_closeDialog\",\n    value: function _closeDialog() {\n      this._popup.hide();\n    }\n  }, {\n    key: \"_onPopupHidden\",\n    value: function _onPopupHidden() {\n      this._onClosedAction({\n        dialogResult: this._dialogResult\n      });\n    }\n  }, {\n    key: \"_onPopupShown\",\n    value: function _onPopupShown() {}\n  }, {\n    key: \"_createOnClosedAction\",\n    value: function _createOnClosedAction() {\n      this._onClosedAction = this._createActionByOption(\"onClosed\");\n    }\n  }, {\n    key: \"_setTitle\",\n    value: function _setTitle(newTitle) {\n      this._popup.option(\"title\", newTitle);\n    }\n  }, {\n    key: \"_setApplyButtonOptions\",\n    value: function _setApplyButtonOptions(options) {\n      this._popup.option(\"toolbarItems[0].options\", options);\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function _getDefaultOptions() {\n      return extend(_get(_getPrototypeOf(FileManagerDialogBase.prototype), \"_getDefaultOptions\", this).call(this), {\n        onClosed: null\n      });\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function _optionChanged(args) {\n      var name = args.name;\n      switch (name) {\n        case \"onClosed\":\n          this._createOnPathChangedAction();\n          break;\n        default:\n          _get(_getPrototypeOf(FileManagerDialogBase.prototype), \"_optionChanged\", this).call(this, args);\n      }\n    }\n  }]);\n  return FileManagerDialogBase;\n}(Widget);\nexport default FileManagerDialogBase;","map":null,"metadata":{},"sourceType":"module"}