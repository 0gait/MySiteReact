{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.header_filter.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport modules from \"./ui.grid_core.modules\";\nimport filterUtils from \"../shared/filtering\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { headerFilterMixin, HeaderFilterView, updateHeaderFilterItemSelectionState, allowHeaderFiltering } from \"./ui.grid_core.header_filter_core\";\nimport messageLocalization from \"../../localization/message\";\nimport { name as clickEventName } from \"../../events/click\";\nimport { compileGetter } from \"../../core/utils/data\";\nimport { each } from \"../../core/utils/iterator\";\nimport { isDefined, isObject, isFunction } from \"../../core/utils/type\";\nimport { getDefaultAlignment } from \"../../core/utils/position\";\nimport { extend } from \"../../core/utils/extend\";\nimport { normalizeDataSourceOptions } from \"../../data/data_source/utils\";\nimport dateLocalization from \"../../localization/date\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { restoreFocus, saveFocusedElementInfo } from \"../shared/accessibility\";\nimport dataQuery from \"../../data/query\";\nimport storeHelper from \"../../data/store_helper\";\nvar DATE_INTERVAL_FORMATS = {\n  month: function month(value) {\n    return dateLocalization.getMonthNames()[value - 1];\n  },\n  quarter: function quarter(value) {\n    return dateLocalization.format(new Date(2e3, 3 * value - 1), \"quarter\");\n  }\n};\nfunction ungroupUTCDates(items, dateParts, dates) {\n  dateParts = dateParts || [];\n  dates = dates || [];\n  items.forEach(function (item) {\n    if (isDefined(item.key)) {\n      var isMonthPart = 1 === dateParts.length;\n      dateParts.push(isMonthPart ? item.key - 1 : item.key);\n      if (item.items) {\n        ungroupUTCDates(item.items, dateParts, dates);\n      } else {\n        var date = new Date(Date.UTC.apply(Date, dateParts));\n        dates.push(date);\n      }\n      dateParts.pop();\n    } else {\n      dates.push(null);\n    }\n  });\n  return dates;\n}\nfunction convertDataFromUTCToLocal(data, column) {\n  var dates = ungroupUTCDates(data);\n  var query = dataQuery(dates);\n  var group = gridCoreUtils.getHeaderFilterGroupParameters(_extends({}, column, {\n    calculateCellValue: function calculateCellValue(date) {\n      return date;\n    }\n  }));\n  return storeHelper.queryByOptions(query, {\n    group: group\n  }).toArray();\n}\nfunction isUTCFormat(format) {\n  return \"Z\" === (null === format || void 0 === format ? void 0 : format.slice(-1)) || \"'Z'\" === (null === format || void 0 === format ? void 0 : format.slice(-3));\n}\nvar HeaderFilterController = modules.ViewController.inherit({\n  init: function init() {\n    this._columnsController = this.getController(\"columns\");\n    this._dataController = this.getController(\"data\");\n    this._headerFilterView = this.getView(\"headerFilterView\");\n  },\n  _updateSelectedState: function _updateSelectedState(items, column) {\n    var i = items.length;\n    var isExclude = \"exclude\" === column.filterType;\n    while (i--) {\n      var item = items[i];\n      if (\"items\" in items[i]) {\n        this._updateSelectedState(items[i].items, column);\n      }\n      updateHeaderFilterItemSelectionState(item, gridCoreUtils.getIndexByKey(items[i].value, column.filterValues, null) > -1, isExclude);\n    }\n  },\n  _normalizeGroupItem: function _normalizeGroupItem(item, currentLevel, options) {\n    var value;\n    var displayValue;\n    var path = options.path;\n    var valueSelector = options.valueSelector;\n    var displaySelector = options.displaySelector;\n    var column = options.column;\n    if (valueSelector && displaySelector) {\n      value = valueSelector(item);\n      displayValue = displaySelector(item);\n    } else {\n      value = item.key;\n      displayValue = value;\n    }\n    if (!isObject(item)) {\n      item = {};\n    } else {\n      item = extend({}, item);\n    }\n    path.push(value);\n    if (1 === path.length) {\n      item.value = path[0];\n    } else {\n      item.value = path.join(\"/\");\n    }\n    item.text = this.getHeaderItemText(displayValue, column, currentLevel, options.headerFilterOptions);\n    return item;\n  },\n  getHeaderItemText: function getHeaderItemText(displayValue, column, currentLevel, headerFilterOptions) {\n    var text = gridCoreUtils.formatValue(displayValue, function (value, column, currentLevel) {\n      var groupInterval = filterUtils.getGroupInterval(column);\n      var result = gridCoreUtils.getFormatOptionsByColumn(column, \"headerFilter\");\n      if (groupInterval) {\n        result.groupInterval = groupInterval[currentLevel];\n        if (gridCoreUtils.isDateType(column.dataType)) {\n          result.format = DATE_INTERVAL_FORMATS[groupInterval[currentLevel]];\n        } else if (\"number\" === column.dataType) {\n          result.getDisplayFormat = function () {\n            var formatOptions = {\n              format: column.format,\n              target: \"headerFilter\"\n            };\n            var firstValueText = gridCoreUtils.formatValue(value, formatOptions);\n            var secondValue = value + groupInterval[currentLevel];\n            var secondValueText = gridCoreUtils.formatValue(secondValue, formatOptions);\n            return firstValueText && secondValueText ? firstValueText + \" - \" + secondValueText : \"\";\n          };\n        }\n      }\n      return result;\n    }(displayValue, column, currentLevel));\n    if (!text) {\n      text = headerFilterOptions.texts.emptyValue;\n    }\n    return text;\n  },\n  _processGroupItems: function _processGroupItems(groupItems, currentLevel, path, options) {\n    var displaySelector;\n    var valueSelector;\n    var column = options.column;\n    var lookup = column.lookup;\n    var level = options.level;\n    path = path || [];\n    currentLevel = currentLevel || 0;\n    if (lookup) {\n      displaySelector = compileGetter(lookup.displayExpr);\n      valueSelector = compileGetter(lookup.valueExpr);\n    }\n    for (var i = 0; i < groupItems.length; i++) {\n      groupItems[i] = this._normalizeGroupItem(groupItems[i], currentLevel, {\n        column: options.column,\n        headerFilterOptions: options.headerFilterOptions,\n        displaySelector: displaySelector,\n        valueSelector: valueSelector,\n        path: path\n      });\n      if (\"items\" in groupItems[i]) {\n        if (currentLevel === level || !isDefined(groupItems[i].value)) {\n          delete groupItems[i].items;\n        } else {\n          this._processGroupItems(groupItems[i].items, currentLevel + 1, path, options);\n        }\n      }\n      path.pop();\n    }\n  },\n  getDataSource: function getDataSource(column) {\n    var _column$headerFilter;\n    var dataSource = this._dataController.dataSource();\n    var remoteGrouping = null === dataSource || void 0 === dataSource ? void 0 : dataSource.remoteOperations().grouping;\n    var group = gridCoreUtils.getHeaderFilterGroupParameters(column, remoteGrouping);\n    var headerFilterDataSource = null === (_column$headerFilter = column.headerFilter) || void 0 === _column$headerFilter ? void 0 : _column$headerFilter.dataSource;\n    var headerFilterOptions = this.option(\"headerFilter\");\n    var isLookup = false;\n    var options = {\n      component: this.component\n    };\n    if (!dataSource) {\n      return;\n    }\n    if (isDefined(headerFilterDataSource) && !isFunction(headerFilterDataSource)) {\n      options.dataSource = normalizeDataSourceOptions(headerFilterDataSource);\n    } else if (column.lookup) {\n      isLookup = true;\n      if (this.option(\"syncLookupFilterValues\")) {\n        this._currentColumn = column;\n        var filter = this._dataController.getCombinedFilter();\n        this._currentColumn = null;\n        options.dataSource = gridCoreUtils.getWrappedLookupDataSource(column, dataSource, filter);\n      } else {\n        options.dataSource = gridCoreUtils.normalizeLookupDataSource(column.lookup);\n      }\n    } else {\n      var cutoffLevel = Array.isArray(group) ? group.length - 1 : 0;\n      this._currentColumn = column;\n      var _filter = this._dataController.getCombinedFilter();\n      this._currentColumn = null;\n      options.dataSource = {\n        filter: _filter,\n        group: group,\n        useDefaultSearch: true,\n        load: function load(options) {\n          var d = new Deferred();\n          options.dataField = column.dataField || column.name;\n          dataSource.load(options).done(function (data) {\n            var convertUTCDates = remoteGrouping && isUTCFormat(column.serializationFormat) && cutoffLevel > 3;\n            if (convertUTCDates) {\n              data = convertDataFromUTCToLocal(data, column);\n            }\n            that._processGroupItems(data, null, null, {\n              level: cutoffLevel,\n              column: column,\n              headerFilterOptions: headerFilterOptions\n            });\n            d.resolve(data);\n          }).fail(d.reject);\n          return d;\n        }\n      };\n    }\n    if (isFunction(headerFilterDataSource)) {\n      headerFilterDataSource.call(column, options);\n    }\n    var origPostProcess = options.dataSource.postProcess;\n    var that = this;\n    options.dataSource.postProcess = function (data) {\n      var items = data;\n      if (isLookup) {\n        if (0 === this.pageIndex() && !this.searchValue()) {\n          items = items.slice(0);\n          items.unshift(null);\n        }\n        that._processGroupItems(items, null, null, {\n          level: 0,\n          column: column,\n          headerFilterOptions: headerFilterOptions\n        });\n      }\n      items = origPostProcess && origPostProcess.call(this, items) || items;\n      that._updateSelectedState(items, column);\n      return items;\n    };\n    return options.dataSource;\n  },\n  getCurrentColumn: function getCurrentColumn() {\n    return this._currentColumn;\n  },\n  showHeaderFilterMenu: function showHeaderFilterMenu(columnIndex, isGroupPanel) {\n    var columnsController = this._columnsController;\n    var column = extend(true, {}, this._columnsController.getColumns()[columnIndex]);\n    if (column) {\n      var visibleIndex = columnsController.getVisibleIndex(columnIndex);\n      var view = isGroupPanel ? this.getView(\"headerPanel\") : this.getView(\"columnHeadersView\");\n      var $columnElement = $columnElement || view.getColumnElements().eq(isGroupPanel ? column.groupIndex : visibleIndex);\n      this.showHeaderFilterMenuBase({\n        columnElement: $columnElement,\n        column: column,\n        applyFilter: true,\n        apply: function apply() {\n          columnsController.columnOption(columnIndex, {\n            filterValues: this.filterValues,\n            filterType: this.filterType\n          });\n        }\n      });\n    }\n  },\n  showHeaderFilterMenuBase: function showHeaderFilterMenuBase(options) {\n    var _this = this;\n    var that = this;\n    var column = options.column;\n    if (column) {\n      var groupInterval = filterUtils.getGroupInterval(column);\n      var dataSource = that._dataController.dataSource();\n      var remoteFiltering = dataSource && dataSource.remoteOperations().filtering;\n      extend(options, column, {\n        type: groupInterval && groupInterval.length > 1 ? \"tree\" : \"list\",\n        remoteFiltering: remoteFiltering,\n        onShowing: function onShowing(e) {\n          var dxResizableInstance = e.component.$overlayContent().dxResizable(\"instance\");\n          dxResizableInstance && dxResizableInstance.option(\"onResizeEnd\", function (e) {\n            var columnsController = that.getController(\"columns\");\n            var headerFilterByColumn = columnsController.columnOption(options.dataField, \"headerFilter\");\n            headerFilterByColumn = headerFilterByColumn || {};\n            headerFilterByColumn.width = e.width;\n            headerFilterByColumn.height = e.height;\n            columnsController.columnOption(options.dataField, \"headerFilter\", headerFilterByColumn, true);\n          });\n        },\n        onHidden: function onHidden() {\n          return restoreFocus(_this);\n        }\n      });\n      options.dataSource = that.getDataSource(options);\n      if (options.isFilterBuilder) {\n        options.dataSource.filter = null;\n        options.alignment = \"right\";\n      }\n      that._headerFilterView.showHeaderFilterMenu(options.columnElement, options);\n    }\n  },\n  hideHeaderFilterMenu: function hideHeaderFilterMenu() {\n    this._headerFilterView.hideHeaderFilterMenu();\n  }\n});\nvar ColumnHeadersViewHeaderFilterExtender = extend({}, headerFilterMixin, {\n  _renderCellContent: function _renderCellContent($cell, options) {\n    var that = this;\n    var $headerFilterIndicator;\n    var column = options.column;\n    if (!column.command && allowHeaderFiltering(column) && that.option(\"headerFilter.visible\") && \"header\" === options.rowType) {\n      $headerFilterIndicator = that._applyColumnState({\n        name: \"headerFilter\",\n        rootElement: $cell,\n        column: column,\n        showColumnLines: that.option(\"showColumnLines\")\n      });\n      $headerFilterIndicator && that._subscribeToIndicatorEvent($headerFilterIndicator, column, \"headerFilter\");\n    }\n    this.callBase.apply(this, arguments);\n  },\n  _subscribeToIndicatorEvent: function _subscribeToIndicatorEvent($indicator, column, indicatorName) {\n    var _this2 = this;\n    if (\"headerFilter\" === indicatorName) {\n      eventsEngine.on($indicator, clickEventName, this.createAction(function (e) {\n        e.event.stopPropagation();\n        saveFocusedElementInfo($indicator, _this2);\n        _this2.getController(\"headerFilter\").showHeaderFilterMenu(column.index, false);\n      }));\n    }\n  },\n  _updateIndicator: function _updateIndicator($cell, column, indicatorName) {\n    var $indicator = this.callBase($cell, column, indicatorName);\n    $indicator && this._subscribeToIndicatorEvent($indicator, column, indicatorName);\n  },\n  _updateHeaderFilterIndicators: function _updateHeaderFilterIndicators() {\n    if (this.option(\"headerFilter.visible\")) {\n      this._updateIndicators(\"headerFilter\");\n    }\n  },\n  _needUpdateFilterIndicators: function _needUpdateFilterIndicators() {\n    return true;\n  },\n  _columnOptionChanged: function _columnOptionChanged(e) {\n    var optionNames = e.optionNames;\n    if (gridCoreUtils.checkChanges(optionNames, [\"filterValues\", \"filterType\"])) {\n      if (this._needUpdateFilterIndicators()) {\n        this._updateHeaderFilterIndicators();\n      }\n      return;\n    }\n    this.callBase(e);\n  }\n});\nvar HeaderPanelHeaderFilterExtender = extend({}, headerFilterMixin, {\n  _createGroupPanelItem: function _createGroupPanelItem($rootElement, groupColumn) {\n    var that = this;\n    var $item = that.callBase.apply(that, arguments);\n    var $headerFilterIndicator;\n    if (!groupColumn.command && allowHeaderFiltering(groupColumn) && that.option(\"headerFilter.visible\")) {\n      $headerFilterIndicator = that._applyColumnState({\n        name: \"headerFilter\",\n        rootElement: $item,\n        column: {\n          alignment: getDefaultAlignment(that.option(\"rtlEnabled\")),\n          filterValues: groupColumn.filterValues,\n          allowHeaderFiltering: true\n        },\n        showColumnLines: true\n      });\n      $headerFilterIndicator && eventsEngine.on($headerFilterIndicator, clickEventName, that.createAction(function (e) {\n        var event = e.event;\n        event.stopPropagation();\n        that.getController(\"headerFilter\").showHeaderFilterMenu(groupColumn.index, true);\n      }));\n    }\n    return $item;\n  }\n});\nexport function invertFilterExpression(filter) {\n  return [\"!\", filter];\n}\nvar DataControllerFilterRowExtender = {\n  skipCalculateColumnFilters: function skipCalculateColumnFilters() {\n    return false;\n  },\n  _calculateAdditionalFilter: function _calculateAdditionalFilter() {\n    if (this.skipCalculateColumnFilters()) {\n      return this.callBase();\n    }\n    var filters = [this.callBase()];\n    var columns = this._columnsController.getVisibleColumns(null, true);\n    var headerFilterController = this.getController(\"headerFilter\");\n    var currentColumn = headerFilterController.getCurrentColumn();\n    each(columns, function (_, column) {\n      var filter;\n      if (currentColumn && currentColumn.index === column.index) {\n        return;\n      }\n      if (allowHeaderFiltering(column) && column.calculateFilterExpression && Array.isArray(column.filterValues) && column.filterValues.length) {\n        var filterValues = [];\n        each(column.filterValues, function (_, filterValue) {\n          if (Array.isArray(filterValue)) {\n            filter = filterValue;\n          } else {\n            if (column.deserializeValue && !gridCoreUtils.isDateType(column.dataType) && \"number\" !== column.dataType) {\n              filterValue = column.deserializeValue(filterValue);\n            }\n            filter = column.createFilterExpression(filterValue, \"=\", \"headerFilter\");\n          }\n          if (filter) {\n            filter.columnIndex = column.index;\n          }\n          filterValues.push(filter);\n        });\n        filterValues = gridCoreUtils.combineFilters(filterValues, \"or\");\n        filters.push(\"exclude\" === column.filterType ? [\"!\", filterValues] : filterValues);\n      }\n    });\n    return gridCoreUtils.combineFilters(filters);\n  }\n};\nexport var headerFilterModule = {\n  defaultOptions: function defaultOptions() {\n    return {\n      syncLookupFilterValues: true,\n      headerFilter: {\n        visible: false,\n        width: 252,\n        height: 325,\n        allowSearch: false,\n        searchTimeout: 500,\n        texts: {\n          emptyValue: messageLocalization.format(\"dxDataGrid-headerFilterEmptyValue\"),\n          ok: messageLocalization.format(\"dxDataGrid-headerFilterOK\"),\n          cancel: messageLocalization.format(\"dxDataGrid-headerFilterCancel\")\n        }\n      }\n    };\n  },\n  controllers: {\n    headerFilter: HeaderFilterController\n  },\n  views: {\n    headerFilterView: HeaderFilterView\n  },\n  extenders: {\n    controllers: {\n      data: DataControllerFilterRowExtender\n    },\n    views: {\n      columnHeadersView: ColumnHeadersViewHeaderFilterExtender,\n      headerPanel: HeaderPanelHeaderFilterExtender\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}