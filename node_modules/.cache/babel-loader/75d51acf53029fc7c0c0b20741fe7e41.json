{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/axes/constant_line.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../core/utils/type\";\nexport default function createConstantLine(axis, options) {\n  var labelOptions = options.label || {};\n  var labelPosition = labelOptions.position || \"inside\";\n  var parsedValue;\n  var valueIsParsed = false;\n  var lastStoredCoordinates;\n  axis._checkAlignmentConstantLineLabels(labelOptions);\n  var storedCoord;\n  return {\n    options: options,\n    labelOptions: labelOptions,\n    labelPosition: labelPosition,\n    label: null,\n    line: null,\n    getParsedValue: function getParsedValue() {\n      if (!valueIsParsed) {\n        parsedValue = axis.validateUnit(options.value, \"E2105\", \"constantLine\");\n        valueIsParsed = true;\n        return parsedValue;\n      }\n      return parsedValue;\n    },\n    draw: function draw() {\n      if (!isDefined(options.value) || axis._translator.getBusinessRange().isEmpty()) {\n        return this;\n      }\n      var canvas = axis._getCanvasStartEnd();\n      var parsedValue = this.getParsedValue();\n      this.coord = axis._getConstantLinePos(parsedValue, canvas.start, canvas.end);\n      var rootGroup = options.displayBehindSeries ? axis._axisConstantLineGroups.under : axis._axisConstantLineGroups.above;\n      var group = rootGroup[labelPosition];\n      if (!group) {\n        var side = axis._isHorizontal ? labelOptions.verticalAlignment : labelOptions.horizontalAlignment;\n        group = rootGroup[side];\n      }\n      if (!isDefined(this.coord)) {\n        return this;\n      }\n      var path = axis._createConstantLine(this.coord, {\n        stroke: options.color,\n        \"stroke-width\": options.width,\n        dashStyle: options.dashStyle\n      });\n      this.line = path.append(rootGroup.inside);\n      this.label = labelOptions.visible ? axis._drawConstantLineLabels(parsedValue, labelOptions, this.coord, group) : null;\n      this.updatePosition();\n      return this;\n    },\n    getContentContainer: function getContentContainer() {\n      return this.label;\n    },\n    removeLabel: function removeLabel() {\n      this.label && this.label.remove();\n    },\n    updatePosition: function updatePosition(animate) {\n      var canvas = axis._getCanvasStartEnd();\n      var coord = axis._getConstantLinePos(this.getParsedValue(), canvas.start, canvas.end);\n      if (!isDefined(coord)) {\n        return;\n      }\n      this.coord = coord;\n      if (animate && storedCoord) {\n        this.label && this.label.attr(axis._getConstantLineLabelsCoords(storedCoord, this.labelOptions));\n        this.line && this.line.attr(axis._getConstantLineGraphicAttributes(storedCoord));\n        this.label && this.label.animate(axis._getConstantLineLabelsCoords(this.coord, this.labelOptions));\n        this.line && this.line.animate(axis._getConstantLineGraphicAttributes(this.coord));\n      } else {\n        this.label && this.label.attr(axis._getConstantLineLabelsCoords(this.coord, this.labelOptions));\n        this.line && this.line.attr(axis._getConstantLineGraphicAttributes(this.coord));\n        axis._rotateConstantLine(this.line, this.coord);\n      }\n    },\n    saveCoords: function saveCoords() {\n      lastStoredCoordinates = storedCoord;\n      storedCoord = this.coord;\n    },\n    resetCoordinates: function resetCoordinates() {\n      storedCoord = lastStoredCoordinates;\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}