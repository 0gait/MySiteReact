{"ast":null,"code":"/*!\n * devextreme-react\n * Version: 22.2.4\n * Build date: Thu Jan 19 2023\n *\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ElementType = exports.getElementInfo = void 0;\nvar template_1 = require(\"../../template\");\nvar ElementType;\n(function (ElementType) {\n  ElementType[ElementType[\"Option\"] = 0] = \"Option\";\n  ElementType[ElementType[\"Template\"] = 1] = \"Template\";\n  ElementType[ElementType[\"Unknown\"] = 2] = \"Unknown\";\n})(ElementType || (ElementType = {}));\nexports.ElementType = ElementType;\nfunction getElementInfo(element, parentExpectedChildren) {\n  var reactElement = element;\n  if (!reactElement || !reactElement.type) {\n    return {\n      type: ElementType.Unknown\n    };\n  }\n  if (reactElement.type === template_1.Template) {\n    return {\n      type: ElementType.Template,\n      props: reactElement.props\n    };\n  }\n  var elementDescriptor = reactElement.type;\n  if (elementDescriptor.OptionName) {\n    var name_1 = elementDescriptor.OptionName;\n    var isCollectionItem = elementDescriptor.IsCollectionItem;\n    var expectation = parentExpectedChildren && parentExpectedChildren[name_1];\n    if (expectation) {\n      isCollectionItem = expectation.isCollectionItem;\n      if (expectation.optionName) {\n        name_1 = expectation.optionName;\n      }\n    }\n    return {\n      type: ElementType.Option,\n      descriptor: {\n        name: name_1,\n        isCollection: isCollectionItem,\n        templates: elementDescriptor.TemplateProps || [],\n        initialValuesProps: elementDescriptor.DefaultsProps || {},\n        predefinedValuesProps: elementDescriptor.PredefinedProps || {},\n        expectedChildren: elementDescriptor.ExpectedChildren || {}\n      },\n      props: reactElement.props\n    };\n  }\n  return {\n    type: ElementType.Unknown\n  };\n}\nexports.getElementInfo = getElementInfo;","map":null,"metadata":{},"sourceType":"script"}