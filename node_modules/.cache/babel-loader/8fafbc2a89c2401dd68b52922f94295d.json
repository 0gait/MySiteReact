{"ast":null,"code":"/*!\n * devextreme-react\n * Version: 22.2.4\n * Build date: Thu Jan 19 2023\n *\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileUploader = void 0;\nvar file_uploader_1 = require(\"devextreme/ui/file_uploader\");\nvar PropTypes = require(\"prop-types\");\nvar component_1 = require(\"./core/component\");\nvar FileUploader = /** @class */function (_super) {\n  __extends(FileUploader, _super);\n  function FileUploader() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this._WidgetClass = file_uploader_1.default;\n    _this.subscribableOptions = [\"value\"];\n    _this.independentEvents = [\"onBeforeSend\", \"onContentReady\", \"onDisposing\", \"onDropZoneEnter\", \"onDropZoneLeave\", \"onFilesUploaded\", \"onInitialized\", \"onProgress\", \"onUploadAborted\", \"onUploaded\", \"onUploadError\", \"onUploadStarted\", \"onValueChanged\"];\n    _this._defaults = {\n      defaultValue: \"value\"\n    };\n    return _this;\n  }\n  Object.defineProperty(FileUploader.prototype, \"instance\", {\n    get: function get() {\n      return this._instance;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return FileUploader;\n}(component_1.Component);\nexports.FileUploader = FileUploader;\nFileUploader.propTypes = {\n  abortUpload: PropTypes.func,\n  accept: PropTypes.string,\n  accessKey: PropTypes.string,\n  activeStateEnabled: PropTypes.bool,\n  allowCanceling: PropTypes.bool,\n  allowedFileExtensions: PropTypes.array,\n  chunkSize: PropTypes.number,\n  disabled: PropTypes.bool,\n  elementAttr: PropTypes.object,\n  focusStateEnabled: PropTypes.bool,\n  height: PropTypes.oneOfType([PropTypes.func, PropTypes.number, PropTypes.string]),\n  hint: PropTypes.string,\n  hoverStateEnabled: PropTypes.bool,\n  invalidFileExtensionMessage: PropTypes.string,\n  invalidMaxFileSizeMessage: PropTypes.string,\n  invalidMinFileSizeMessage: PropTypes.string,\n  isValid: PropTypes.bool,\n  labelText: PropTypes.string,\n  maxFileSize: PropTypes.number,\n  minFileSize: PropTypes.number,\n  multiple: PropTypes.bool,\n  name: PropTypes.string,\n  onBeforeSend: PropTypes.func,\n  onContentReady: PropTypes.func,\n  onDisposing: PropTypes.func,\n  onDropZoneEnter: PropTypes.func,\n  onDropZoneLeave: PropTypes.func,\n  onFilesUploaded: PropTypes.func,\n  onInitialized: PropTypes.func,\n  onOptionChanged: PropTypes.func,\n  onProgress: PropTypes.func,\n  onUploadAborted: PropTypes.func,\n  onUploaded: PropTypes.func,\n  onUploadError: PropTypes.func,\n  onUploadStarted: PropTypes.func,\n  onValueChanged: PropTypes.func,\n  progress: PropTypes.number,\n  readOnly: PropTypes.bool,\n  readyToUploadMessage: PropTypes.string,\n  rtlEnabled: PropTypes.bool,\n  selectButtonText: PropTypes.string,\n  showFileList: PropTypes.bool,\n  tabIndex: PropTypes.number,\n  uploadAbortedMessage: PropTypes.string,\n  uploadButtonText: PropTypes.string,\n  uploadChunk: PropTypes.func,\n  uploadedMessage: PropTypes.string,\n  uploadFailedMessage: PropTypes.string,\n  uploadFile: PropTypes.func,\n  uploadMethod: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([\"POST\", \"PUT\"])]),\n  uploadMode: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([\"instantly\", \"useButtons\", \"useForm\"])]),\n  uploadUrl: PropTypes.string,\n  validationErrors: PropTypes.array,\n  validationStatus: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([\"valid\", \"invalid\", \"pending\"])]),\n  value: PropTypes.array,\n  visible: PropTypes.bool,\n  width: PropTypes.oneOfType([PropTypes.func, PropTypes.number, PropTypes.string])\n};\nexports.default = FileUploader;","map":null,"metadata":{},"sourceType":"script"}