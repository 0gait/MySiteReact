{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/tree_map/states.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport TreeMapBase from \"./tree_map.base\";\nimport Node from \"./node\";\nimport { noop } from \"../../core/utils/common\";\nvar proto = TreeMapBase.prototype;\nvar nodeProto = Node.prototype;\nvar handlers = proto._handlers;\nvar _calculateState = handlers.calculateState;\nvar _buildState = nodeProto._buildState;\nimport { extend as _extend } from \"../../core/utils/extend\";\nhandlers.calculateState = function (options) {\n  var states = {\n    0: _calculateState(options)\n  };\n  handlers.calculateAdditionalStates(states, options);\n  return states;\n};\nhandlers.calculateAdditionalStates = noop;\nnodeProto.code = 0;\nnodeProto.statesMap = {\n  0: 0\n};\nnodeProto.additionalStates = [];\nnodeProto._buildState = function (state, extra) {\n  var states = {\n    0: _buildState(state[0], extra)\n  };\n  if (this.additionalStates.length) {\n    buildAdditionalStates(states, states[0], state, this.additionalStates);\n  }\n  return states;\n};\nnodeProto._getState = function () {\n  return this.state[this.statesMap[this.code]];\n};\nnodeProto.setState = function (code, state) {\n  if (state) {\n    this.code |= code;\n  } else {\n    this.code &= ~code;\n  }\n  this.ctx.change([\"TILES\"]);\n};\nfunction buildAdditionalStates(states, base, source, list) {\n  var i;\n  var ii = list.length;\n  for (i = 0; i < ii; ++i) {\n    states[list[i]] = _extend({}, base, source[list[i]]);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}