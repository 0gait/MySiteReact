{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/list/ui.list.edit.provider.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { noop } from \"../../core/utils/common\";\nimport Class from \"../../core/class\";\nimport { extend } from \"../../core/utils/extend\";\nimport { each } from \"../../core/utils/iterator\";\nimport errors from \"../widget/ui.errors\";\nimport { registry } from \"./ui.list.edit.decorator_registry\";\nvar editOptionsRegistry = [];\nvar registerOption = function registerOption(enabledFunc, decoratorTypeFunc, decoratorSubTypeFunc) {\n  editOptionsRegistry.push({\n    enabled: enabledFunc,\n    decoratorType: decoratorTypeFunc,\n    decoratorSubType: decoratorSubTypeFunc\n  });\n};\nregisterOption(function () {\n  return this.option(\"menuItems\").length;\n}, function () {\n  return \"menu\";\n}, function () {\n  return this.option(\"menuMode\");\n});\nregisterOption(function () {\n  return !this.option(\"menuItems\").length && this.option(\"allowItemDeleting\");\n}, function () {\n  var mode = this.option(\"itemDeleteMode\");\n  return \"toggle\" === mode || \"slideButton\" === mode || \"swipe\" === mode || \"static\" === mode ? \"delete\" : \"menu\";\n}, function () {\n  var mode = this.option(\"itemDeleteMode\");\n  if (\"slideItem\" === mode) {\n    mode = \"slide\";\n  }\n  return mode;\n});\nregisterOption(function () {\n  return \"none\" !== this.option(\"selectionMode\") && this.option(\"showSelectionControls\");\n}, function () {\n  return \"selection\";\n}, function () {\n  return \"default\";\n});\nregisterOption(function () {\n  return this.option(\"itemDragging.allowReordering\") || this.option(\"itemDragging.allowDropInsideItem\") || this.option(\"itemDragging.group\");\n}, function () {\n  return \"reorder\";\n}, function () {\n  return \"default\";\n});\nvar LIST_ITEM_BEFORE_BAG_CLASS = \"dx-list-item-before-bag\";\nvar LIST_ITEM_AFTER_BAG_CLASS = \"dx-list-item-after-bag\";\nvar DECORATOR_BEFORE_BAG_CREATE_METHOD = \"beforeBag\";\nvar DECORATOR_AFTER_BAG_CREATE_METHOD = \"afterBag\";\nvar DECORATOR_MODIFY_ELEMENT_METHOD = \"modifyElement\";\nvar DECORATOR_AFTER_RENDER_METHOD = \"afterRender\";\nvar DECORATOR_GET_EXCLUDED_SELECTORS_METHOD = \"getExcludedSelectors\";\nvar EditProvider = Class.inherit({\n  ctor: function ctor(list) {\n    this._list = list;\n    this._fetchRequiredDecorators();\n  },\n  dispose: function dispose() {\n    if (this._decorators && this._decorators.length) {\n      each(this._decorators, function (_, decorator) {\n        decorator.dispose();\n      });\n    }\n  },\n  _fetchRequiredDecorators: function _fetchRequiredDecorators() {\n    this._decorators = [];\n    each(editOptionsRegistry, function (_, option) {\n      var optionEnabled = option.enabled.call(this._list);\n      if (optionEnabled) {\n        var decoratorType = option.decoratorType.call(this._list);\n        var decoratorSubType = option.decoratorSubType.call(this._list);\n        var decorator = this._createDecorator(decoratorType, decoratorSubType);\n        this._decorators.push(decorator);\n      }\n    }.bind(this));\n  },\n  _createDecorator: function _createDecorator(type, subType) {\n    var decoratorClass = this._findDecorator(type, subType);\n    return new decoratorClass(this._list);\n  },\n  _findDecorator: function _findDecorator(type, subType) {\n    var _registry$type;\n    var foundDecorator = null === (_registry$type = registry[type]) || void 0 === _registry$type ? void 0 : _registry$type[subType];\n    if (!foundDecorator) {\n      throw errors.Error(\"E1012\", type, subType);\n    }\n    return foundDecorator;\n  },\n  modifyItemElement: function modifyItemElement(args) {\n    var $itemElement = $(args.itemElement);\n    var config = {\n      $itemElement: $itemElement\n    };\n    this._prependBeforeBags($itemElement, config);\n    this._appendAfterBags($itemElement, config);\n    this._applyDecorators(DECORATOR_MODIFY_ELEMENT_METHOD, config);\n  },\n  afterItemsRendered: function afterItemsRendered() {\n    this._applyDecorators(DECORATOR_AFTER_RENDER_METHOD);\n  },\n  _prependBeforeBags: function _prependBeforeBags($itemElement, config) {\n    var $beforeBags = this._collectDecoratorsMarkup(DECORATOR_BEFORE_BAG_CREATE_METHOD, config, LIST_ITEM_BEFORE_BAG_CLASS);\n    $itemElement.prepend($beforeBags);\n  },\n  _appendAfterBags: function _appendAfterBags($itemElement, config) {\n    var $afterBags = this._collectDecoratorsMarkup(DECORATOR_AFTER_BAG_CREATE_METHOD, config, LIST_ITEM_AFTER_BAG_CLASS);\n    $itemElement.append($afterBags);\n  },\n  _collectDecoratorsMarkup: function _collectDecoratorsMarkup(method, config, containerClass) {\n    var $collector = $(\"<div>\");\n    each(this._decorators, function () {\n      var $container = $(\"<div>\").addClass(containerClass);\n      this[method](extend({\n        $container: $container\n      }, config));\n      if ($container.children().length) {\n        $collector.append($container);\n      }\n    });\n    return $collector.children();\n  },\n  _applyDecorators: function _applyDecorators(method, config) {\n    each(this._decorators, function () {\n      this[method](config);\n    });\n  },\n  _handlerExists: function _handlerExists(name) {\n    if (!this._decorators) {\n      return false;\n    }\n    var decorators = this._decorators;\n    var length = decorators.length;\n    for (var i = 0; i < length; i++) {\n      if (decorators[i][name] !== noop) {\n        return true;\n      }\n    }\n    return false;\n  },\n  _eventHandler: function _eventHandler(name, $itemElement, e) {\n    if (!this._decorators) {\n      return false;\n    }\n    var response = false;\n    var decorators = this._decorators;\n    var length = decorators.length;\n    for (var i = 0; i < length; i++) {\n      response = decorators[i][name]($itemElement, e);\n      if (response) {\n        break;\n      }\n    }\n    return response;\n  },\n  handleClick: function handleClick($itemElement, e) {\n    return this._eventHandler(\"handleClick\", $itemElement, e);\n  },\n  handleKeyboardEvents: function handleKeyboardEvents(currentFocusedIndex, moveFocusUp) {\n    return this._eventHandler(\"handleKeyboardEvents\", currentFocusedIndex, moveFocusUp);\n  },\n  handleEnterPressing: function handleEnterPressing(e) {\n    return this._eventHandler(\"handleEnterPressing\", e);\n  },\n  contextMenuHandlerExists: function contextMenuHandlerExists() {\n    return this._handlerExists(\"handleContextMenu\");\n  },\n  handleContextMenu: function handleContextMenu($itemElement, e) {\n    return this._eventHandler(\"handleContextMenu\", $itemElement, e);\n  },\n  getExcludedItemSelectors: function getExcludedItemSelectors() {\n    var excludedSelectors = [];\n    this._applyDecorators(DECORATOR_GET_EXCLUDED_SELECTORS_METHOD, excludedSelectors);\n    return excludedSelectors.join(\",\");\n  }\n});\nexport default EditProvider;","map":null,"metadata":{},"sourceType":"module"}